//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
//////////////////////////////////////////////////////////////
//
// Header file for MainWindow
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
//////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997, 1996, 1995 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// MainWindow.h           Initial author: J.W. Pflugrath           16-Dec-1995
//    This file contains the main window include file for dtdisplay.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#ifndef MainWindow_H
#define MainWindow_H
#include "UIComponent.h"
class CUIprintSelect;
class CUIreflnfileSelect;
class CUIimageviewprops;
class CUIreflnviewprops;
class CUIimagefileSelect;

//
// Globally included information (change thru Output File Names Dialog).
//


//
// Class Specific Includes (change thru the class in Resource Editor).
//



// Begin user code block <head>

#include <Xm/Text.h>
#include "X11/Xatom.h"
//#include "iostream.h"
//#include "iomanip.h"
#include "Cstring.h"
#include "CXdisplay.h"
#include "CUIimageviewprops.h"
#include "CUIreflnviewprops.h"
#include "Cimage.h"
#include "Cdetector.h"
#include "Csource.h"
#include "Cscan.h"
#include "Creflnlist.h"
#include "C3Ddata.h"
#include "CXcolormap.h"
#include "CXhelp.h"
#include "CXprop.h"

// End user code block <head>

class MainWindow : public UIComponent

// Begin user code block <superclass>
// End user code block <superclass>
{

// Begin user code block <friends>
// End user code block <friends>

  public:

    MainWindow(const char *, Widget);
    MainWindow(const char *);
    virtual ~MainWindow();
    virtual void create(Widget);
    const char *const  className();
    
    // Begin user code block <public>

    virtual void vPreStartPublicCB(Widget, XtPointer, XtPointer);

    static Cstring ms_sAtomNameWindowID;
    static Cstring ms_sAtomNameImageUpdate;
    static Cstring ms_sAtomNameReflnUpdate;
    static Cstring ms_sAtomNameBeamCenterUpdate;

    void vNewImage(const int nUpdateScaling = 0);
    int  nNewHeader(const Cstring sHeaderFile, const bool bReadFiles=TRUE);
    int  nNewHeader(Cimage_header &roHeaderIn, const bool bReadFiles=TRUE);
    void vLoadImageFile(const char *pcName = NULL);
    
    // End user code block <public>
  protected:
    // Classes created by this class
    CUIprintSelect* _cUIprintSelect;
    CUIreflnfileSelect* _cUIreflnfileSelect;
    CUIimageviewprops* _cUIimageviewprops;
    CUIreflnviewprops* _cUIreflnviewprops;
    CUIimagefileSelect* _cUIimagefileSelect;
    
    // Widgets created by this class
    Widget _MainWindow;
    Widget _xmDialogShell6;
    Widget _xmDialogShell5;
    Widget _xmDialogShell1;
    Widget _xmDialogShell9;
    Widget _mbError;
    Widget _xmDialogShell8;
    Widget _mbProgress;
    Widget _fmProgress;
    Widget _scProgress;
    Widget _xmDialogShell2;
    Widget _xmDialogShell4;
    Widget _fmViewHeader;
    Widget _pbViewHeaderDismiss;
    Widget _spViewHeader;
    Widget _swViewHeader;
    Widget _tfViewHeader;
    Widget _xmDialogShell3;
    Widget _mbViewZoomPan;
    Widget _xmDialogShell;
    Widget _menuBar;
    Widget _cbFile;
    Widget _pmFile;
    Widget _cbFileNew;
    Widget _pmFileNew;
    Widget _pbFileNewImage;
    Widget _pbFileNewScan;
    Widget _spFileNew1;
    Widget _pbFileNewOverlay;
    Widget _pbFileNewTile;
    Widget _pbFileNewUnderlay;
    Widget _pbFileNewMovie;
    Widget _pbFileNewAverage;
    Widget _pbFileNewStats;
    Widget _pbFileOpen;
    Widget _pbFileSaveAs;
    Widget _pbFileSaveHeader;
    Widget _pbFileTemplate;
    Widget _spFile4;
    Widget _pbFileLoad;
    Widget _pbFileWrite;
    Widget _spFile1;
    Widget _pbFilePrefer;
    Widget _pbFilePrint;
    Widget _spFile2;
    Widget _cbFileListen;
    Widget _pmFileListen;
    Widget _tbFileListenIntegrate;
    Widget _tbFileListenCollect;
    Widget _tbFileListenOther;
    Widget _spFile3;
    Widget _pbFileExit;
    Widget _cbEdit;
    Widget _pmEdit;
    Widget _pbEditImage;
    Widget _pbEditRefln;
    Widget _pbEditClear;
    Widget _pbEditDelRef;
    Widget _spEdit;
    Widget _tbEditErase;
    Widget _pbEditBeam;
    Widget _pbEditHeader;
    Widget _cbView;
    Widget _pmView;
    Widget _pbViewRefresh;
    Widget _pbViewZoom;
    Widget _pbViewUnzoom;
    Widget _pbViewPan;
    Widget _spView1;
    Widget _pbViewHeader;
    Widget _tbViewCalc;
    Widget _tbViewObs;
    Widget _tbViewReso;
    Widget _tbViewMeasure;
    Widget _tbViewPlot;
    Widget _tbViewPixel;
    Widget _cbHelp;
    Widget _pmHelp;
    Widget _pbHelpHTML;
    Widget _pbHelpAbout;
    Widget _pbHelpRefln;
    Widget _cbUtils;
    Widget _pmUtils;
    Widget _pbUtilsProcess;
    Widget _pbUtilsProcessExternHKL;
    Widget _pbUtilsProcessExternXDS;
    Widget _pbUtilsProcessExternMOSFLM;
    Widget _pbUtilsProcessExtern;
    Widget _form;
    Widget _frImageSmall;
    Widget _daImageSmall;
    Widget _pwMain;
    Widget _foMainTop;
    Widget _tbCursorBeam;
    Widget _tbCursorSpot;
    Widget _tbCursorMeasure;
    Widget _tbCursorRect;
    Widget _lbImageNum;
    Widget _pbImageNext;
    Widget _pbImagePrev;
    Widget _swOutput;
    Widget _tfOutput;
    Widget _tfImageNum;
    Widget _foMainMid;
    Widget _lbRotStart;
    Widget _tfRotStart;
    Widget _lbRotEnd;
    Widget _tfRotEnd;
    Widget _tfDetDist;
    Widget _lbDetDist;
    Widget _lbDetSwing;
    Widget _tfDetSwing;
    Widget _tfWavelength;
    Widget _lbWavelength;
    Widget _frImageBig;
    Widget _daImageBig;
    
    // These virtual functions are called from the private callbacks 
    // or event handlers intended to be overridden in derived classes
    // to define actions
    
    virtual void vProgressCancelCB(Widget, XtPointer, XtPointer);
    virtual void vHTMLHelp(Widget, XtPointer, XtPointer);
    virtual void vUnpostHelp(Widget, XtPointer, XtPointer);
    virtual void vPostHelp(Widget, XtPointer, XtPointer);
    virtual void vFileSelectionPostCB(Widget, XtPointer, XtPointer);
    virtual void vLoadReflnCB(Widget, XtPointer, XtPointer);
    virtual void vPostPrintCB(Widget, XtPointer, XtPointer);
    virtual void vFileListenCB(Widget, XtPointer, XtPointer);
    virtual void vExitCB(Widget, XtPointer, XtPointer);
    virtual void vPopupImagePropsCB(Widget, XtPointer, XtPointer);
    virtual void vPopupReflnPropsCB(Widget, XtPointer, XtPointer);
    virtual void vClearOutput(Widget, XtPointer, XtPointer);
    virtual void vDeleteReflns(Widget, XtPointer, XtPointer);
    virtual void vEraseToggleCB(Widget, XtPointer, XtPointer);
    virtual void vZoomMsgPopup(Widget, XtPointer, XtPointer);
    virtual void vViewRefresh(Widget, XtPointer, XtPointer);
    virtual void vUnzoomCB(Widget, XtPointer, XtPointer);
    virtual void vViewHeaderCB(Widget, XtPointer, XtPointer);
    virtual void vPlotReflnListCB(Widget, XtPointer, XtPointer);
    virtual void vDrawResoCB(Widget, XtPointer, XtPointer);
    virtual void vPopDialog(Widget, XtPointer, XtPointer);
    virtual void vUtilsCB(Widget, XtPointer, XtPointer);
    virtual void vCursorModeCB(Widget, XtPointer, XtPointer);
    virtual void vFileTemplateCB(Widget, XtPointer, XtPointer);
    virtual void vTextFieldCB(Widget, XtPointer, XtPointer);
    virtual void vDAInputCB(Widget, XtPointer, XtPointer);
    
    // Begin user code block <protected>

    virtual void vUpdateImageViewPropsDialog(void);
    virtual void vUpdateReflnViewPropsDialog(void);
    virtual void vUpdateText(void);
    virtual void vIntegrate2D(const float fReso);
    virtual void vMovie(void);
    virtual void vTile(void);
    virtual void vOverlay(void);
    virtual void vUnderlay(void);
    virtual void vAverage(void);
    virtual void vPropNotifyCB(Widget w, XtPointer clientData, 
			       XEvent* pEvent, Boolean *pBool);
    virtual void vDestroy(void);
    virtual void vPutMessage(const Cstring& sMessage, const int nFlag=0);
    virtual void vSetLabel(Widget w, char *pcLabel, char *pcColor=NULL);
    virtual void vMakeTitleStringFitWindow(Widget w, Cstring sTitleIn, Cstring* psTitleOut);

    // End user code block <protected>
  private: 
    
    //
    // Default application and class resources.
    //
    static String         _defaultMainWindowResources[];
    static UIAppDefault   _appDefaults[];
    static Boolean        _initAppDefaults;
    //
    // Callback client data.
    //
    UICallbackStruct  *_clientDataStructs;
    
    //
    // Callbacks to interface with Motif.
    //
    static void vProgressCancelCBCallback(Widget, XtPointer, XtPointer);
    static void vHTMLHelpCallback(Widget, XtPointer, XtPointer);
    static void vUnpostHelpCallback(Widget, XtPointer, XtPointer);
    static void vPostHelpCallback(Widget, XtPointer, XtPointer);
    static void vFileSelectionPostCBCallback(Widget, XtPointer, XtPointer);
    static void vLoadReflnCBCallback(Widget, XtPointer, XtPointer);
    static void vPostPrintCBCallback(Widget, XtPointer, XtPointer);
    static void vFileListenCBCallback(Widget, XtPointer, XtPointer);
    static void vExitCBCallback(Widget, XtPointer, XtPointer);
    static void vPopupImagePropsCBCallback(Widget, XtPointer, XtPointer);
    static void vPopupReflnPropsCBCallback(Widget, XtPointer, XtPointer);
    static void vClearOutputCallback(Widget, XtPointer, XtPointer);
    static void vDeleteReflnsCallback(Widget, XtPointer, XtPointer);
    static void vEraseToggleCBCallback(Widget, XtPointer, XtPointer);
    static void vZoomMsgPopupCallback(Widget, XtPointer, XtPointer);
    static void vViewRefreshCallback(Widget, XtPointer, XtPointer);
    static void vUnzoomCBCallback(Widget, XtPointer, XtPointer);
    static void vViewHeaderCBCallback(Widget, XtPointer, XtPointer);
    static void vPlotReflnListCBCallback(Widget, XtPointer, XtPointer);
    static void vDrawResoCBCallback(Widget, XtPointer, XtPointer);
    static void vPopDialogCallback(Widget, XtPointer, XtPointer);
    static void vUtilsCBCallback(Widget, XtPointer, XtPointer);
    static void vCursorModeCBCallback(Widget, XtPointer, XtPointer);
    static void vFileTemplateCBCallback(Widget, XtPointer, XtPointer);
    static void vTextFieldCBCallback(Widget, XtPointer, XtPointer);
    static void vDAInputCBCallback(Widget, XtPointer, XtPointer);
    
    // Begin user code block <private>

    // Callback client data.

    UICallbackStruct  *m_ptClientDataStructs;
    Cardinal    m_nCDC;

    static void vRubberbandCBCallback(XtPointer, const int nMode,
				      const float fPx0, const float fPx1,
				      const float fPx2, const float fPx3);

    virtual void vRubberbandCB(XtPointer, const int nMode,
			       const float fPx0, const float fPx1,
			       const float fPx2, const float fPx3);

    virtual void vErasePixels(const int nMode, 	
			      const float fPx0, const float fPx1,
			      const float fPx2, const float fPx3);

    static void vPostError(Widget, XtPointer, XtPointer);
    static void vPropNotifyCBCallback(Widget w, XtPointer clientData, 
				      XEvent* pEvent, Boolean *pBool);

    static  void vPrintCBCallback(XtPointer, const Cstring&, const Cstring&, 
				  const Boolean&);
    virtual void vPrintCB(XtPointer, const Cstring&, const Cstring&, 
			  const Boolean&);
    static  void vImageViewPropsCBCallback(XtPointer, const tagImageProps&);
    virtual void vImageViewPropsCB(XtPointer, const tagImageProps&);
    static  void vReflnViewPropsCBCallback(XtPointer, const tagReflnProps*);
    virtual void vReflnViewPropsCB(XtPointer, const tagReflnProps*);
    static  void vImageFileCBCallback(XtPointer, const Cstring&, 
				      const Cstring&, const int, const int, 
				      const int);
    virtual void vImageFileCB(XtPointer, const Cstring&, const Cstring&,
			     const int, const int, const int);
    static  void vReflnFileCBCallback(XtPointer, const Cstring&, const int);
    virtual void vReflnFileCB(XtPointer, const Cstring&, const int);
    static  void vProgressCBCallback(void *, int *pnImg);
    virtual void vProgressCB(void *, int *pnImg);

      Cstring     m_sFilename;
      Cstring     m_sHeaderFilename;
      Cstring     m_sReflnFilename;
      int         m_nReflnNum;
      int         m_nReflnFileMode;
      Cimage     *m_poImage;
      Cimage_header *m_poHeader;
      Cscan      *m_poScan;
      Crotation  *m_poRotation;
      Cdetector  *m_poDetector;
      Csource    *m_poSource;
      Creflnlist *m_poReflnlist;
      C3Ddata    *m_po3Ddata;
      CXcolormap *m_poColormap;
      CXdisplay  *m_poXdisplay;
      CXdisplay  *m_poXdisplay1;
      CXhelp     *m_poXhelp;
      CXcursor   *m_poXcursor;
      CXprop     *m_poXprop;
      Cstring     m_sTitle;

      char        m_a255cText[256];
      int         m_nDefaultImageSize;
      int         m_nEraseMode;
      int         m_nDeleteReflnMode;
      int         m_nProgressCancel;
      float       m_fCircleRadius;

      tagImagePropsDisplay m_tImageProps;
      tagImagePropsDisplay m_tImageProps1;
      tagImageProps        m_tImagePropsInit;

      tagReflnPropsDisplay m_tReflnProps;
      tagReflnProps        m_tReflnPropsInit;

      float       m_fS0[3];      // Source vector

      float       m_fWavelength; // Wavelength
      float       m_fDetDist;    // Crystal to detector distance
      float       m_fDetSwing;   // Detector swing angle
      
      Cstring     m_sNoHeader;  // This should be static member.
      float       m_fCurrPoint[2];
      float       m_fCurrPointX[3];
      float       m_fPrevPoint[3];
      float       m_fPrevPointX[3];

      double      m_dCurrPoint[2];
      double      m_dCurrPointX[3];
      double      m_dPrevPoint[3];
      double      m_dPrevPointX[3];

      int         m_nFI0;
      int         m_nFI1;
      int         m_nFI2;
      int         m_nFI3;
      int         m_nFI4;
      int         m_nFI5;

      Atom        m_hAtomWindowID;
      Atom        m_hAtomImageUpdate;
      Atom        m_hAtomReflnUpdate;
      Atom        m_hAtomBeamCenterUpdate; 

      Cstring     m_sImageUpdate;
      Cstring     m_sReflnUpdate;
      Widget      m_hFilePB;

      bool        m_bEventHandlerInstalled;

    // End user code block <private>
};

// Begin user code block <tail>
// End user code block <tail>
#endif
