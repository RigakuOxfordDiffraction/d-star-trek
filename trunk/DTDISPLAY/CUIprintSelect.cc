//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for CUIprintSelect
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// CUIprintSelect.cc    Initial author: N. Chen          15-July-1997
//    This file is the implementation file for user interface class 
//    CUIprintSelect.
// Description:
//
//  This file contains the printSelect class that implements the
//  File Print... option of dtdisplay.
//
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/ 

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/FileSB.h>
#include <Xm/Form.h>
#include <Xm/ScrolledW.h>
#include <Xm/Text.h>
#include <Xm/Separator.h>
#include <Xm/Label.h>
#include <Xm/TextF.h>
#include <Xm/RowColumn.h>
#include <Xm/ToggleB.h>
#include "CUIprintSelect.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>
// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean CUIprintSelect::_initAppDefaults = True;
UIAppDefault  CUIprintSelect::_appDefaults[] = {
    {"", NULL, "dialogTitle", NULL},
    {"", NULL, "selectionLabelString", NULL},
    {"", NULL, "okLabelString", NULL},
    {"", NULL, "helpLabelString", NULL},
    {"", NULL, "cancelLabelString", NULL},
    {"", NULL, "applyLabelString", NULL},
    {"", NULL, "fileListLabelString", NULL},
    {"", NULL, "dirListLabelString", NULL},
    {"", NULL, "pattern", NULL},
    {"lbComment", NULL, "labelString", NULL},
    {"lbSelectFilename", NULL, "labelString", NULL},
    {"lbPrintCommand", NULL, "labelString", NULL},
    {"tfPrintCommand", NULL, "value", NULL},
    {"tbPrinter", NULL, "labelString", NULL},
    {"tbFile", NULL, "labelString", NULL},
    {"lbPrintTo", NULL, "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  CUIprintSelect::_defaultCUIprintSelectResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
CUIprintSelect::CUIprintSelect(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
CUIprintSelect::CUIprintSelect(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>
    // No default html file
    m_sHelpLine = (Cstring)name + (Cstring) "$$";

    // Make sure the filecallback is initialized to NULL
    m_prvFileCallback = NULL;

    //  and there is no object to pass in callback
    m_pObj = NULL;

    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
CUIprintSelect::~CUIprintSelect() 
{
    
    // Begin user code block <destructor>
    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void CUIprintSelect::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[4];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultCUIprintSelectResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "CUIprintSelect", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmFileSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScrolledWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmSeparatorWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextFieldWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmToggleButtonWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    XtSetArg(args[ac], XmNfilterLabelString, 
        BX_CONVERT(parent, "Postscript Filter", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNchildPlacement, XmPLACE_TOP); ac++;
    XtSetArg(args[ac], XmNx, 354); ac++;
    XtSetArg(args[ac], XmNy, 274); ac++;
    XtSetArg(args[ac], XmNwidth, 918); ac++;
    XtSetArg(args[ac], XmNheight, 742); ac++;
    _CUIprintSelect = XmCreateFileSelectionBox(parent,
        _name,
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIprintSelect,
        XmNokCallback,
        CUIprintSelect::vPrintSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIprintSelect,
        XmNcancelCallback,
        CUIprintSelect::vPrintSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    _w = _CUIprintSelect;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 11); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 300); ac++;
    _form = XmCreateForm(_CUIprintSelect,
        "form",
        args, 
        ac);
    XtManageChild(_form);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 150); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 85); ac++;
    _swComment = XmCreateScrolledWindow(_form,
        "swComment",
        args, 
        ac);
    XtManageChild(_swComment);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    _tfComment = XmCreateText(_swComment,
        "tfComment",
        args, 
        ac);
    XtManageChild(_tfComment);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 245); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 15); ac++;
    _spPrint2 = XmCreateSeparator(_form,
        "spPrint2",
        args, 
        ac);
    XtManageChild(_spPrint2);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 110); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbComment = XmCreateLabel(_form,
        "lbComment",
        args, 
        ac);
    XtManageChild(_lbComment);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 260); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbSelectFilename = XmCreateLabel(_form,
        "lbSelectFilename",
        args, 
        ac);
    XtManageChild(_lbSelectFilename);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 96); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 15); ac++;
    _spPrint1 = XmCreateSeparator(_form,
        "spPrint1",
        args, 
        ac);
    XtManageChild(_spPrint1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbPrintCommand = XmCreateLabel(_form,
        "lbPrintCommand",
        args, 
        ac);
    XtManageChild(_lbPrintCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 55); ac++;
    XtSetArg(args[ac], XmNwidth, 736); ac++;
    XtSetArg(args[ac], XmNheight, 41); ac++;
    _tfPrintCommand = XmCreateTextField(_form,
        "tfPrintCommand",
        args, 
        ac);
    XtManageChild(_tfPrintCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 896); ac++;
    XtSetArg(args[ac], XmNheight, 15); ac++;
    _spPrint = XmCreateSeparator(_form,
        "spPrint",
        args, 
        ac);
    XtManageChild(_spPrint);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizeWidth, False); ac++;
    XtSetArg(args[ac], XmNresizeHeight, False); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 736); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    XtSetArg(args[ac], XmNisHomogeneous, False); ac++;
    _rbPrint = XmCreateRadioBox(_form,
        "rbPrint",
        args, 
        ac);
    XtManageChild(_rbPrint);
    
    ac = 0;
    XtSetArg(args[ac], XmNset, True); ac++;
    XtSetArg(args[ac], XmNwidth, 113); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _tbPrinter = XmCreateToggleButton(_rbPrint,
        "tbPrinter",
        args, 
        ac);
    XtManageChild(_tbPrinter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPrinter,
        XmNvalueChangedCallback,
        CUIprintSelect::vPrintValueChangedCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 113); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _tbFile = XmCreateToggleButton(_rbPrint,
        "tbFile",
        args, 
        ac);
    XtManageChild(_tbFile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFile,
        XmNvalueChangedCallback,
        CUIprintSelect::vPrintValueChangedCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbPrintTo = XmCreateLabel(_form,
        "lbPrintTo",
        args, 
        ac);
    XtManageChild(_lbPrintTo);
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbComment); ac++;
    XtSetValues(_swComment, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopWidget, _swComment); ac++;
    XtSetValues(_spPrint2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _spPrint1); ac++;
    XtSetValues(_lbComment, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _spPrint2); ac++;
    XtSetValues(_lbSelectFilename, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfPrintCommand); ac++;
    XtSetValues(_spPrint1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 60); ac++;
    XtSetValues(_lbPrintCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPrintCommand); ac++;
    XtSetArg(args[ac], XmNtopWidget, _spPrint); ac++;
    XtSetValues(_tfPrintCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _rbPrint); ac++;
    XtSetValues(_spPrint, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPrintTo); ac++;
    XtSetValues(_rbPrint, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbPrintTo, args, ac);
    
    
    // Begin user code block <endcreate>

    // Add the help callback
    m_poXhelp = new CXhelp(_w);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer) (m_sHelpLine.string());
    XtAddCallback(_CUIprintSelect,
		  XmNhelpCallback,
		  CXhelp::vHTMLHelpCallback,
		  (XtPointer)_clientDataStructs);

    vActivateGroup(0);

    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const CUIprintSelect::className()
{
    return ("CUIprintSelect");
}

void CUIprintSelect::vPrintSelectCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIprintSelect *obj = (CUIprintSelect *)data->object;
    obj->vPrintSelectCB(w, (XtPointer) data->client_data, callData);
}

void CUIprintSelect::vPrintSelectCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPrintSelectCB>

  XmFileSelectionBoxCallbackStruct *pCBS
    = (XmFileSelectionBoxCallbackStruct *) callData;

  if (XmCR_CANCEL == pCBS->reason)
    {
      XtUnmanageChild(w);
    }
  else if (XmCR_OK == pCBS->reason)
    {
      XtUnmanageChild(w);
      // Ok
      char    *pcTemp;
      XmString sxPrintCmd;
      
      if (XmStringGetLtoR(pCBS->value,
#if (XmVersion >= 1002)
			   XmFONTLIST_DEFAULT_TAG,
#else
			   XmSTRING_DEFAULT_CHARSET,
#endif
			   &pcTemp))
	{
	  m_sPSFilename = pcTemp;
	}
      XtFree(pcTemp);

      pcTemp = XmTextGetString(_tfComment);
      m_sComment = (Cstring) pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextGetString(_tfPrintCommand);
//      cout << "Print Command: " << pcTemp << endl;
      m_sPrintCommand = (Cstring) pcTemp;
      XtFree(pcTemp);

      // If a callback has been specified, then call it

      Boolean bPrintToFile =  XmToggleButtonGetState(_tbFile);
      Cstring sTemp;

      // Use the specified filename or a temporary filename depending
      // on whether print to file or print to printer

      if (!bPrintToFile)
	{
	  sTemp = sFileGetTempName(".", "psf");
	  if ("" == sTemp)
	    sTemp = "./TMP.psf";
	}
      else
	{
	  sTemp = m_sPSFilename;
	}
      if (NULL != m_prvFileCallback)
	{
//	  cout << "PS Filename: " << sTemp << endl;
	  m_prvFileCallback(m_pObj, sTemp, m_sComment, bPrintToFile);
	  if (!bPrintToFile)
	    {
	      // Send command to printer

	      if (bFileExists(m_sPSFilename))
		{
		  nDoSystemCommand(sGetPrintCommand() + ' ' + sTemp);
		  nFileDelete(sTemp);
		}
	    }
	}
    }
  else if (XmCR_APPLY == pCBS->reason)
    {
      // Filter
    }
  else if (XmCR_HELP == pCBS->reason)
    {
      // How to pass in help for this widget?
      // No need, it was done above!
    }
    // End user code block <vPrintSelectCB>
}

void CUIprintSelect::vPrintValueChangedCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIprintSelect *obj = (CUIprintSelect *)data->object;
    obj->vPrintValueChangedCB(w, (XtPointer) data->client_data, callData);
}

void CUIprintSelect::vPrintValueChangedCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPrintValueChangedCB>
  if (XmToggleButtonGetState(_tbPrinter))
    {
      vActivateGroup(0);
    }
  else if (XmToggleButtonGetState(_tbFile))
    {
      vActivateGroup(1);
    }
    // End user code block <vPrintValueChangedCB>
}

// Begin user code block <tail>

void
CUIprintSelect::vSetFilename(const Cstring& sFilename)
{
  m_sPSFilename = sFilename;
  XmString stxTemp;

  stxTemp = XmStringCreateLtoR(m_sPSFilename.string(),
#if (XmVersion >= 1002)
			       XmFONTLIST_DEFAULT_TAG);
#else
			       XmSTRING_DEFAULT_CHARSET);
#endif
  if (NULL != stxTemp)
    {
      XtVaSetValues(_CUIprintSelect, XmNtextString, stxTemp, NULL);
      XmStringFree(stxTemp);
    }
}

void
CUIprintSelect::vSetComment(const Cstring& sComment)
{
  m_sComment = sComment;
  XmTextSetString(_tfComment, sComment.string());
}

void
CUIprintSelect::vSetPrintCommand(const Cstring& sPrintCommand)
{
  m_sPrintCommand = sPrintCommand;
}

Cstring 
CUIprintSelect::sGetComment(void)
{
  return (m_sComment);
}

Cstring 
CUIprintSelect::sGetFilename(void)
{
  return (m_sPSFilename);
}

Cstring
CUIprintSelect::sGetPrintCommand(void)
{
  return (m_sPrintCommand);
}

void
CUIprintSelect::vActivateGroup(const int nGroup)
{
  if (nGroup == 0)       // 0 for Printer Group
    {
      XmString sxTemp;

      sxTemp = XmStringCreate("d*TREK - File: Print to printer",
#if (XmVersion >= 1002)
			      XmFONTLIST_DEFAULT_TAG);
#else
      XmSTRING_DEFAULT_CHARSET);
#endif

      XtVaSetValues(_CUIprintSelect, XmNdialogTitle, sxTemp, NULL);
      XmStringFree(sxTemp);

      sxTemp = XmStringCreate("Print to printer",
#if (XmVersion >= 1002)
			      XmFONTLIST_DEFAULT_TAG);
#else
      XmSTRING_DEFAULT_CHARSET);
#endif

      XtVaSetValues(_CUIprintSelect, XmNokLabelString, sxTemp, NULL);
      XmStringFree(sxTemp);

      XtVaSetValues(_lbPrintCommand, XmNsensitive, True, NULL);
      XtVaSetValues(_tfPrintCommand, XmNsensitive, True, NULL);

      XtVaSetValues(_lbSelectFilename, XmNsensitive, False, NULL);

      Widget wTemp;
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_APPLY_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_DIR_LIST);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_DIR_LIST_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_FILTER_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_FILTER_TEXT);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_LIST);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_LIST_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_SELECTION);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_SELECTION_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_TEXT);
      XtVaSetValues(wTemp, XmNsensitive, False, NULL);

      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_CANCEL_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_OK_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_HELP_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
    }
  else if (nGroup == 1)
    {
      XmString sxTemp;

      sxTemp = XmStringCreate("d*TREK - File: Print to file",
#if (XmVersion >= 1002)
	                      XmFONTLIST_DEFAULT_TAG);
#else
  XmSTRING_DEFAULT_CHARSET);
#endif

      XtVaSetValues(_CUIprintSelect, XmNdialogTitle, sxTemp, NULL);
      XmStringFree(sxTemp);

      sxTemp = XmStringCreate("Print to file",
#if (XmVersion >= 1002)
				XmFONTLIST_DEFAULT_TAG);
#else
  XmSTRING_DEFAULT_CHARSET);
#endif

      XtVaSetValues(_CUIprintSelect, XmNokLabelString, sxTemp, NULL);
      XmStringFree(sxTemp);

      XtVaSetValues(_lbPrintCommand, XmNsensitive, False, NULL);
      XtVaSetValues(_tfPrintCommand, XmNsensitive, False, NULL);

      XtVaSetValues(_lbSelectFilename, XmNsensitive, True, NULL);

      Widget wTemp;
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_APPLY_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_DIR_LIST);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_DIR_LIST_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_FILTER_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_FILTER_TEXT);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_LIST);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_LIST_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_SELECTION);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_SELECTION_LABEL);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_TEXT);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);


      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_CANCEL_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_OK_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
      wTemp = XmFileSelectionBoxGetChild(_CUIprintSelect, XmDIALOG_HELP_BUTTON);
      XtVaSetValues(wTemp, XmNsensitive, True, NULL);
    }
}   
  
// End user code block <tail>
