//
// Copyright (c) 1996, 1995 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// CUIimageviewprops.cc   Initial author: J.W. Pflugrath           ??-???-199?
//   This implements the edit image view props dialog
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for CUIimageviewprops
//
//    This file generated by Builder Xcessory 3.5.1.
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////
#include <X11/StringDefs.h>
#include <Xm/SelectioB.h>
#include <Xm/Form.h>
#include <Xm/Label.h>
#include <Xm/Frame.h>
#include <Xm/TextF.h>
#include <Xm/ArrowB.h>
#include "CUIimageviewprops.h"
#include "CUIom2.h"
#include "CUIom8.h"
#include "CUIom9.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer DOUBLE(double);
extern XtPointer SINGLE(float);
extern void MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char**);
extern void SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal*, Pixel);


// Begin user code block <head> 
// End user code block <head> 

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean CUIimageviewprops::_initAppDefaults = True;
UIAppDefault  CUIimageviewprops::_appDefaults[] = {
    {"", NULL, "dialogTitle", NULL},
    {"", NULL, "selectionLabelString", NULL},
    {"lbExpTimeO", NULL, "labelString", NULL},
    {"lbRotEndO", NULL, "labelString", NULL},
    {"lbRotStartO", NULL, "labelString", NULL},
    {"lbImgSizeO", NULL, "labelString", NULL},
    {"lbExpTime", NULL, "labelString", NULL},
    {"lbRotEnd", NULL, "labelString", NULL},
    {"lbRotStart", NULL, "labelString", NULL},
    {"tfReserve", NULL, "value", NULL},
    {"tfAspect", NULL, "value", NULL},
    {"omRescale", "pb1", "labelString", NULL},
    {"omRescale", "pb0", "labelString", NULL},
    {"omUseAspect", "pb1", "labelString", NULL},
    {"omUseAspect", "pb0", "labelString", NULL},
    {"omOrient", "pb7", "labelString", NULL},
    {"omOrient", "pb6", "labelString", NULL},
    {"omOrient", "pb5", "labelString", NULL},
    {"omOrient", "pb4", "labelString", NULL},
    {"omOrient", "pb3", "labelString", NULL},
    {"omOrient", "pb2", "labelString", NULL},
    {"omOrient", "pb1", "labelString", NULL},
    {"omOrient", "pb0", "labelString", NULL},
    {"lbReserve", NULL, "labelString", NULL},
    {"lbRescale", NULL, "labelString", NULL},
    {"lbAspect", NULL, "labelString", NULL},
    {"lbUseAspect", NULL, "labelString", NULL},
    {"lbOrient", NULL, "labelString", NULL},
    {"tfBorder", NULL, "value", NULL},
    {"lbBorder", NULL, "labelString", NULL},
    {"tfSatValue", NULL, "value", NULL},
    {"lbSatColor", NULL, "labelString", NULL},
    {"lbSatValue", NULL, "labelString", NULL},
    {"tfBoxSize", NULL, "value", NULL},
    {"lbBoxSize", NULL, "labelString", NULL},
    {"lbBlackPix", NULL, "labelString", NULL},
    {"lbWhitePix", NULL, "labelString", NULL},
    {"tfBlackPix", NULL, "value", NULL},
    {"tfWhitePix", NULL, "value", NULL},
    {"lbMinMaxO", NULL, "labelString", NULL},
    {"lbAvgSDO", NULL, "labelString", NULL},
    {"lbMinMax", NULL, "labelString", NULL},
    {"lbAvgSD", NULL, "labelString", NULL},
    {"lbImgSize", NULL, "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  CUIimageviewprops::_defaultCUIimageviewpropsResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
CUIimageviewprops::CUIimageviewprops(const char *name, Widget parent) : 
    UIComponent(name)
{
    
    // Begin user code block <alt_constructor> 
    // End user code block <alt_constructor> 
    create(parent);
}

//
// Class constructor.
//
CUIimageviewprops::CUIimageviewprops(const char *name) : UIComponent(name)
{
    
    // Begin user code block <constructor> 

  m_prvOKCallback = NULL;
  m_pObj          = NULL;

  m_tImageProps.fRotStart        = 0.0;
  m_tImageProps.fRotEnd          = 0.0;
  m_tImageProps.fExpTime         = 0.0;
  m_tImageProps.fBorder          = 0.9;
  m_tImageProps.fScaleMin        = 0.0;
  m_tImageProps.fScaleMax        = 1.0;
  m_tImageProps.fImageMin        = 0.0;
  m_tImageProps.fImageMax        = 1.0;
  m_tImageProps.fAvg             = 1.0;
  m_tImageProps.fSD              = 1.0;
  m_tImageProps.fAspectRatio     = 1.0;
  m_tImageProps.nDim[0]          = 1;
  m_tImageProps.nDim[1]          = 1;
  m_tImageProps.nOrig[0]         = 0;
  m_tImageProps.nOrig[1]         = 0;
  m_tImageProps.nIntegrateBox[0] = 1;
  m_tImageProps.nIntegrateBox[1] = 1;
  m_tImageProps.nAutoRescale     = 0;
  m_tImageProps.nOrient          = 0;
  m_tImageProps.nAspectMode      = 0;
  m_tImageProps.nDisplayReflns   = 0;
  m_tImageProps.nDisplayPixValues= 0;
  m_tImageProps.fSatPixValue     = 1.0;
  m_tImageProps.fTooLowPixValue  = -2.0;
  m_tImageProps.sSatPixColor     = "RED";
  m_tImageProps.sTooLowPixColor  = "YELLOW";

    // End user code block <constructor> 
}

//
// Minimal Destructor. Base class destroys widgets.
//
CUIimageviewprops::~CUIimageviewprops() 
{
    
    // Begin user code block <destructor> 
  if (NULL != m_poXhelp)
    {
      delete m_poXhelp;
      m_poXhelp = NULL;
    }
    // End user code block <destructor> 
    delete _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void CUIimageviewprops::create(Widget parent) 
{
    Arg      args[256];
    Cardinal ac=0;
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultCUIimageviewpropsResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "CUIimageviewprops", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent)); 
    XtInitializeWidgetClass(xmSelectionBoxWidgetClass);
    XtInitializeWidgetClass(xmFormWidgetClass);
    XtInitializeWidgetClass(xmLabelWidgetClass);
    XtInitializeWidgetClass(xmFrameWidgetClass);
    XtInitializeWidgetClass(xmTextFieldWidgetClass);
    XtInitializeWidgetClass(xmArrowButtonWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNautoUnmanage, False); ac++;
    XtSetArg(args[ac], XmNdialogType, XmDIALOG_PROMPT); ac++;
    XtSetArg(args[ac], XmNx, 512); ac++;
    XtSetArg(args[ac], XmNy, 341); ac++;
    XtSetArg(args[ac], XmNwidth, 759); ac++;
    XtSetArg(args[ac], XmNheight, 579); ac++;
    _CUIimageviewprops = XmCreateSelectionBox(parent,
        _name,
        args, 
        ac);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_CUIimageviewprops,
        XmNokCallback,
        CUIimageviewprops::vOKApplyCancelCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_CUIimageviewprops,
        XmNapplyCallback,
        CUIimageviewprops::vOKApplyCancelCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_CUIimageviewprops,
        XmNcancelCallback,
        CUIimageviewprops::vOKApplyCancelCBCallback,
        (XtPointer)_clientDataStructs);
    
    _w = _CUIimageviewprops;
    //
    // Install callback to guard against unexpected widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 11); ac++;
    XtSetArg(args[ac], XmNwidth, 737); ac++;
    XtSetArg(args[ac], XmNheight, 420); ac++;
    _form = XmCreateForm(_CUIimageviewprops,
        "form",
        args, 
        ac);
    XtManageChild(_form);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 570); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbExpTimeO = XmCreateLabel(_form,
        "lbExpTimeO",
        args, 
        ac);
    XtManageChild(_lbExpTimeO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 570); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbRotEndO = XmCreateLabel(_form,
        "lbRotEndO",
        args, 
        ac);
    XtManageChild(_lbRotEndO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 570); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbRotStartO = XmCreateLabel(_form,
        "lbRotStartO",
        args, 
        ac);
    XtManageChild(_lbRotStartO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 180); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbImgSizeO = XmCreateLabel(_form,
        "lbImgSizeO",
        args, 
        ac);
    XtManageChild(_lbImgSizeO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 400); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbExpTime = XmCreateLabel(_form,
        "lbExpTime",
        args, 
        ac);
    XtManageChild(_lbExpTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 400); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbRotEnd = XmCreateLabel(_form,
        "lbRotEnd",
        args, 
        ac);
    XtManageChild(_lbRotEnd);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 400); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbRotStart = XmCreateLabel(_form,
        "lbRotStart",
        args, 
        ac);
    XtManageChild(_lbRotStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 370); ac++;
    XtSetArg(args[ac], XmNy, 130); ac++;
    XtSetArg(args[ac], XmNwidth, 366); ac++;
    XtSetArg(args[ac], XmNheight, 290); ac++;
    _frame2 = XmCreateFrame(_form,
        "frame2",
        args, 
        ac);
    XtManageChild(_frame2);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 360); ac++;
    XtSetArg(args[ac], XmNheight, 284); ac++;
    _form2 = XmCreateForm(_frame2,
        "form2",
        args, 
        ac);
    XtManageChild(_form2);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 168); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfReserve = XmCreateTextField(_form2,
        "tfReserve",
        args, 
        ac);
    XtManageChild(_tfReserve);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfReserve,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfReserve,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 84); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfAspect = XmCreateTextField(_form2,
        "tfAspect",
        args, 
        ac);
    XtManageChild(_tfAspect);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfAspect,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfAspect,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    #if defined(cxx_bx_compat)
    setAppDefaults(_form2, _appDefaults, "omRescale", True);
    #endif
    _omRescale = new CUIom2("omRescale");
    _omRescale->create(_form2);
    _omRescale->manage();
    ac = 0;
    XtSetArg(args[ac], XmNx, 210); ac++;
    XtSetArg(args[ac], XmNy, 126); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_omRescale->baseWidget(), args, ac);
    
    #if defined(cxx_bx_compat)
    setAppDefaults(_form2, _appDefaults, "omUseAspect", True);
    #endif
    _omUseAspect = new CUIom2("omUseAspect");
    _omUseAspect->create(_form2);
    _omUseAspect->manage();
    ac = 0;
    XtSetArg(args[ac], XmNx, 210); ac++;
    XtSetArg(args[ac], XmNy, 42); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_omUseAspect->baseWidget(), args, ac);
    
    #if defined(cxx_bx_compat)
    setAppDefaults(_form2, _appDefaults, "omOrient", True);
    #endif
    _omOrient = new CUIom8("omOrient");
    _omOrient->create(_form2);
    _omOrient->manage();
    ac = 0;
    XtSetArg(args[ac], XmNx, 210); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_omOrient->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 168); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbReserve = XmCreateLabel(_form2,
        "lbReserve",
        args, 
        ac);
    XtManageChild(_lbReserve);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 126); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbRescale = XmCreateLabel(_form2,
        "lbRescale",
        args, 
        ac);
    XtManageChild(_lbRescale);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 84); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbAspect = XmCreateLabel(_form2,
        "lbAspect",
        args, 
        ac);
    XtManageChild(_lbAspect);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 42); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbUseAspect = XmCreateLabel(_form2,
        "lbUseAspect",
        args, 
        ac);
    XtManageChild(_lbUseAspect);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbOrient = XmCreateLabel(_form2,
        "lbOrient",
        args, 
        ac);
    XtManageChild(_lbOrient);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 130); ac++;
    XtSetArg(args[ac], XmNwidth, 370); ac++;
    XtSetArg(args[ac], XmNheight, 290); ac++;
    _frame1 = XmCreateFrame(_form,
        "frame1",
        args, 
        ac);
    XtManageChild(_frame1);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNnoResize, True); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 364); ac++;
    XtSetArg(args[ac], XmNheight, 284); ac++;
    _form1 = XmCreateForm(_frame1,
        "form1",
        args, 
        ac);
    XtManageChild(_form1);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 230); ac++;
    XtSetArg(args[ac], XmNy, 210); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfBorder = XmCreateTextField(_form1,
        "tfBorder",
        args, 
        ac);
    XtManageChild(_tfBorder);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBorder,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBorder,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 210); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbBorder = XmCreateLabel(_form1,
        "lbBorder",
        args, 
        ac);
    XtManageChild(_lbBorder);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 230); ac++;
    XtSetArg(args[ac], XmNy, 42); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfSatValue = XmCreateTextField(_form1,
        "tfSatValue",
        args, 
        ac);
    XtManageChild(_tfSatValue);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfSatValue,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfSatValue,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    #if defined(cxx_bx_compat)
    setAppDefaults(_form1, _appDefaults, "omColor", True);
    #endif
    _omColor = new CUIom9("omColor");
    _omColor->create(_form1);
    _omColor->manage();
    ac = 0;
    XtSetArg(args[ac], XmNx, 215); ac++;
    XtSetArg(args[ac], XmNy, 84); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_omColor->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 84); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbSatColor = XmCreateLabel(_form1,
        "lbSatColor",
        args, 
        ac);
    XtManageChild(_lbSatColor);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 42); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbSatValue = XmCreateLabel(_form1,
        "lbSatValue",
        args, 
        ac);
    XtManageChild(_lbSatValue);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 230); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfBoxSize = XmCreateTextField(_form1,
        "tfBoxSize",
        args, 
        ac);
    XtManageChild(_tfBoxSize);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBoxSize,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBoxSize,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbBoxSize = XmCreateLabel(_form1,
        "lbBoxSize",
        args, 
        ac);
    XtManageChild(_lbBoxSize);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 168); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbBlackPix = XmCreateLabel(_form1,
        "lbBlackPix",
        args, 
        ac);
    XtManageChild(_lbBlackPix);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 126); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _lbWhitePix = XmCreateLabel(_form1,
        "lbWhitePix",
        args, 
        ac);
    XtManageChild(_lbWhitePix);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 230); ac++;
    XtSetArg(args[ac], XmNy, 168); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfBlackPix = XmCreateTextField(_form1,
        "tfBlackPix",
        args, 
        ac);
    XtManageChild(_tfBlackPix);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBlackPix,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfBlackPix,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 230); ac++;
    XtSetArg(args[ac], XmNy, 126); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _tfWhitePix = XmCreateTextField(_form1,
        "tfWhitePix",
        args, 
        ac);
    XtManageChild(_tfWhitePix);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfWhitePix,
        XmNactivateCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_tfWhitePix,
        XmNlosingFocusCallback,
        CUIimageviewprops::vTextFieldCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_RIGHT); ac++;
    XtSetArg(args[ac], XmNx, 337); ac++;
    XtSetArg(args[ac], XmNy, 254); ac++;
    XtSetArg(args[ac], XmNwidth, 25); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _arrowButton = XmCreateArrowButton(_form1,
        "arrowButton",
        args, 
        ac);
    XtManageChild(_arrowButton);
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_arrowButton,
        XmNactivateCallback,
        CUIimageviewprops::vArrowCBCallback,
        (XtPointer)_clientDataStructs);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 180); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbMinMaxO = XmCreateLabel(_form,
        "lbMinMaxO",
        args, 
        ac);
    XtManageChild(_lbMinMaxO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 180); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
//    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbAvgSDO = XmCreateLabel(_form,
        "lbAvgSDO",
        args, 
        ac);
    XtManageChild(_lbAvgSDO);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbMinMax = XmCreateLabel(_form,
        "lbMinMax",
        args, 
        ac);
    XtManageChild(_lbMinMax);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbAvgSD = XmCreateLabel(_form,
        "lbAvgSD",
        args, 
        ac);
    XtManageChild(_lbAvgSD);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _lbImgSize = XmCreateLabel(_form,
        "lbImgSize",
        args, 
        ac);
    XtManageChild(_lbImgSize);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetArg(args[ac], XmNleftOffset, 570); ac++;
    XtSetValues(_lbExpTimeO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 570); ac++;
    XtSetValues(_lbRotEndO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 570); ac++;
    XtSetValues(_lbRotStartO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbImgSize); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbImgSizeO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetArg(args[ac], XmNleftOffset, 400); ac++;
    XtSetValues(_lbExpTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 400); ac++;
    XtSetValues(_lbRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 400); ac++;
    XtSetValues(_lbRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frame1); ac++;
    XtSetArg(args[ac], XmNtopOffset, 130); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 1); ac++;
    XtSetValues(_frame2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 168); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetValues(_tfReserve, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 84); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetValues(_tfAspect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 126); ac++;
    XtSetArg(args[ac], XmNleftOffset, 210); ac++;
    XtSetValues(_omRescale->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 42); ac++;
    XtSetArg(args[ac], XmNleftOffset, 210); ac++;
    XtSetValues(_omUseAspect->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 210); ac++;
    XtSetValues(_omOrient->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 168); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbReserve, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 126); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbRescale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 84); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbAspect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 42); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbUseAspect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbOrient, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 130); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetValues(_frame1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 210); ac++;
    XtSetArg(args[ac], XmNleftOffset, 230); ac++;
    XtSetValues(_tfBorder, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 210); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbBorder, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 42); ac++;
    XtSetArg(args[ac], XmNleftOffset, 230); ac++;
    XtSetValues(_tfSatValue, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 84); ac++;
    XtSetArg(args[ac], XmNleftOffset, 215); ac++;
    XtSetValues(_omColor->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 84); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbSatColor, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 42); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbSatValue, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 230); ac++;
    XtSetValues(_tfBoxSize, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbBoxSize, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 168); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbBlackPix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 126); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbWhitePix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 168); ac++;
    XtSetArg(args[ac], XmNleftOffset, 230); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_tfBlackPix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNtopOffset, 126); ac++;
    XtSetArg(args[ac], XmNleftOffset, 230); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_tfWhitePix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetValues(_arrowButton, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbMinMax); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbMinMaxO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbAvgSD); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbAvgSDO, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbMinMax, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbAvgSD, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_lbImgSize, args, ac);
    
    // Begin user code block <endcreate> 

    //+1-Sep-1999 fix some problems with BX 5.0:

    XtUnmanageChild(_omRescale->baseWidget());
    XtUnmanageChild(_lbRescale);

    //-1-Sep-1999 fix some problems with BX 5.0

    // Fix up _selectionBox display by unmanaging and managing some things

    XtUnmanageChild(XmSelectionBoxGetChild(_CUIimageviewprops,
					   XmDIALOG_SELECTION_LABEL));
    XtUnmanageChild(XmSelectionBoxGetChild(_CUIimageviewprops,
					   XmDIALOG_TEXT));
    XtManageChild(XmSelectionBoxGetChild(_CUIimageviewprops,
					 XmDIALOG_APPLY_BUTTON));

    XtVaSetValues(_CUIimageviewprops, XmNdefaultButton,
		  XmSelectionBoxGetChild(_CUIimageviewprops,
					 XmDIALOG_APPLY_BUTTON),
		  NULL);

    // Create the help object and add the help callback

    m_poXhelp     = new CXhelp (_w);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer) "ImageViewProps$$";
    XtAddCallback(_CUIimageviewprops,
        XmNhelpCallback,
        CXhelp::vHTMLHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Narrow or widen the scan dialog window";
    XtAddCallback(_arrowButton,
		  XmNarmCallback,
		  CXhelp::vPostOneLineCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(_arrowButton,
		  XmNdisarmCallback,
		  CXhelp::vUnpostOneLineCBCallback,
		  (XtPointer)_clientDataStructs);

#if (XmVersion >= 1002)
    // Add help callback for textFields
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Min value for black pixels";
    XtAddCallback(_tfBlackPix,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfBlackPix,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Max value for white pixels";
    XtAddCallback(_tfWhitePix,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfWhitePix,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Use this fraction of drawing area for image";
    XtAddCallback(_tfBorder,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfBorder,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Pixel size aspect ratio";
    XtAddCallback(_tfAspect,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfAspect,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Reserved for future use";
    XtAddCallback(_tfReserve,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfReserve,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Integration box size in pixels";
    XtAddCallback(_tfBoxSize,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfBoxSize,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = (UIComponent *)m_poXhelp;
    _clientDataStructs->client_data = (XtPointer)"Minimum saturated pixel value";
    XtAddCallback(_tfSatValue,
        XmNfocusCallback,
        CXhelp::vPostOneLineCBCallback,
        (XtPointer)_clientDataStructs);
    XtAddCallback(_tfSatValue,
        XmNlosingFocusCallback,
        CXhelp::vUnpostOneLineCBCallback,
        (XtPointer)_clientDataStructs);

#endif

    // Make the reserved widgets insensitive

    XtVaSetValues(_tfReserve, XmNsensitive, False, NULL);
    XtVaSetValues(_lbReserve, XmNsensitive, False, NULL);

    // Unmanage a couple of widgets 
    XtUnmanageChild(XtNameToWidget(_CUIimageviewprops, "*Selection"));
//    XtUnmanageChild(XtNameToWidget(_CUIimageviewprops, "*Text"));

    vReadWidgets();  // Get what is there to start with
    // End user code block <endcreate> 
}

//
// Classname access.
//
const char *const CUIimageviewprops::className()
{
    return ("CUIimageviewprops");
}

void CUIimageviewprops::vOKApplyCancelCBCallback(Widget w, 
		XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIimageviewprops *obj = (CUIimageviewprops *)data->object;
    obj->vOKApplyCancelCB(w, data->client_data, callData);
}

void CUIimageviewprops::vOKApplyCancelCB (Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vOKApplyCancelCB> 
  XmSelectionBoxCallbackStruct *pCBS = (XmSelectionBoxCallbackStruct *)callData;

  if (XmIsTextField(w))
    {
      if (XmCR_ACTIVATE == pCBS->reason)
	XmProcessTraversal(w, XmTRAVERSE_NEXT);
    }
  else if (XmIsSelectionBox(w))
    {
      if ( (XmCR_OK == pCBS->reason) || (XmCR_APPLY == pCBS->reason) )
	{
	  vReadWidgets();
	  if (NULL != m_prvOKCallback)
	    {
	      m_prvOKCallback(m_pObj, m_tImageProps);
	    }
	  if (XmCR_OK == pCBS->reason)
	    XtUnmanageChild(w);
	}
      if (XmCR_CANCEL == pCBS->reason)
	XtUnmanageChild(w);
    }
  
    // End user code block <vOKApplyCancelCB> 
}

void CUIimageviewprops::vTextFieldCBCallback(Widget w, 
		XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIimageviewprops *obj = (CUIimageviewprops *)data->object;
    obj->vTextFieldCB(w, data->client_data, callData);
}

void CUIimageviewprops::vTextFieldCB (Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vTextFieldCB> 

  // Read textField input and reformat back into the textFields

  char *pcText;
  pcText = XmTextFieldGetString(w);
  char a20cTemp[20];
  float fTemp, fTemp1;

  if ( (w == _tfWhitePix) || (w == _tfBlackPix) )
    {
      sscanf(pcText, "%f", &fTemp);
      sprintf(a20cTemp, "%.0f", fTemp);
    }
  else if (w == _tfAspect)
    {
      sscanf(pcText, "%f", &fTemp);
      sprintf(a20cTemp, "%.2f", fTemp);
    }
  else if (w == _tfBoxSize)
    {
      sscanf(pcText, "%f,%f", &fTemp, &fTemp1);
      sprintf(a20cTemp, "%.0f, %.0f", fTemp, fTemp1);
    }
  else if (w == _tfSatValue)
    {
      sscanf(pcText, "%f", &fTemp);
      sprintf(a20cTemp, "%.0f", fTemp);
    }
  else if (w == _tfBorder)
    {
      sscanf(pcText, "%f", &fTemp);
      sprintf(a20cTemp, "%.2f", fTemp);
    }
  else if (w == _tfReserve)
    {
    }
  XmTextFieldSetString(w, a20cTemp);
  XtFree(pcText);
  
    // End user code block <vTextFieldCB> 
}

void CUIimageviewprops::vArrowCBCallback(Widget w, 
		XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIimageviewprops *obj = (CUIimageviewprops *)data->object;
    obj->vArrowCB(w, data->client_data, callData);
}

void CUIimageviewprops::vArrowCB (Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vArrowCB> 
  unsigned char ucDir;
  XtVaGetValues(w, XmNarrowDirection, &ucDir, NULL);
  if (XmARROW_RIGHT == ucDir)
    {
      XtVaSetValues(XtParent(_CUIimageviewprops), XmNwidth, 750, NULL);
      XtVaSetValues(w, XmNarrowDirection, XmARROW_LEFT, NULL);
    }
  else
    {
      XtVaSetValues(XtParent(_CUIimageviewprops), XmNwidth, 391, NULL);
      XtVaSetValues(w, XmNarrowDirection, XmARROW_RIGHT, NULL);
    }
    // End user code block <vArrowCB> 
}

// Begin user code block <tail> 
void
CUIimageviewprops::vReadWidgets(void)
{
  // Read the widget values into m_tImageProps
  // Read only the textfield, optionmenu and slider widgets.  Do not
  // read the labels.
  
  char *pcTemp;
  int   nStat;
  int   a2nTemp[2];
  float fTemp;
  
  pcTemp = XmTextFieldGetString(_tfBorder);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      m_tImageProps.fBorder = fTemp;
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfWhitePix);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      m_tImageProps.fScaleMin = fTemp;
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfBlackPix);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      m_tImageProps.fScaleMax = fTemp;
    }
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfAspect);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      m_tImageProps.fAspectRatio = fTemp;
    }
  XtFree(pcTemp);

/*
  pcTemp = XmTextFieldGetString(_tfExtents);
  nStat = sscanf(pcTemp, "%d, %d", &a2nTemp[0], &a2nTemp[1]);
  if (2 == nStat)
    {
      m_tImageProps.nExt[0] = a2nTemp[0];
      m_tImageProps.nExt[1] = a2nTemp[1];
    }
  XtFree(pcTemp);
*/
  pcTemp = XmTextFieldGetString(_tfBoxSize);
  nStat = sscanf(pcTemp, "%d, %d", &a2nTemp[0], &a2nTemp[1]);
  if (2 == nStat)
    {
      m_tImageProps.nIntegrateBox[0] = a2nTemp[0];
      m_tImageProps.nIntegrateBox[1] = a2nTemp[1];
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfSatValue);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      m_tImageProps.fSatPixValue = fTemp;
    }
  XtFree(pcTemp);

  m_tImageProps.nOrient      = _omOrient->nGetValue();
  m_tImageProps.nAspectMode  = _omUseAspect->nGetValue();
  m_tImageProps.nAutoRescale = _omRescale->nGetValue();
  m_tImageProps.sSatPixColor = _omColor->pcGetLabel();

} 

void
CUIimageviewprops::vUpdateWidgets(void)
{
  // Copy the values in m_tImageProps to the widgets

  char    a80cTemp[80];
  int     nTemp;

  sprintf(a80cTemp, "%d,   %d", m_tImageProps.nDim[0], m_tImageProps.nDim[1]);
  vSetLabel(_lbImgSizeO, a80cTemp);

  sprintf(a80cTemp, "%.1f,   %.1f",
	  m_tImageProps.fImageMin, m_tImageProps.fImageMax);
  vSetLabel(_lbMinMaxO, a80cTemp);

  sprintf(a80cTemp, "%.2f,  %.2f", m_tImageProps.fAvg, m_tImageProps.fSD);
  vSetLabel(_lbAvgSDO, a80cTemp);

  sprintf(a80cTemp, "%.3f", m_tImageProps.fRotStart);
  vSetLabel(_lbRotStartO, a80cTemp);

  sprintf(a80cTemp, "%.3f", m_tImageProps.fRotEnd);
  vSetLabel(_lbRotEndO, a80cTemp);

  sprintf(a80cTemp, "%.3f", m_tImageProps.fExpTime);
  vSetLabel(_lbExpTimeO, a80cTemp);

  nTemp = (int) m_tImageProps.fScaleMin;
  sprintf(a80cTemp, "%d", nTemp);
  XmTextFieldSetString(_tfWhitePix, a80cTemp);

  nTemp = (int) m_tImageProps.fScaleMax;
  sprintf(a80cTemp, "%d", nTemp);
  XmTextFieldSetString(_tfBlackPix, a80cTemp);

  sprintf(a80cTemp, "%.3f", m_tImageProps.fAspectRatio);
  XmTextFieldSetString(_tfAspect, a80cTemp);

  sprintf(a80cTemp, "%d, %d", m_tImageProps.nExt[0], m_tImageProps.nExt[1]);
  XmTextFieldSetString(_tfReserve, a80cTemp);

  sprintf(a80cTemp, "%d, %d", m_tImageProps.nIntegrateBox[0],
	                      m_tImageProps.nIntegrateBox[1]);
  XmTextFieldSetString(_tfBoxSize, a80cTemp);

  sprintf(a80cTemp, "%.1f", m_tImageProps.fSatPixValue);
  XmTextFieldSetString(_tfSatValue, a80cTemp);

  sprintf(a80cTemp, "%.1f", m_tImageProps.fBorder);
  XmTextFieldSetString(_tfBorder, a80cTemp);

  _omOrient->vSetValue(m_tImageProps.nOrient);
  _omUseAspect->vSetValue(m_tImageProps.nAspectMode);
  _omRescale->vSetValue(m_tImageProps.nAutoRescale);
  _omColor->vSetLabel(m_tImageProps.sSatPixColor.string());

} 

void
CUIimageviewprops::vSetLabel(Widget w, char *pcLabel)
{
  // Change the label of the widget label input as w to the
  // text specified in pcLabel

  XmString sxTemp;
  sxTemp = XmStringCreateLtoR(pcLabel,
#if (XmVersion >= 1002)
			      XmFONTLIST_DEFAULT_TAG);
#else
                              XmSTRING_DEFAULT_CHARSET);
#endif
if (NULL != sxTemp)
    {
      XtVaSetValues(w, XmNlabelString, sxTemp, 
		    XmNrecomputeSize, False, XmNalignment, 
		    XmALIGNMENT_END, 
		    NULL);
      XmStringFree(sxTemp);
    }
}

void
CUIimageviewprops::vSetValues(const tagImageProps& ptProps)
{

  m_tImageProps.fRotStart        = ptProps.fRotStart;
  m_tImageProps.fRotEnd          = ptProps.fRotEnd;
  m_tImageProps.fExpTime         = ptProps.fExpTime;
  m_tImageProps.fBorder          = ptProps.fBorder;
  m_tImageProps.fScaleMin        = ptProps.fScaleMin;
  m_tImageProps.fScaleMax        = ptProps.fScaleMax;
  m_tImageProps.fImageMin        = ptProps.fImageMin;
  m_tImageProps.fImageMax        = ptProps.fImageMax;
  m_tImageProps.fAvg             = ptProps.fAvg;
  m_tImageProps.fSD              = ptProps.fSD;
  m_tImageProps.fAspectRatio     = ptProps.fAspectRatio;
  m_tImageProps.nDim[0]          = ptProps.nDim[0];
  m_tImageProps.nDim[1]          = ptProps.nDim[1];
  m_tImageProps.nOrig[0]         = ptProps.nOrig[0];
  m_tImageProps.nOrig[1]         = ptProps.nOrig[1];
  m_tImageProps.nIntegrateBox[0] = ptProps.nIntegrateBox[0];
  m_tImageProps.nIntegrateBox[1] = ptProps.nIntegrateBox[1];
  m_tImageProps.nAutoRescale     = ptProps.nAutoRescale;
  m_tImageProps.nOrient          = ptProps.nOrient;
  m_tImageProps.nAspectMode      = ptProps.nAspectMode;
  m_tImageProps.nDisplayReflns   = ptProps.nDisplayReflns;
  m_tImageProps.nDisplayPixValues= ptProps.nDisplayPixValues;
  m_tImageProps.fSatPixValue     = ptProps.fSatPixValue;
  m_tImageProps.fTooLowPixValue  = ptProps.fTooLowPixValue;
  m_tImageProps.sSatPixColor     = ptProps.sSatPixColor;
  m_tImageProps.sTooLowPixColor  = ptProps.sTooLowPixColor;

  CUIimageviewprops::vUpdateWidgets();
}

void
CUIimageviewprops::vGetValues(tagImageProps* ptProps)
{
  // First read the widget values

  CUIimageviewprops::vReadWidgets();

  ptProps->fRotStart        = m_tImageProps.fRotStart;
  ptProps->fRotEnd          = m_tImageProps.fRotEnd;
  ptProps->fExpTime         = m_tImageProps.fExpTime;
  ptProps->fBorder          = m_tImageProps.fBorder;
  ptProps->fScaleMin        = m_tImageProps.fScaleMin;
  ptProps->fScaleMax        = m_tImageProps.fScaleMax;
  ptProps->fImageMin        = m_tImageProps.fImageMin;
  ptProps->fImageMax        = m_tImageProps.fImageMax;
  ptProps->fAvg             = m_tImageProps.fAvg;
  ptProps->fSD              = m_tImageProps.fSD;
  ptProps->fAspectRatio     = m_tImageProps.fAspectRatio;
  ptProps->nDim[0]          = m_tImageProps.nDim[0];
  ptProps->nDim[1]          = m_tImageProps.nDim[1];
  ptProps->nOrig[0]         = m_tImageProps.nOrig[0];
  ptProps->nOrig[1]         = m_tImageProps.nOrig[1];
  ptProps->nIntegrateBox[0] = m_tImageProps.nIntegrateBox[0];
  ptProps->nIntegrateBox[1] = m_tImageProps.nIntegrateBox[1];
  ptProps->nAutoRescale     = m_tImageProps.nAutoRescale;
  ptProps->nOrient          = m_tImageProps.nOrient;
  ptProps->nAspectMode      = m_tImageProps.nAspectMode;
  ptProps->nDisplayReflns   = m_tImageProps.nDisplayReflns;
  ptProps->nDisplayPixValues= m_tImageProps.nDisplayPixValues;
  ptProps->fSatPixValue     = m_tImageProps.fSatPixValue;
  ptProps->fTooLowPixValue  = m_tImageProps.fTooLowPixValue;
  ptProps->sSatPixColor     = m_tImageProps.sSatPixColor;
  ptProps->sTooLowPixColor  = m_tImageProps.sTooLowPixColor;
}

// End user code block <tail> 
