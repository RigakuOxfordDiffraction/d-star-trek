/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Version 5.0.
 *
 * Identification: 
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("c++_options", "")
!(BX) bx_info("c++_libs", "-lSgm -lXm -lXt -lgl -lX11 -lgen")
!(BX) bx_info("c++_cflags", "-DFUNCPROTO -DXTFUNCPROTO")
!(BX) bx_info("c++_cc", "g++")
!(BX) bx_info("c++_excludeungenerated", "false")
!(BX) bx_info("c++_target", "dtdisplay")
!(BX) bx_info("c++_information", "")
!(BX) bx_info("c++_user_main_loop", "", false)
!(BX) bx_info("c++_del_nested_classes", "false")
!(BX) bx_info("c++_ignore_shell_geometry", "false")
!(BX) bx_info("c++_visible_windows_only", "false")
!(BX) bx_info("c++_rm_exp_callbacks", "false")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "false")
!(BX) bx_info("c++_use_locales", "false")
!(BX) bx_info("c++_name", "dtdisplay")
!(BX) bx_info("c++_class", "Dtdisplay")
!(BX) bx_info("c++_hdrext", "h")
!(BX) bx_info("c++_srcext", "cc")
!(BX) bx_info("c++_app_defaults", "app-defaults", true)
!(BX) bx_info("c++_callbacks", "callbacks-cc", false)
!(BX) bx_info("c++_utilities", "bxutils-cc", false)
!(BX) bx_info("c++_constants", "defs-cc", false)
!(BX) bx_info("c++_main", "main-cc", true)
!(BX) bx_info("c++_baseclass", "UIComponent", false)
!(BX) bx_info("c++_makefile", "makefile-cc", false)
!(BX) bx_info("c++_imakefile", "Imakefile", false)
!(BX) bx_info("c++_dirpath", "")
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("system_directory", "/d3/bxpro")
!(BX) bx_info("builder_version", "Builder Xcessory Version 5.0")
!(BX) bx_info("build_lang", "CXX")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

!
! Include Files: 
!

include file './CUIimageviewprops.uil';
include file './CUIimagefileSelect.uil';
include file './CUIreflnviewprops.uil';
include file './CUIom9.uil';
include file './CUIprintSelect.uil';
include file './CUIreflnfileSelect.uil';


procedure BxGlobalWidgetId;
identifier BXG_fileSelectionBox;
procedure vFileSelectionOpenOKCB();
procedure vFileSelectionCancelCB();
procedure vHTMLHelp(string);
procedure vReflnViewPropSelectCB();
procedure vPrintValueChangedCB();
procedure vPrintSelectCB();
procedure vTextFieldCB();
procedure vPopDialog();
procedure vUtilsCB();
procedure vViewRefresh();
procedure vLoadReflnCB();
procedure vFileTemplateCB();
procedure vZoomMsgPopup();
procedure vUnzoomCB();
procedure vViewHeaderCB();
procedure vPlotReflnListCB();
procedure vClearOutput();
procedure vPopupReflnPropsCB();
procedure vPopupImagePropsCB();
procedure vDAInputCB();
procedure vPostHelp(string);
procedure vUnpostHelp();
procedure vFileListenCB();
procedure vPostPrintCB();
procedure vFileSelectionPostCB();
procedure vExitCB(integer);
procedure vDrawResoCB();
procedure vEraseToggleCB();
procedure vReflnFileSelectCB();
procedure vProgressCancelCB();
procedure vDeleteReflns();
procedure vCursorModeCB();
!(BX) "XmString" "hxmsImageExtents"
identifier hxmsImageExtents;
!(BX) "XmString" "hxmsImageMinMax"
identifier hxmsImageMinMax;
!(BX) "XmString" "hxmsImageAvgSD"
identifier hxmsImageAvgSD;
!(BX) "int" "nZoomFactor"
identifier nZoomFactor;

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


object cUIprintSelect : XmFileSelectionDialog widget {
    arguments {
!(BX) BxNclass = "CUIprintSelect";
!(BX) BxNsubclassDerived = "False";
!(BX)   _XmNdialogTitle = compound_string("d*TREK - File: Print to printer");
        XmNsensitive = true;
!(BX)   _XmNselectionLabelString = compound_string("Postscript Filename");
!(BX)   _XmNokLabelString = compound_string("Print to Printer");
!(BX)   _XmNhelpLabelString = compound_string("Help");
!(BX)   _XmNcancelLabelString = compound_string("Cancel");
!(BX)   _XmNapplyLabelString = compound_string("Filter");
        XmNfilterLabelString = compound_string("Postscript Filter");
!(BX)   _XmNfileListLabelString = compound_string("Files");
!(BX)   _XmNdirListLabelString = compound_string("Directories");
        XmNchildPlacement = XmPLACE_TOP;
!(BX)   _XmNpattern = compound_string("*");
        XmNx = 1086;
        XmNy = 632;
        XmNwidth = 918;
        XmNheight = 684;
    };
    controls {
         managed XmForm cUIprintSelect_form;
    };
    callbacks {
        XmNokCallback = procedure vPrintSelectCB();
        XmNcancelCallback = procedure vPrintSelectCB();
    };
};

!(BX)object xmDialogShell6 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 918;
!(BX)        XmNheight = 684;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFileSelectionDialog cUIprintSelect;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIreflnfileSelect : XmFileSelectionDialog widget {
    arguments {
!(BX) BxNclass = "CUIreflnfileSelect";
!(BX) BxNsubclassDerived = "False";
!(BX)   _XmNdialogTitle = compound_string("d*TREK - File: Reflection list s" &
!(BX) "election");
!(BX)   _XmNselectionLabelString = compound_string("Selection");
!(BX)   _XmNokLabelString = compound_string("OK, Load");
!(BX)   _XmNhelpLabelString = compound_string("Help");
!(BX)   _XmNcancelLabelString = compound_string("Cancel");
!(BX)   _XmNapplyLabelString = compound_string("Filter");
!(BX)   _XmNfilterLabelString = compound_string("Filter");
!(BX)   _XmNfileListLabelString = compound_string("Files");
!(BX)   _XmNdirListLabelString = compound_string("Directories");
!(BX)   _XmNpattern = compound_string("*.ref*");
        XmNx = 273;
        XmNy = 32;
        XmNwidth = 553;
        XmNheight = 424;
    };
    controls {
         managed XmForm cUIreflnfileSelect_form;
    };
    callbacks {
        XmNokCallback = procedure vReflnFileSelectCB();
        XmNcancelCallback = procedure vReflnFileSelectCB();
    };
};

!(BX)object xmDialogShell5 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 553;
!(BX)        XmNheight = 424;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFileSelectionDialog cUIreflnfileSelect;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIimageviewprops : XmSelectionDialog widget {
    arguments {
!(BX) BxNclass = "CUIimageviewprops";
!(BX) BxNsubclassDerived = "False";
        XmNx = 354;
        XmNy = 32;
        XmNwidth = 391;
        XmNheight = 347;
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object xmDialogShell1 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 391;
!(BX)        XmNheight = 347;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmSelectionDialog cUIimageviewprops;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object mbError : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("d*TREK - Error dialog");
        XmNdefaultButtonType = XmDIALOG_CANCEL_BUTTON;
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNcancelLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("This is an error message");
        XmNx = 341;
        XmNy = 32;
        XmNwidth = 416;
        XmNheight = 216;
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object xmDialogShell9 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 416;
!(BX)        XmNheight = 216;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog mbError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object scProgress : XmScale widget {
    arguments {
        XmNscaleHeight = 50;
        XmNshowValue = true;
        XmNorientation = XmHORIZONTAL;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 356;
        XmNheight = 70;
    };
    controls {
    };
    callbacks {
    };
};

object fmProgress : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 11;
        XmNy = 46;
        XmNwidth = 356;
        XmNheight = 74;
    };
    controls {
         managed XmScale scProgress;
    };
    callbacks {
    };
};

object mbProgress : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("d*TREK display - Progress ...");
!(BX)   _XmNcancelLabelString = compound_string("Abort");
!(BX)   _XmNmessageString = compound_string("Progress of overlaying images");
        XmNx = 360;
        XmNy = 32;
        XmNwidth = 378;
        XmNheight = 202;
    };
    controls {
         managed XmForm fmProgress;
    };
    callbacks {
        XmNcancelCallback = procedure vProgressCancelCB();
    };
};

!(BX)object xmDialogShell8 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 378;
!(BX)        XmNheight = 202;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog mbProgress;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIreflnviewprops : XmSelectionDialog widget {
    arguments {
!(BX) BxNclass = "CUIreflnviewprops";
!(BX) BxNsubclassDerived = "False";
!(BX)   _XmNdialogTitle = compound_string("d*TREK - Edit reflection view pr" &
!(BX) "operties");
        XmNsensitive = true;
        XmNdialogType = XmDIALOG_PROMPT;
!(BX)   _XmNselectionLabelString = compound_string("Selection");
!(BX)   _XmNokLabelString = compound_string("OK");
!(BX)   _XmNhelpLabelString = compound_string("Help");
!(BX)   _XmNcancelLabelString = compound_string("Cancel");
!(BX)   _XmNapplyLabelString = compound_string("Apply");
        XmNx = 338;
        XmNy = 32;
        XmNwidth = 422;
        XmNheight = 439;
    };
    controls {
         managed XmForm cUIreflnviewprops_fmRefln;
    };
    callbacks {
        XmNhelpCallback = procedure vHTMLHelp("EditReflnView$$");
        XmNokCallback = procedure vReflnViewPropSelectCB();
        XmNcancelCallback = procedure vReflnViewPropSelectCB();
        XmNapplyCallback = procedure vReflnViewPropSelectCB();
    };
};

!(BX)object xmDialogShell2 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 422;
!(BX)        XmNheight = 439;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmSelectionDialog cUIreflnviewprops;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object tfViewHeader : XmText widget {
    arguments {
        XmNeditMode = XmMULTI_LINE_EDIT;
!(BX)   _XmNscrollLeftSide = true;
    };
    controls {
    };
    callbacks {
    };
};

object swViewHeader : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmSeparator spViewHeader;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 636;
        XmNheight = 227;
    };
    controls {
         managed XmText tfViewHeader;
    };
    callbacks {
    };
};

object spViewHeader : XmSeparator widget {
    arguments {
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 61;
        XmNleftOffset = 0;
        XmNrightOffset = 21;
        XmNx = 0;
        XmNy = 227;
        XmNwidth = 615;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object pbViewHeaderDismiss : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Dismiss");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNleftOffset = 260;
        XmNrightOffset = 276;
        XmNx = 260;
        XmNy = 258;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object fmViewHeader : XmFormDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("d*TREK - Image header");
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 986;
        XmNy = 844;
        XmNwidth = 636;
        XmNheight = 308;
    };
    controls {
         managed XmPushButton pbViewHeaderDismiss;
         managed XmSeparator spViewHeader;
         managed XmScrolledWindow swViewHeader;
    };
    callbacks {
    };
};

!(BX)object xmDialogShell4 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 636;
!(BX)        XmNheight = 308;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog fmViewHeader;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object mbViewZoomPan : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("d*TREK - How to Zoom and Pan ..." &
!(BX) "");
!(BX)   _XmNmessageString = compound_string("Select the image area to ZOOM", separate=true) &
!(BX) compound_string("by dragging out a box in the image", separate=true) &
!(BX) compound_string("with the middle mouse button.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("To UNZOOM an image, single click", separate=true) &
!(BX) compound_string(" on it with the middle mouse button.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("To PAN an image, press and hold the left mouse, ", separate=true) &
!(BX) compound_string("then press and hold the middle mouse button; ", separate=true) &
!(BX) compound_string("drag the mouse to pan.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("LINE cursor: Shift-middle mouse button - Measure d-spacings", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("CIRCLE cursor: Ctrl-middle mouse button - Measure spot radii", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("ALT-CIRCLE cursor: Alt-middle mouse button - EDIT BEAM POSITION,", separate=true) &
!(BX) compound_string("   (Use File/Save header... to save edits to new header.)", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("To MOVE a LINE or CIRCLE cursor,", separate=true) &
!(BX) compound_string("press left mouse button WHILE cursor IS VISIBLE (2 buttons!);", separate=true) &
!(BX) compound_string("drag the mouse to move the cursor.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("ROCKING CURVES: Tile exactly 9 images with File/New/Tile,", separate=true) &
!(BX) compound_string("then rocking curve at cursor position is shown in lower right", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("To ADD a spot to the reflnlist, click on spot, then press the + or Insert key.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("To DELETE a refln, click on refln, then press the - or Delete key.", separate=true) &
!(BX) compound_string("Write the edited reflnlist to a file with File/Write reflnlist...");
        XmNx = 1074;
        XmNy = 594;
        XmNwidth = 966;
        XmNheight = 594;
    };
    controls {
    };
    callbacks {
        XmNhelpCallback = procedure vHTMLHelp("ViewZoom$$");
    };
};

!(BX)object xmDialogShell3 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "d*TREK - How to Zoom";
!(BX)        XmNwidth = 966;
!(BX)        XmNheight = 594;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog mbViewZoomPan;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIimagefileSelect : XmFileSelectionDialog widget {
    arguments {
!(BX) BxNclass = "CUIimagefileSelect";
!(BX) BxNsubclassDerived = "False";
!(BX)   _XmNdialogTitle = compound_string("d*TREK - File: Image selection");
        XmNautoUnmanage = true;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_fileSelectionBox);
        XmNhelpCallback = procedure vHTMLHelp("FileOpen$$");
        XmNokCallback = procedure vFileSelectionOpenOKCB();
        XmNcancelCallback = procedure vFileSelectionCancelCB();
    };
};

!(BX)object xmDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 50;
!(BX)        XmNheight = 432;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFileSelectionDialog cUIimagefileSelect;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object pbFileNewImage : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Image file...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Read and display a new image fi" &
 "le");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewScan : XmPushButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Scan...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Set new scan parameters for a s" &
 "eries of images");
    };
};

object spFileNew1 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pbFileNewOverlay : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Overlay...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Overlay a series of images");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewTile : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Tile...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Tile a series of images");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewUnderlay : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Underlay...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Underlay a series of images");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewMovie : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Movie...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Make a movie of a series of ima" &
 "ges");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewAverage : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Average...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Average a series of images");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileNewStats : XmPushButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Statistics...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Tile a series of images");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pmFileNew : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 170;
        XmNheight = 222;
    };
    controls {
         managed XmPushButton pbFileNewImage;
         managed XmPushButton pbFileNewScan;
         managed XmSeparator spFileNew1;
         managed XmPushButton pbFileNewOverlay;
         managed XmPushButton pbFileNewTile;
         managed XmPushButton pbFileNewUnderlay;
         managed XmPushButton pbFileNewMovie;
         managed XmPushButton pbFileNewAverage;
         managed XmPushButton pbFileNewStats;
    };
    callbacks {
    };
};

object cbFileNew : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("New");
    };
    controls {
         unmanaged XmPulldownMenu pmFileNew;
    };
    callbacks {
    };
};

object pbFileOpen : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Open...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Open and read an image file");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileSaveAs : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Save As...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Save the displayed image to a n" &
 "ew file");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileSaveHeader : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Save Header As...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Save the header only to a new f" &
 "ile");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object pbFileTemplate : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Image template...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Set the image file template");
        XmNactivateCallback = procedure vFileSelectionPostCB();
    };
};

object spFile4 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pbFileLoad : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Load refln list...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Open and read a reflection file" &
 "");
        XmNactivateCallback = procedure vLoadReflnCB();
    };
};

object pbFileWrite : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Write refln list...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Write a reflection file");
        XmNactivateCallback = procedure vLoadReflnCB();
    };
};

object spFile1 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pbFilePrefer : XmPushButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Preferences...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Set user preferences");
    };
};

object pbFilePrint : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Print...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Print or PostScript the display" &
 "ed image");
        XmNactivateCallback = procedure vPostPrintCB();
    };
};

object spFile2 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object tbFileListenIntegrate : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("dtintegrate");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vFileListenCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Respond to updates from dtinteg" &
 "rate");
    };
};

object tbFileListenCollect : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("dtcollect");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vFileListenCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Respond to updates from dtcolle" &
 "ct");
    };
};

object tbFileListenOther : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Others");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vFileListenCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Respond to updates from other t" &
 "han dtcollect");
    };
};

object pmFileListen : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 159;
        XmNheight = 79;
    };
    controls {
         managed XmToggleButton tbFileListenIntegrate;
         managed XmToggleButton tbFileListenCollect;
         managed XmToggleButton tbFileListenOther;
    };
    callbacks {
    };
};

object cbFileListen : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Respond to updates");
    };
    controls {
         unmanaged XmPulldownMenu pmFileListen;
    };
    callbacks {
    };
};

object spFile3 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pbFileExit : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Exit");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Exit from the program");
        XmNactivateCallback = procedure vExitCB(0);
    };
};

object pmFile : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 261;
        XmNheight = 305;
    };
    controls {
         managed XmCascadeButton cbFileNew;
         managed XmPushButton pbFileOpen;
         managed XmPushButton pbFileSaveAs;
         managed XmPushButton pbFileSaveHeader;
         managed XmPushButton pbFileTemplate;
         managed XmSeparator spFile4;
         managed XmPushButton pbFileLoad;
         managed XmPushButton pbFileWrite;
         managed XmSeparator spFile1;
         managed XmPushButton pbFilePrefer;
         managed XmPushButton pbFilePrint;
         managed XmSeparator spFile2;
         managed XmCascadeButton cbFileListen;
         managed XmSeparator spFile3;
         managed XmPushButton pbFileExit;
    };
    callbacks {
    };
};

object cbFile : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("File");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 64;
        XmNheight = 25;
    };
    controls {
         unmanaged XmPulldownMenu pmFile;
    };
    callbacks {
    };
};

object pbEditImage : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Image view props...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Edit the viewing properties of " &
 "the image");
        XmNactivateCallback = procedure vPopupImagePropsCB();
    };
};

object pbEditRefln : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Refln view props...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Edit the viewing properties of " &
 "the reflection list");
        XmNactivateCallback = procedure vPopupReflnPropsCB();
    };
};

object pbEditClear : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Clear selected output");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Clear the selected output in th" &
 "e scrolled text area");
        XmNactivateCallback = procedure vClearOutput();
    };
};

object pbEditDelRef : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Del 10% lowest reflns");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Delete 10% least intense reflec" &
 "tions");
        XmNactivateCallback = procedure vDeleteReflns();
    };
};

object spEdit : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object tbEditErase : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Erase (edit nonunf) mode");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vEraseToggleCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Use mouse to erase/edit image p" &
 "ixels");
    };
};

object pbEditBeam : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Edit beam position");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Pop-up help message on editing " &
 "direct beam position");
        XmNactivateCallback = procedure vZoomMsgPopup();
    };
};

object pbEditHeader : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Edit header...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Edit the header ");
        XmNactivateCallback = procedure vZoomMsgPopup();
    };
};

object pmEdit : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 315;
        XmNheight = 193;
    };
    controls {
         managed XmPushButton pbEditImage;
         managed XmPushButton pbEditRefln;
         managed XmPushButton pbEditClear;
         managed XmPushButton pbEditDelRef;
         managed XmSeparator spEdit;
         managed XmToggleButton tbEditErase;
         managed XmPushButton pbEditBeam;
         managed XmPushButton pbEditHeader;
    };
    callbacks {
    };
};

object cbEdit : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Edit");
        XmNx = 69;
        XmNy = 5;
        XmNwidth = 64;
        XmNheight = 25;
    };
    controls {
         unmanaged XmPulldownMenu pmEdit;
    };
    callbacks {
    };
};

object pbViewRefresh : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Refresh");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Refresh the image drawing area");
        XmNactivateCallback = procedure vViewRefresh();
    };
};

object pbViewZoom : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Zoom...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Pop-up a how to zoom message");
        XmNactivateCallback = procedure vZoomMsgPopup();
    };
};

object pbViewUnzoom : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Unzoom");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Unzoom the image display");
        XmNactivateCallback = procedure vUnzoomCB();
    };
};

object pbViewPan : XmPushButton widget {
    arguments {
        XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Pan...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Learn how to pan the image");
        XmNactivateCallback = procedure vZoomMsgPopup();
    };
};

object spView1 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pbViewHeader : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Image header...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Display the image header");
        XmNactivateCallback = procedure vViewHeaderCB();
    };
};

object tbViewCalc : XmToggleButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Calculated reflns");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Plot calculated reflection posi" &
 "tions, if available");
    };
};

object tbViewObs : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Observed reflns");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vPlotReflnListCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Plot observed reflection positi" &
 "ons, if available");
    };
};

object tbViewReso : XmToggleButton widget {
    arguments {
        XmNsensitive = true;
        XmNindicatorOn = true;
!(BX)   _XmNlabelString = compound_string("Resolution arcs");
        XmNvisibleWhenOff = false;
        XmNrecomputeSize = true;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vDrawResoCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Draw isoresolution arcs or circ" &
 "les");
    };
};

object tbViewMeasure : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Measure");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Measure the d-spacing between p" &
 "icked points");
    };
};

object tbViewPlot : XmToggleButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Plot points...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Graph pixel values between two " &
 "points");
    };
};

object tbViewPixel : XmToggleButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("View pixel values...");
        XmNrecomputeSize = true;
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("View pixel values at selected p" &
 "oint");
    };
};

object pmView : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 267;
        XmNheight = 291;
    };
    controls {
         managed XmPushButton pbViewRefresh;
         managed XmPushButton pbViewZoom;
         managed XmPushButton pbViewUnzoom;
         managed XmPushButton pbViewPan;
         managed XmSeparator spView1;
         managed XmPushButton pbViewHeader;
         managed XmToggleButton tbViewCalc;
         managed XmToggleButton tbViewObs;
         managed XmToggleButton tbViewReso;
         managed XmToggleButton tbViewMeasure;
         managed XmToggleButton tbViewPlot;
         managed XmToggleButton tbViewPixel;
    };
    callbacks {
    };
};

object cbView : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("View");
        XmNx = 133;
        XmNy = 5;
        XmNwidth = 64;
        XmNheight = 25;
    };
    controls {
         unmanaged XmPulldownMenu pmView;
    };
    callbacks {
    };
};

object pbHelpHTML : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help via HTML viewer...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("This activates HTML help");
        XmNactivateCallback = procedure vHTMLHelp("HelpHTML$$");
    };
};

object pbHelpAbout : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("About...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Show version information");
        XmNactivateCallback = procedure vPopDialog();
    };
};

object pbHelpRefln : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Refln colors...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Info on refln colors");
        XmNactivateCallback = procedure vPopDialog();
    };
};

object pmHelp : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 290;
        XmNheight = 85;
    };
    controls {
         managed XmPushButton pbHelpHTML;
         managed XmPushButton pbHelpAbout;
         managed XmPushButton pbHelpRefln;
    };
    callbacks {
    };
};

object cbHelp : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help");
        XmNx = 952;
        XmNy = 5;
        XmNwidth = 64;
        XmNheight = 25;
    };
    controls {
         unmanaged XmPulldownMenu pmHelp;
    };
    callbacks {
    };
};

object pbUtilsProcess : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("dtprocess ...");
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Launch a separate dtprocess win" &
 "dow");
        XmNactivateCallback = procedure vUtilsCB();
    };
};

object pmUtils : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
         managed XmPushButton pbUtilsProcess;
    };
    callbacks {
    };
};

object cbUtils : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Utils");
        XmNx = 197;
        XmNy = 5;
        XmNwidth = 76;
        XmNheight = 25;
    };
    controls {
         unmanaged XmPulldownMenu pmUtils;
    };
    callbacks {
    };
};

object menuBar : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton cbHelp;
        XmNwidth = 1021;
        XmNheight = 35;
    };
    controls {
         managed XmCascadeButton cbFile;
         managed XmCascadeButton cbEdit;
         managed XmCascadeButton cbView;
         managed XmCascadeButton cbHelp;
         managed XmCascadeButton cbUtils;
    };
    callbacks {
    };
};

object daImageBig : XmDrawingArea widget {
    arguments {
!(BX)   _XmNbackground = color('grey75');
        XmNx = 3;
        XmNy = 3;
        XmNwidth = 726;
        XmNheight = 710;
    };
    controls {
    };
    callbacks {
        XmNinputCallback = procedure vDAInputCB();
    };
};

object frImageBig : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmPanedWindow pwMain;
        XmNx = 289;
        XmNy = 0;
        XmNwidth = 732;
        XmNheight = 716;
    };
    controls {
         managed XmDrawingArea daImageBig;
    };
    callbacks {
    };
};

object tfImageNum : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNsensitive = false;
        XmNmaxLength = 20;
        XmNuserData = 2;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
        XmNx = 180;
        XmNy = 226;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure vFileTemplateCB();
    };
};

object tfOutput : XmText widget {
    arguments {
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNcursorPositionVisible = false;
!(BX)   _XmNvalue = "This scrolled text area\n\
!(BX)conta" &
!(BX) "ins general intormation\n\
!(BX)on selected user actions.";
        XmNscrollLeftSide = true;
        XmNscrollHorizontal = true;
        XmNeditable = false;
        XmNheight = 137;
    };
    controls {
    };
    callbacks {
    };
};

object swOutput : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNbottomOffset = 10;
        XmNbottomWidget = XmTextField tfImageNum;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 60;
        XmNx = 0;
        XmNy = 60;
        XmNwidth = 280;
        XmNheight = 156;
    };
    controls {
         managed XmText tfOutput;
    };
    callbacks {
    };
};

object pbImagePrev : XmPushButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Prev");
        XmNuserData = 0;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmTextField tfImageNum;
        XmNrightOffset = 5;
        XmNtopOffset = 0;
        XmNrightWidget = XmPushButton pbImageNext;
        XmNx = 10;
        XmNy = 226;
        XmNwidth = 65;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Read and display previous image" &
 " in a scan");
        XmNactivateCallback = procedure vFileTemplateCB();
    };
};

object pbImageNext : XmPushButton widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("Next");
        XmNuserData = 1;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmTextField tfImageNum;
        XmNrightOffset = 35;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfImageNum;
        XmNx = 80;
        XmNy = 226;
        XmNwidth = 65;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Read and display next image in " &
 "a scan");
        XmNactivateCallback = procedure vFileTemplateCB();
    };
};

object lbImageNum : XmLabel widget {
    arguments {
        XmNsensitive = false;
!(BX)   _XmNlabelString = compound_string("No:");
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmTextField tfImageNum;
        XmNrightOffset = 2;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfImageNum;
        XmNtopWidget = XmTextField tfImageNum;
        XmNx = 150;
        XmNy = 226;
        XmNwidth = 28;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object tbCursorRect : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNsensitive = true;
        XmNindicatorOn = true;
!(BX)   _XmNlabelString = compound_string("Zoom");
        XmNselectColor = color('green');
        XmNindicatorType = XmONE_OF_MANY;
        XmNvisibleWhenOff = true;
        XmNrecomputeSize = true;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightPosition = 50;
        XmNleftOffset = 0;
        XmNtopOffset = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 140;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vCursorModeCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Use rectangle cursor to define " &
 "zoom region");
    };
};

object tbCursorMeasure : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNsensitive = true;
        XmNindicatorOn = true;
!(BX)   _XmNlabelString = compound_string("Measure");
        XmNselectColor = color('green');
        XmNindicatorType = XmONE_OF_MANY;
        XmNvisibleWhenOff = true;
        XmNrecomputeSize = true;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightPosition = 50;
        XmNleftOffset = 0;
        XmNtopOffset = 30;
        XmNx = 0;
        XmNy = 30;
        XmNwidth = 140;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vCursorModeCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Use line cursor to measure d-sp" &
 "acing");
    };
};

object tbCursorSpot : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNsensitive = true;
        XmNindicatorOn = true;
!(BX)   _XmNlabelString = compound_string("Spot circle");
        XmNselectColor = color('green');
        XmNindicatorType = XmONE_OF_MANY;
        XmNvisibleWhenOff = true;
        XmNrecomputeSize = true;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftPosition = 50;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNtopWidget = XmToggleButton tbCursorRect;
        XmNx = 140;
        XmNy = 30;
        XmNwidth = 140;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vCursorModeCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Use circle cursor to measure sp" &
 "ot radii");
    };
};

object tbCursorBeam : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNsensitive = true;
        XmNindicatorOn = true;
!(BX)   _XmNlabelString = compound_string("Beam circle");
        XmNselectColor = color('green');
        XmNindicatorType = XmONE_OF_MANY;
        XmNvisibleWhenOff = true;
        XmNrecomputeSize = true;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftPosition = 50;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNx = 140;
        XmNy = 0;
        XmNwidth = 140;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vCursorModeCB();
        XmNdisarmCallback = procedure vUnpostHelp();
        XmNarmCallback = procedure vPostHelp("Use circle cursor to edit beam " &
 "position");
    };
};

object foMainTop : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
!(BX)   _XmNpaneMinimum = 175;
        XmNpositionIndex = 0;
!(BX)   _XmNpaneMaximum = 1000;
        XmNallowResize = true;
        XmNwidth = 280;
!(BX)   _XmNheight = 266;
    };
    controls {
         managed XmToggleButton tbCursorBeam;
         managed XmToggleButton tbCursorSpot;
         managed XmToggleButton tbCursorMeasure;
         managed XmToggleButton tbCursorRect;
         managed XmLabel lbImageNum;
         managed XmPushButton pbImageNext;
         managed XmPushButton pbImagePrev;
         managed XmScrolledWindow swOutput;
         managed XmTextField tfImageNum;
    };
    callbacks {
    };
};

object lbWavelength : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNlabelString = compound_string("Wavelength:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 20;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfWavelength;
        XmNtopWidget = XmTextField tfWavelength;
        XmNx = 0;
        XmNy = 160;
        XmNwidth = 160;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object tfWavelength : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
!(BX)   _XmNtopOffset = 160;
        XmNx = 180;
        XmNy = 160;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vTextFieldCB();
        XmNlosingFocusCallback = procedure vTextFieldCB();
        XmNactivateCallback = procedure vTextFieldCB();
    };
};

object tfDetSwing : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
!(BX)   _XmNtopOffset = 120;
        XmNx = 180;
        XmNy = 120;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vTextFieldCB();
        XmNlosingFocusCallback = procedure vTextFieldCB();
        XmNactivateCallback = procedure vTextFieldCB();
    };
};

object lbDetSwing : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNlabelString = compound_string("Det swing:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 20;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfDetSwing;
        XmNtopWidget = XmTextField tfDetSwing;
        XmNx = 0;
        XmNy = 120;
        XmNwidth = 160;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object lbDetDist : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNlabelString = compound_string("Det dist:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 20;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfDetDist;
        XmNtopWidget = XmTextField tfDetDist;
        XmNx = 0;
        XmNy = 80;
        XmNwidth = 160;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object tfDetDist : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
!(BX)   _XmNtopOffset = 80;
        XmNx = 180;
        XmNy = 80;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vTextFieldCB();
        XmNlosingFocusCallback = procedure vTextFieldCB();
        XmNactivateCallback = procedure vTextFieldCB();
    };
};

object tfRotEnd : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
!(BX)   _XmNtopOffset = 40;
        XmNx = 180;
        XmNy = 40;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vTextFieldCB();
        XmNlosingFocusCallback = procedure vTextFieldCB();
        XmNactivateCallback = procedure vTextFieldCB();
    };
};

object lbRotEnd : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNlabelString = compound_string("Rot end:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 20;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfRotEnd;
        XmNtopWidget = XmTextField tfRotEnd;
        XmNx = 0;
        XmNy = 40;
        XmNwidth = 160;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object tfRotStart : XmTextField widget {
    arguments {
        XmNvalue = "?";
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 0;
!(BX)   _XmNtopOffset = 0;
        XmNx = 180;
        XmNy = 0;
        XmNwidth = 100;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure vTextFieldCB();
        XmNlosingFocusCallback = procedure vTextFieldCB();
        XmNactivateCallback = procedure vTextFieldCB();
    };
};

object lbRotStart : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNlabelString = compound_string("Rot start:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 20;
        XmNtopOffset = 0;
        XmNrightWidget = XmTextField tfRotStart;
        XmNtopWidget = XmTextField tfRotStart;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 160;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object foMainMid : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
!(BX)   _XmNpaneMinimum = 1;
        XmNpositionIndex = 1;
!(BX)   _XmNpaneMaximum = 200;
        XmNallowResize = true;
        XmNwidth = 280;
!(BX)   _XmNheight = 200;
    };
    controls {
         managed XmLabel lbRotStart;
         managed XmTextField tfRotStart;
         managed XmLabel lbRotEnd;
         managed XmTextField tfRotEnd;
         managed XmTextField tfDetDist;
         managed XmLabel lbDetDist;
         managed XmLabel lbDetSwing;
         managed XmTextField tfDetSwing;
         managed XmTextField tfWavelength;
         managed XmLabel lbWavelength;
    };
    callbacks {
    };
};

object pwMain : XmPanedWindow widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNrightPosition = 28;
        XmNbottomPosition = 67;
        XmNleftOffset = 0;
        XmNtopOffset = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 286;
        XmNheight = 480;
    };
    controls {
         managed XmForm foMainTop;
         managed XmForm foMainMid;
    };
    callbacks {
    };
};

object daImageSmall : XmDrawingArea widget {
    arguments {
!(BX)   _XmNbackground = color('grey75');
        XmNx = 3;
        XmNy = 3;
        XmNwidth = 283;
        XmNheight = 225;
    };
    controls {
    };
    callbacks {
    };
};

object frImageSmall : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 5;
        XmNrightWidget = XmFrame frImageBig;
        XmNtopWidget = XmPanedWindow pwMain;
        XmNx = 0;
        XmNy = 485;
        XmNwidth = 289;
        XmNheight = 231;
    };
    controls {
         managed XmDrawingArea daImageSmall;
    };
    callbacks {
    };
};

object form : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 1021;
        XmNheight = 716;
    };
    controls {
         managed XmFrame frImageSmall;
         managed XmPanedWindow pwMain;
         managed XmFrame frImageBig;
    };
    callbacks {
    };
};

object mainWindow : XmMainWindow widget {
    arguments {
        XmNx = 43;
        XmNy = 511;
        XmNwidth = 1021;
        XmNheight = 751;
    };
    controls {
!(BX)         unmanaged XmDialogShell xmDialogShell6;
!(BX)         unmanaged XmDialogShell xmDialogShell5;
!(BX)         unmanaged XmDialogShell xmDialogShell1;
!(BX)         unmanaged XmDialogShell xmDialogShell9;
!(BX)         unmanaged XmDialogShell xmDialogShell8;
!(BX)         unmanaged XmDialogShell xmDialogShell2;
!(BX)         unmanaged XmDialogShell xmDialogShell4;
!(BX)         unmanaged XmDialogShell xmDialogShell3;
!(BX)         unmanaged XmDialogShell xmDialogShell;
         managed XmMenuBar menuBar;
         managed XmForm form;
    };
    callbacks {
    };
};

!(BX)object dtdisplay : TopLevelShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "d*TREK - dtdisplay";
!(BX)        _XmNiconName = "dtdisplay";
!(BX)        XmNx = 43;
!(BX)        XmNy = 868;
!(BX)        XmNwidth = 1021;
!(BX)        XmNheight = 751;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};
end module;
