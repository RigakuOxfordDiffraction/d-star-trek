//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for MainWindow
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 2006 Rigaku
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// MainWindow.cc           Initial author: J.W. Pflugrath           9-Apr-1997
//    This file contains the main window of dtprocess.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/MainW.h>
#include <Xm/DialogS.h>
#include <Xm/MwmUtil.h>
#include <Xm/SelectioB.h>
#include <Xm/Form.h>
#include <Xm/MessageB.h>
#include <Xm/FileSB.h>
#include <Xm/RowColumn.h>
#include <Xm/CascadeB.h>
#include <Xm/PushB.h>
#include <Xm/Separator.h>
#include <Xm/ToggleB.h>
#include <Xm/Frame.h>
#include <Xm/Label.h>
#include <Xm/ArrowB.h>
#include <Xm/TextF.h>
#include <Xm/ScrolledW.h>
#include <Xm/Text.h>
#include <Xm/DrawingA.h>
#include "MainWindow.h"
#include "CUIheaderEdit.h"
#include "CUItextnumArrow.h"
#include "CUIfileFilter.h"
#include "CUIscrolledlist.h"
#include "CUIom9.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>
#include <unistd.h>
#include "Dtrek.h"
#include "dtreksys.h"
#include "Cstring.h"
#include "Crefine.h"
#include <Xm/List.h>
#include <Xm/Protocols.h>

using namespace std;

Cstring MainWindow::ms_sDefaultHeaderTemplateFile = "DTPROCESS_HEADER";
Cstring MainWindow::ms_sDtprocess = "";
Cstring MainWindow::ms_sLockFile           = "dtprocess.lock";
Cstring MainWindow::ms_sSetupOptions       = "DTP_SETUP_OPTIONS";
Cstring MainWindow::ms_sDtfindOptions      = "DTP_DTFIND_OPTIONS";
Cstring MainWindow::ms_sDtindexOptions     = "DTP_DTINDEX_OPTIONS";
Cstring MainWindow::ms_sDtrefineOptions    = "DTP_DTREFINE_OPTIONS";
Cstring MainWindow::ms_sDtrefineMacro[]    = { 
  "DTP_DTREFINE_INTER",
  "DTP_DTREFINE_MACRO1",
  "DTP_DTREFINE_MACRO2",
  "DTP_DTREFINE_MACRO3",
  "DTP_DTREFINE_MACRO4",
  "DTP_DTREFINE_MACRO5",
  "DTP_DTREFINE_MACRO6",
  "DTP_DTREFINE_MACRO7",
  "DTP_DTREFINE_MACRO8" 
  };
Cstring MainWindow::ms_sDtpredictOptions   = "DTP_DTPREDICT_OPTIONS";
Cstring MainWindow::ms_sDtintegrateOptions = "DTP_DTINTEGRATE_OPTIONS";
Cstring MainWindow::ms_sDtintegrateSpecial = "DTP_DTINTEGRATE_SPECIAL";
Cstring MainWindow::ms_sDtmergeOptions     = "DTP_DTMERGE_OPTIONS";
Cstring MainWindow::ms_sDtscaleOptions     = "DTP_DTSCALE_OPTIONS";
Cstring MainWindow::ms_sDtorientOptions    = "DTP_DTORIENT_OPTIONS";
Cstring MainWindow::ms_sDtstrategyOptions  = "DTP_DTSTRATEGY_OPTIONS";
Cstring MainWindow::ms_sDtNoNe             = "NoNe";

// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean MainWindow::_initAppDefaults = True;
UIAppDefault  MainWindow::_appDefaults[] = {
    {"xmDialogShellHeaderEdit", NULL, "title", NULL},
    {"mbProgress", NULL, "dialogTitle", NULL},
    {"mbProgress", NULL, "cancelLabelString", NULL},
    {"mbProgress", NULL, "messageString", NULL},
    {"mbError", NULL, "dialogTitle", NULL},
    {"xmDialogShellFileFilter", NULL, "title", NULL},
    {"cbFile", NULL, "labelString", NULL},
    {"pbFileOpen", NULL, "labelString", NULL},
    {"pbFileSaveAs", NULL, "labelString", NULL},
    {"pbFileHeader", NULL, "labelString", NULL},
    {"pbFileTemplate", NULL, "labelString", NULL},
    {"pbFileReflnlist", NULL, "labelString", NULL},
    {"pbFileLogfile", NULL, "labelString", NULL},
    {"pbFilePrint", NULL, "labelString", NULL},
    {"pbFileCD", NULL, "labelString", NULL},
    {"pbFileMkdir", NULL, "labelString", NULL},
    {"pbFileExit", NULL, "labelString", NULL},
    {"cbEdit", NULL, "labelString", NULL},
    {"pbEditHeader", NULL, "labelString", NULL},
    {"cbEditClear", NULL, "labelString", NULL},
    {"pbEditClearAll", NULL, "labelString", NULL},
    {"pbEditClearSelected", NULL, "labelString", NULL},
    {"pbEditClearCommand", NULL, "labelString", NULL},
    {"cbView", NULL, "labelString", NULL},
    {"pbViewHeader", NULL, "labelString", NULL},
    {"pbViewLogfile", NULL, "labelString", NULL},
    {"tbViewNumAdjust", NULL, "labelString", NULL},
    {"tbViewNumAdjust", NULL, "selectColor", NULL},
    {"tbViewCommand", NULL, "labelString", NULL},
    {"tbViewCommand", NULL, "selectColor", NULL},
    {"pbUtilsDisplay", NULL, "labelString", NULL},
    {"pbUtilsCollect", NULL, "labelString", NULL},
    {"pbUtilsPurge", NULL, "labelString", NULL},
    {"pbUtilsCommand1", NULL, "labelString", NULL},
    {"pbUtilsCommand2", NULL, "labelString", NULL},
    {"pbUtilsCommand3", NULL, "labelString", NULL},
    {"pbUtilsCommand4", NULL, "labelString", NULL},
    {"pbUtilsCommand5", NULL, "labelString", NULL},
    {"pbUtilsCommand6", NULL, "labelString", NULL},
    {"cbHelp", NULL, "labelString", NULL},
    {"pbHelpHelp", NULL, "labelString", NULL},
    {"pbHelpThisMenu", NULL, "labelString", NULL},
    {"pbHelpUpdate", NULL, "labelString", NULL},
    {"pbHelpAbout", NULL, "labelString", NULL},
    {"pbLogfileClear", NULL, "labelString", NULL},
    {"pbLogfileNo", NULL, "labelString", NULL},
    {"pbLogfileReturn", NULL, "labelString", NULL},
    {"pbLogfileYes", NULL, "labelString", NULL},
    {"tbLogfileAutoscroll", NULL, "set", NULL},
    {"tbLogfileAutoscroll", NULL, "labelString", NULL},
    {"tbLogfileAutoscroll", NULL, "selectColor", NULL},
    {"lbLogfileInput", NULL, "labelString", NULL},
    {"pbLogfileAbort", NULL, "background", NULL},
    {"pbLogfileAbort", NULL, "labelString", NULL},
    {"lbLogfileSearch", NULL, "labelString", NULL},
    {"tfLogfileSearch", NULL, "value", NULL},
    {"txLogfile", NULL, "background", NULL},
    {"txLogfile", NULL, "fontList", NULL},
    {"pbLogfileDismiss", NULL, "labelString", NULL},
    {"cslLogfile", "pbDeselectAll", "labelString", NULL},
    {"cslLogfile", "pbSelectAll", "labelString", NULL},
    {"cslLogfile", "lbTitle", "labelString", NULL},
    {"tbStrategyAnom", NULL, "set", NULL},
    {"tbStrategyAnom", NULL, "labelString", NULL},
    {"tbStrategyAnom", NULL, "selectColor", NULL},
    {"tbStrategyRef", NULL, "set", NULL},
    {"tbStrategyRef", NULL, "labelString", NULL},
    {"tbStrategyRef", NULL, "selectColor", NULL},
    {"tfStrategyPredicted", NULL, "value", NULL},
    {"tbStrategyPredicted", NULL, "set", NULL},
    {"tbStrategyPredicted", NULL, "labelString", NULL},
    {"tbStrategyPredicted", NULL, "selectColor", NULL},
    {"tbStrategyPrevious", NULL, "set", NULL},
    {"tbStrategyPrevious", NULL, "labelString", NULL},
    {"tbStrategyPrevious", NULL, "selectColor", NULL},
    {"tfStrategyPrevious", NULL, "value", NULL},
    {"pbStrategyRun", NULL, "labelString", NULL},
    {"tbStrategyList", NULL, "set", NULL},
    {"tbStrategyList", NULL, "labelString", NULL},
    {"tbStrategyList", NULL, "selectColor", NULL},
    {"tfStrategyRotStepFine", NULL, "value", NULL},
    {"tfStrategyRotStepCoarse", NULL, "value", NULL},
    {"tfStrategyResolution2", NULL, "value", NULL},
    {"tfStrategyResolution1", NULL, "value", NULL},
    {"tfStrategyRotRangeMax", NULL, "value", NULL},
    {"tfStrategyCompleteness", NULL, "value", NULL},
    {"tfStrategyLScale", NULL, "value", NULL},
    {"tfStrategyRotEnd", NULL, "value", NULL},
    {"tfStrategyRotStart", NULL, "value", NULL},
    {"lbStrategyRotStep", NULL, "labelString", NULL},
    {"lbStrategyResolution", NULL, "labelString", NULL},
    {"lbStrategyRotRangeMax", NULL, "labelString", NULL},
    {"lbStrategyCompleteness", NULL, "labelString", NULL},
    {"lbStrategyLScale", NULL, "labelString", NULL},
    {"lbStrategyRot", NULL, "labelString", NULL},
    {"lbMode", NULL, "labelString", NULL},
    {"tbScaleScaleAnom", NULL, "labelString", NULL},
    {"tbScaleScaleAnom", NULL, "selectColor", NULL},
    {"tfScaleResolution1", NULL, "value", NULL},
    {"tfScaleResolution2", NULL, "value", NULL},
    {"lbScaleResolution", NULL, "labelString", NULL},
    {"lbScaleUnavgOutput", NULL, "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "om9", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb8", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb7", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb6", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb5", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb4", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb3", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb2", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb1", "labelString", NULL},
    {"cUIom9ScaleUnavgOutput", "pb0", "labelString", NULL},
    {"tbScaleNoHeader", NULL, "set", NULL},
    {"tbScaleNoHeader", NULL, "labelString", NULL},
    {"tbScaleNoHeader", NULL, "selectColor", NULL},
    {"tbScaleTexsan", NULL, "set", NULL},
    {"tbScaleTexsan", NULL, "labelString", NULL},
    {"tbScaleTexsan", NULL, "selectColor", NULL},
    {"tfScaleAbscorReject", NULL, "value", NULL},
    {"lbScaleAbscorReject", NULL, "labelString", NULL},
    {"lbScaleAbscor", NULL, "labelString", NULL},
    {"cUIom9ScaleAbscor", "om9", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb8", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb7", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb6", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb5", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb4", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb3", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb2", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb1", "labelString", NULL},
    {"cUIom9ScaleAbscor", "pb0", "labelString", NULL},
    {"pbScaleUnAvg", NULL, "labelString", NULL},
    {"tfScaleUnAvg", NULL, "value", NULL},
    {"pbScaleMergeFile", NULL, "labelString", NULL},
    {"tfScaleMergeFile", NULL, "value", NULL},
    {"lbScaleMergeFile", NULL, "labelString", NULL},
    {"tbScaleUnaverage", NULL, "labelString", NULL},
    {"tbScaleUnaverage", NULL, "selectColor", NULL},
    {"lbScaleCycles", NULL, "labelString", NULL},
    {"tfScaleCycles", NULL, "value", NULL},
    {"tfScaleFixedBatch", NULL, "value", NULL},
    {"lbScaleFixedBatch", NULL, "labelString", NULL},
    {"tfScaleFixedB", NULL, "value", NULL},
    {"tfScaleFixedScale", NULL, "value", NULL},
    {"lbScaleFixedScale", NULL, "labelString", NULL},
    {"lbScaleFixedB", NULL, "labelString", NULL},
    {"tfScaleSigma", NULL, "value", NULL},
    {"lbScaleSigma", NULL, "labelString", NULL},
    {"pbScaleRun", NULL, "labelString", NULL},
    {"lbScaleErrorAdd", NULL, "labelString", NULL},
    {"tfScaleErrorAdd", NULL, "value", NULL},
    {"tfScaleReject", NULL, "value", NULL},
    {"lbScaleReject", NULL, "labelString", NULL},
    {"tbScaleAnom", NULL, "labelString", NULL},
    {"tbScaleAnom", NULL, "selectColor", NULL},
    {"tbScaleFixB", NULL, "labelString", NULL},
    {"tbScaleFixB", NULL, "selectColor", NULL},
    {"tfScaleErrorMul", NULL, "value", NULL},
    {"lbScaleErrorMul", NULL, "labelString", NULL},
    {"pbMergeMergeFile", NULL, "labelString", NULL},
    {"tfMergeMergeFile", NULL, "value", NULL},
    {"lbMergeMergeFile", NULL, "labelString", NULL},
    {"pbMergeRun", NULL, "labelString", NULL},
    {"lbIntegratePrerefine", NULL, "labelString", NULL},
    {"cUIom9IntegratePrerefine", "om9", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb8", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb8", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb7", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb7", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb6", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb6", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb5", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb5", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb4", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb4", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb3", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb3", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb2", "sensitive", NULL},
    {"cUIom9IntegratePrerefine", "pb2", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb1", "labelString", NULL},
    {"cUIom9IntegratePrerefine", "pb0", "labelString", NULL},
    {"tbIntegrateNopurge", NULL, "sensitive", NULL},
    {"tbIntegrateNopurge", NULL, "set", NULL},
    {"tbIntegrateNopurge", NULL, "labelString", NULL},
    {"tbIntegrateNopurge", NULL, "selectColor", NULL},
    {"tfIntegrateMinPeakRadius", NULL, "value", NULL},
    {"lbIntegrateMinPeakRadius", NULL, "labelString", NULL},
    {"cUIom9IntegrateSpecial", "om9", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb8", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb7", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb6", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb5", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb4", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb3", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb2", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb1", "labelString", NULL},
    {"cUIom9IntegrateSpecial", "pb0", "labelString", NULL},
    {"pbIntegrateRun", NULL, "labelString", NULL},
    {"tbIntegrateDisplay", NULL, "set", NULL},
    {"tbIntegrateDisplay", NULL, "labelString", NULL},
    {"tbIntegrateDisplay", NULL, "selectColor", NULL},
    {"tfIntegrateDump", NULL, "value", NULL},
    {"tfIntegrateProfSize2", NULL, "value", NULL},
    {"tfIntegrateProfSize1", NULL, "value", NULL},
    {"tfIntegrateResolution2", NULL, "value", NULL},
    {"tfIntegrateResolution1", NULL, "value", NULL},
    {"tbIntegrateSpecial1", NULL, "set", NULL},
    {"tbIntegrateSpecial1", NULL, "labelString", NULL},
    {"tbIntegrateSpecial1", NULL, "selectColor", NULL},
    {"tbIntegrateSpecial2", NULL, "set", NULL},
    {"tbIntegrateSpecial2", NULL, "labelString", NULL},
    {"tbIntegrateSpecial2", NULL, "selectColor", NULL},
    {"tbIntegrateSpecial3", NULL, "set", NULL},
    {"tbIntegrateSpecial3", NULL, "labelString", NULL},
    {"tbIntegrateSpecial3", NULL, "selectColor", NULL},
    {"tbIntegrateSpecial4", NULL, "set", NULL},
    {"tbIntegrateSpecial4", NULL, "labelString", NULL},
    {"tfIntegratePadding", NULL, "value", NULL},
    {"tfIntegrateWindow2", NULL, "value", NULL},
    {"tfIntegrateWindow1", NULL, "value", NULL},
    {"tfIntegrateBatchNum", NULL, "value", NULL},
    {"tfIntegrateBatchPrefix", NULL, "value", NULL},
    {"tfIntegrateWait", NULL, "value", NULL},
    {"tfIntegrateSeqEnd", NULL, "value", NULL},
    {"tfIntegrateSeqStart", NULL, "value", NULL},
    {"lbIntegrateDump", NULL, "labelString", NULL},
    {"lbIntegrateProfSize", NULL, "labelString", NULL},
    {"lbIntegrateResolution", NULL, "labelString", NULL},
    {"lbIntegratePadding", NULL, "labelString", NULL},
    {"lbIntegrateWindow", NULL, "labelString", NULL},
    {"lbIntegrateBatchNum", NULL, "labelString", NULL},
    {"lbIntegrateBatchPrefix", NULL, "labelString", NULL},
    {"lbIntegrateWait", NULL, "labelString", NULL},
    {"lbIntegrateSeq", NULL, "labelString", NULL},
    {"lbOrient1", NULL, "labelString", NULL},
    {"lbOrientRotDegrees", NULL, "labelString", NULL},
    {"tfOrientRot", NULL, "value", NULL},
    {"cUIomOrientLab3", "pb8", "labelString", NULL},
    {"cUIomOrientLab3", "pb7", "labelString", NULL},
    {"cUIomOrientLab3", "pb6", "labelString", NULL},
    {"cUIomOrientLab3", "pb5", "labelString", NULL},
    {"cUIomOrientLab3", "pb4", "labelString", NULL},
    {"cUIomOrientLab3", "pb3", "labelString", NULL},
    {"cUIomOrientLab3", "pb2", "labelString", NULL},
    {"cUIomOrientLab3", "pb1", "labelString", NULL},
    {"cUIomOrientLab3", "pb0", "labelString", NULL},
    {"lbOrientRot", NULL, "labelString", NULL},
    {"cUIomOrientLab2", "pb8", "labelString", NULL},
    {"cUIomOrientLab2", "pb7", "labelString", NULL},
    {"cUIomOrientLab2", "pb6", "labelString", NULL},
    {"cUIomOrientLab2", "pb5", "labelString", NULL},
    {"cUIomOrientLab2", "pb4", "labelString", NULL},
    {"cUIomOrientLab2", "pb3", "labelString", NULL},
    {"cUIomOrientLab2", "pb2", "labelString", NULL},
    {"cUIomOrientLab2", "pb1", "labelString", NULL},
    {"cUIomOrientLab2", "pb0", "labelString", NULL},
    {"cUIomOrientLab1", "pb8", "labelString", NULL},
    {"cUIomOrientLab1", "pb7", "labelString", NULL},
    {"cUIomOrientLab1", "pb6", "labelString", NULL},
    {"cUIomOrientLab1", "pb5", "labelString", NULL},
    {"cUIomOrientLab1", "pb4", "labelString", NULL},
    {"cUIomOrientLab1", "pb3", "labelString", NULL},
    {"cUIomOrientLab1", "pb2", "labelString", NULL},
    {"cUIomOrientLab1", "pb1", "labelString", NULL},
    {"cUIomOrientLab1", "pb0", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb8", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb7", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb6", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb5", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb4", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb3", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb2", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb1", "labelString", NULL},
    {"cUIomOrientCrystal2", "pb0", "labelString", NULL},
    {"lbOrientLab2", NULL, "labelString", NULL},
    {"lbOrientLab1", NULL, "labelString", NULL},
    {"lbOrientCrystal2", NULL, "labelString", NULL},
    {"lbOrientCrystal1", NULL, "labelString", NULL},
    {"cUIomOrientCrystal1", "pb8", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb7", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb6", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb5", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb4", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb3", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb2", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb1", "labelString", NULL},
    {"cUIomOrientCrystal1", "pb0", "labelString", NULL},
    {"pbOrientRun", NULL, "labelString", NULL},
    {"lbOrient", NULL, "labelString", NULL},
    {"tfPredictMosaicity", NULL, "value", NULL},
    {"lbPredictMosaicity", NULL, "labelString", NULL},
    {"pbPredictRun", NULL, "labelString", NULL},
    {"lbPredictResolution", NULL, "labelString", NULL},
    {"tfPredictResolution2", NULL, "value", NULL},
    {"tfPredictResolution1", NULL, "value", NULL},
    {"tfPredictSeqStart", NULL, "value", NULL},
    {"tfPredictSeqEnd", NULL, "value", NULL},
    {"lbPredictSeq", NULL, "labelString", NULL},
    {"tbPredictList", NULL, "labelString", NULL},
    {"tbPredictList", NULL, "selectColor", NULL},
    {"tbPredictNonunf", NULL, "labelString", NULL},
    {"tbPredictNonunf", NULL, "selectColor", NULL},
    {"tfPredictRotEnd", NULL, "value", NULL},
    {"tfPredictRotStart", NULL, "value", NULL},
    {"lbPredictRot", NULL, "labelString", NULL},
    {"tbPredictDisplay", NULL, "set", NULL},
    {"tbPredictDisplay", NULL, "labelString", NULL},
    {"tbPredictDisplay", NULL, "selectColor", NULL},
    {"lbRefineRefln", NULL, "labelString", NULL},
    {"cUIom9RefineRefln", "om9", "labelString", NULL},
    {"cUIom9RefineRefln", "pb8", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb8", "labelString", NULL},
    {"cUIom9RefineRefln", "pb7", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb7", "labelString", NULL},
    {"cUIom9RefineRefln", "pb6", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb6", "labelString", NULL},
    {"cUIom9RefineRefln", "pb5", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb5", "labelString", NULL},
    {"cUIom9RefineRefln", "pb4", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb4", "labelString", NULL},
    {"cUIom9RefineRefln", "pb3", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb3", "labelString", NULL},
    {"cUIom9RefineRefln", "pb2", "sensitive", NULL},
    {"cUIom9RefineRefln", "pb2", "labelString", NULL},
    {"cUIom9RefineRefln", "pb1", "labelString", NULL},
    {"cUIom9RefineRefln", "pb0", "labelString", NULL},
    {"tbRefinePrompt", NULL, "set", NULL},
    {"tbRefinePrompt", NULL, "labelString", NULL},
    {"tbRefinePrompt", NULL, "selectColor", NULL},
    {"pbRefineRun", NULL, "labelString", NULL},
    {"tbRefineDisplay", NULL, "set", NULL},
    {"tbRefineDisplay", NULL, "labelString", NULL},
    {"tbRefineDisplay", NULL, "selectColor", NULL},
    {"cUIom9RefineMacros", "om9", "labelString", NULL},
    {"cUIom9RefineMacros", "pb8", "labelString", NULL},
    {"cUIom9RefineMacros", "pb7", "labelString", NULL},
    {"cUIom9RefineMacros", "pb6", "labelString", NULL},
    {"cUIom9RefineMacros", "pb5", "labelString", NULL},
    {"cUIom9RefineMacros", "pb4", "labelString", NULL},
    {"cUIom9RefineMacros", "pb3", "labelString", NULL},
    {"cUIom9RefineMacros", "pb2", "labelString", NULL},
    {"cUIom9RefineMacros", "pb1", "labelString", NULL},
    {"cUIom9RefineMacros", "pb0", "labelString", NULL},
    {"lbRefineMacros", NULL, "labelString", NULL},
    {"tbRefineTestMosaicity", NULL, "labelString", NULL},
    {"tbRefineTestMosaicity", NULL, "selectColor", NULL},
    {"tbRefineSourceRots", NULL, "labelString", NULL},
    {"tbRefineSourceRots", NULL, "selectColor", NULL},
    {"tbRefineCrystalMosaicity", NULL, "labelString", NULL},
    {"tbRefineCrystalMosaicity", NULL, "selectColor", NULL},
    {"tbRefineCrystalCell", NULL, "labelString", NULL},
    {"tbRefineCrystalCell", NULL, "selectColor", NULL},
    {"tbRefineDetAll", NULL, "labelString", NULL},
    {"tbRefineDetAll", NULL, "selectColor", NULL},
    {"tbRefineCrystalAll", NULL, "labelString", NULL},
    {"tbRefineCrystalAll", NULL, "selectColor", NULL},
    {"tfRefineRelWeight", NULL, "value", NULL},
    {"tfRefineCycles", NULL, "value", NULL},
    {"tfRefineReject3", NULL, "value", NULL},
    {"tfRefineReject2", NULL, "value", NULL},
    {"tfRefineReject1", NULL, "value", NULL},
    {"lbRefineCycles", NULL, "labelString", NULL},
    {"lbRefineRelWeight", NULL, "labelString", NULL},
    {"lbRefineReject", NULL, "labelString", NULL},
    {"tbRefineSourceWavelength", NULL, "labelString", NULL},
    {"tbRefineSourceWavelength", NULL, "selectColor", NULL},
    {"tbRefineSourceRot2", NULL, "labelString", NULL},
    {"tbRefineSourceRot2", NULL, "selectColor", NULL},
    {"tbRefineSourceRot1", NULL, "labelString", NULL},
    {"tbRefineSourceRot1", NULL, "selectColor", NULL},
    {"tbRefineDetRots", NULL, "labelString", NULL},
    {"tbRefineDetRots", NULL, "selectColor", NULL},
    {"tbRefineDetTrans", NULL, "labelString", NULL},
    {"tbRefineDetTrans", NULL, "selectColor", NULL},
    {"tbRefineDetRot3", NULL, "labelString", NULL},
    {"tbRefineDetRot3", NULL, "selectColor", NULL},
    {"tbRefineDetRot2", NULL, "labelString", NULL},
    {"tbRefineDetRot2", NULL, "selectColor", NULL},
    {"tbRefineDetRot1", NULL, "labelString", NULL},
    {"tbRefineDetRot1", NULL, "selectColor", NULL},
    {"tbRefineDetTrans3", NULL, "labelString", NULL},
    {"tbRefineDetTrans3", NULL, "selectColor", NULL},
    {"tbRefineDetTrans2", NULL, "labelString", NULL},
    {"tbRefineDetTrans2", NULL, "selectColor", NULL},
    {"tbRefineDetTrans1", NULL, "labelString", NULL},
    {"tbRefineDetTrans1", NULL, "selectColor", NULL},
    {"lbRefineSource", NULL, "labelString", NULL},
    {"lbRefineDet", NULL, "labelString", NULL},
    {"tbRefineCrystalRots", NULL, "labelString", NULL},
    {"tbRefineCrystalRots", NULL, "selectColor", NULL},
    {"tbRefineCrystalAngles", NULL, "labelString", NULL},
    {"tbRefineCrystalAngles", NULL, "selectColor", NULL},
    {"tbRefineCrystalLengths", NULL, "labelString", NULL},
    {"tbRefineCrystalLengths", NULL, "selectColor", NULL},
    {"tbRefineCrystalRot2", NULL, "labelString", NULL},
    {"tbRefineCrystalRot2", NULL, "selectColor", NULL},
    {"tbRefineCrystalRot1", NULL, "labelString", NULL},
    {"tbRefineCrystalRot1", NULL, "selectColor", NULL},
    {"tbRefineCrystalRot3", NULL, "labelString", NULL},
    {"tbRefineCrystalRot3", NULL, "selectColor", NULL},
    {"tbRefineCrystalGammastar", NULL, "labelString", NULL},
    {"tbRefineCrystalGammastar", NULL, "selectColor", NULL},
    {"tbRefineCrystalBetastar", NULL, "labelString", NULL},
    {"tbRefineCrystalBetastar", NULL, "selectColor", NULL},
    {"tbRefineCrystalAlphastar", NULL, "labelString", NULL},
    {"tbRefineCrystalAlphastar", NULL, "selectColor", NULL},
    {"tbRefineCrystalCstar", NULL, "labelString", NULL},
    {"tbRefineCrystalCstar", NULL, "selectColor", NULL},
    {"tbRefineCrystalBstar", NULL, "labelString", NULL},
    {"tbRefineCrystalBstar", NULL, "selectColor", NULL},
    {"lbRefineCrystal", NULL, "labelString", NULL},
    {"tbRefineCrystalAstar", NULL, "labelString", NULL},
    {"tbRefineCrystalAstar", NULL, "selectColor", NULL},
    {"tfRefineResolution2", NULL, "value", NULL},
    {"tfRefineResolution1", NULL, "value", NULL},
    {"tfRefineSigma", NULL, "value", NULL},
    {"lbRefineResolution", NULL, "labelString", NULL},
    {"lbRefineSigma", NULL, "labelString", NULL},
    {"lbIndexMethod", NULL, "labelString", NULL},
    {"tbIndexDiffs", NULL, "set", NULL},
    {"tbIndexDiffs", NULL, "labelString", NULL},
    {"tbIndexDiffs", NULL, "selectColor", NULL},
    {"omIndexMethod", "om9", "labelString", NULL},
    {"omIndexMethod", "pb8", "sensitive", NULL},
    {"omIndexMethod", "pb8", "labelString", NULL},
    {"omIndexMethod", "pb7", "sensitive", NULL},
    {"omIndexMethod", "pb7", "labelString", NULL},
    {"omIndexMethod", "pb6", "sensitive", NULL},
    {"omIndexMethod", "pb6", "labelString", NULL},
    {"omIndexMethod", "pb5", "sensitive", NULL},
    {"omIndexMethod", "pb5", "labelString", NULL},
    {"omIndexMethod", "pb4", "sensitive", NULL},
    {"omIndexMethod", "pb4", "labelString", NULL},
    {"omIndexMethod", "pb3", "sensitive", NULL},
    {"omIndexMethod", "pb3", "labelString", NULL},
    {"omIndexMethod", "pb2", "labelString", NULL},
    {"omIndexMethod", "pb1", "labelString", NULL},
    {"omIndexMethod", "pb0", "labelString", NULL},
    {"tfIndexSigma", NULL, "value", NULL},
    {"tfIndexResolution2", NULL, "value", NULL},
    {"tfIndexResolution1", NULL, "value", NULL},
    {"lbIndexSigma", NULL, "labelString", NULL},
    {"tbIndexAdvanced", NULL, "set", NULL},
    {"tbIndexAdvanced", NULL, "labelString", NULL},
    {"tbIndexAdvanced", NULL, "selectColor", NULL},
    {"tfIndexMaxResid", NULL, "value", NULL},
    {"lbIndexMaxResid", NULL, "labelString", NULL},
    {"tfIndexSpacegroup", NULL, "value", NULL},
    {"lbIndexSpacegroup", NULL, "labelString", NULL},
    {"tbIndexKnown", NULL, "set", NULL},
    {"tbIndexKnown", NULL, "labelString", NULL},
    {"tbIndexKnown", NULL, "selectColor", NULL},
    {"pbIndexRun", NULL, "labelString", NULL},
    {"tbIndexPrompt", NULL, "set", NULL},
    {"tbIndexPrompt", NULL, "labelString", NULL},
    {"tbIndexPrompt", NULL, "selectColor", NULL},
    {"tbIndexList", NULL, "set", NULL},
    {"tbIndexList", NULL, "labelString", NULL},
    {"tbIndexList", NULL, "selectColor", NULL},
    {"tfIndexErrorAngle3", NULL, "value", NULL},
    {"tfIndexErrorAngle2", NULL, "value", NULL},
    {"tfIndexErrorAngle1", NULL, "value", NULL},
    {"tfIndexErrorLength3", NULL, "value", NULL},
    {"tfIndexErrorLength2", NULL, "value", NULL},
    {"tfIndexErrorLength1", NULL, "value", NULL},
    {"tfIndexGrid", NULL, "value", NULL},
    {"tfIndexMaxCell", NULL, "value", NULL},
    {"tfIndexMaxDiffs", NULL, "value", NULL},
    {"lbIndexErrorAngle", NULL, "labelString", NULL},
    {"lbIndexErrorLength", NULL, "labelString", NULL},
    {"lbIndexGrid", NULL, "labelString", NULL},
    {"lbIndexMaxCell", NULL, "labelString", NULL},
    {"lbIndexMaxDiffs", NULL, "labelString", NULL},
    {"tfFindResolution1", NULL, "value", NULL},
    {"tfFindResolution2", NULL, "value", NULL},
    {"lbFindResolution", NULL, "labelString", NULL},
    {"tbFindMore", NULL, "labelString", NULL},
    {"pbFindRun", NULL, "labelString", NULL},
    {"tbFind3D", NULL, "set", NULL},
    {"tbFind3D", NULL, "labelString", NULL},
    {"tbFind3D", NULL, "selectColor", NULL},
    {"tbFindDisplay", NULL, "set", NULL},
    {"tbFindDisplay", NULL, "labelString", NULL},
    {"tbFindDisplay", NULL, "selectColor", NULL},
    {"tfFindDump", NULL, "value", NULL},
    {"tfFindRect4", NULL, "value", NULL},
    {"tfFindRect3", NULL, "value", NULL},
    {"tfFindRect2", NULL, "value", NULL},
    {"tfFindRect1", NULL, "value", NULL},
    {"tfFindCircle4", NULL, "value", NULL},
    {"tfFindCircle3", NULL, "value", NULL},
    {"tfFindCircle2", NULL, "value", NULL},
    {"tfFindCircle1", NULL, "value", NULL},
    {"tfFindBackRect2", NULL, "value", NULL},
    {"tfFindBackRect1", NULL, "value", NULL},
    {"tfFindPadding", NULL, "value", NULL},
    {"tfFindWindow2", NULL, "value", NULL},
    {"tfFindWindow1", NULL, "value", NULL},
    {"tfFindFilter", NULL, "value", NULL},
    {"tfFindMin", NULL, "value", NULL},
    {"tfFindSigma", NULL, "value", NULL},
    {"tfFindSeqEnd", NULL, "value", NULL},
    {"tfFindSeqStart", NULL, "value", NULL},
    {"lbFindDump", NULL, "labelString", NULL},
    {"lbFindRect", NULL, "labelString", NULL},
    {"lbFindCircle", NULL, "labelString", NULL},
    {"lbFindBackRect", NULL, "labelString", NULL},
    {"lbFindPadding", NULL, "labelString", NULL},
    {"lbFindWindow", NULL, "labelString", NULL},
    {"lbFindFilter", NULL, "labelString", NULL},
    {"lbFindMin", NULL, "labelString", NULL},
    {"lbFindSigma", NULL, "labelString", NULL},
    {"lbFindSeq", NULL, "labelString", NULL},
    {"tbCalibrateModeSmall", NULL, "set", NULL},
    {"tbCalibrateModeSmall", NULL, "labelString", NULL},
    {"tbCalibrateModeSmall", NULL, "selectColor", NULL},
    {"tbCalibrateIndexPrompt", NULL, "set", NULL},
    {"tbCalibrateIndexPrompt", NULL, "labelString", NULL},
    {"tbCalibrateIndexPrompt", NULL, "selectColor", NULL},
    {"tfCalibratedTREKPrefix", NULL, "value", NULL},
    {"lbCalibratedTREKPrefix", NULL, "sensitive", NULL},
    {"lbCalibratedTREKPrefix", NULL, "labelString", NULL},
    {"tfCalibrateWindow2", NULL, "value", NULL},
    {"tfCalibrateWindow1", NULL, "value", NULL},
    {"lbCalibrateWindow", NULL, "sensitive", NULL},
    {"lbCalibrateWindow", NULL, "labelString", NULL},
    {"tfCalibrateResolution1", NULL, "value", NULL},
    {"tfCalibrateResolution2", NULL, "value", NULL},
    {"lbCalibrateResolution", NULL, "sensitive", NULL},
    {"lbCalibrateResolution", NULL, "labelString", NULL},
    {"lbCalibrateSpacegroup", NULL, "sensitive", NULL},
    {"lbCalibrateSpacegroup", NULL, "labelString", NULL},
    {"tfCalibrateSpacegroup", NULL, "value", NULL},
    {"lbCalibrateDetTheta", NULL, "sensitive", NULL},
    {"tfCalibrateDetTheta", NULL, "value", NULL},
    {"tfCalibrateDetDist", NULL, "value", NULL},
    {"lbCalibrateDetDist", NULL, "sensitive", NULL},
    {"lbCalibrateDetDist", NULL, "labelString", NULL},
    {"tfCalibrateTemplate", NULL, "value", NULL},
    {"lbCalibrateTemplate", NULL, "labelString", NULL},
    {"cUIomCalibrateSpatial", "om9", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb8", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb8", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb7", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb7", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb6", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb6", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb5", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb5", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb4", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb4", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb3", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb3", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb2", "sensitive", NULL},
    {"cUIomCalibrateSpatial", "pb2", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb1", "labelString", NULL},
    {"cUIomCalibrateSpatial", "pb0", "labelString", NULL},
    {"cUIomCalibrateNonunf", "om9", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb8", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb8", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb7", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb7", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb6", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb6", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb5", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb5", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb4", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb4", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb3", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb2", "sensitive", NULL},
    {"cUIomCalibrateNonunf", "pb2", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb1", "labelString", NULL},
    {"cUIomCalibrateNonunf", "pb0", "labelString", NULL},
    {"tfCalibrateNonunfNonunf", NULL, "value", NULL},
    {"lbCalibrateNonunfNonunf", NULL, "labelString", NULL},
    {"tfCalibrateNonunfDark", NULL, "value", NULL},
    {"lbCalibrateNonunfDark", NULL, "labelString", NULL},
    {"lbCalibrateNonunf", NULL, "labelString", NULL},
    {"tfCalibrateSpatialInterp", NULL, "value", NULL},
    {"lbCalibrateSpatialInterp", NULL, "labelString", NULL},
    {"tfCalibrateSpatialSimple2", NULL, "value", NULL},
    {"tfCalibrateSpatialSimple1", NULL, "value", NULL},
    {"lbCalibrateSpatialSimple", NULL, "labelString", NULL},
    {"lbCalibrateSpatial", NULL, "labelString", NULL},
    {"lbCalibrateDirectBeam", NULL, "labelString", NULL},
    {"tfCalibrateDirBeam2", NULL, "value", NULL},
    {"tfCalibrateDirBeam1", NULL, "value", NULL},
    {"pbCalibrateRun", NULL, "labelString", NULL},
    {"lbCommand", NULL, "labelString", NULL},
    {"tfCommand", NULL, "background", NULL},
    {"txOutput", NULL, "background", NULL},
    {"cslImages", "pbDeselectAll", "labelString", NULL},
    {"cslImages", "pbSelectAll", "labelString", NULL},
    {"cslHeader", "pbDeselectAll", "labelString", NULL},
    {"cslHeader", "lbTitle", "labelString", NULL},
    {"cslReflnlist", "pbDeselectAll", "labelString", NULL},
    {"cslReflnlist", "pbSelectAll", "labelString", NULL},
    {"cslReflnlist", "lbTitle", "labelString", NULL},
    {"pbCalibrate", NULL, "labelString", NULL},
    {"pbFind", NULL, "labelString", NULL},
    {"pbIndex", NULL, "labelString", NULL},
    {"pbRefine", NULL, "labelString", NULL},
    {"pbPredict", NULL, "labelString", NULL},
    {"pbIntegrate", NULL, "labelString", NULL},
    {"pbMerge", NULL, "labelString", NULL},
    {"pbScale", NULL, "labelString", NULL},
    {"pbOrient", NULL, "labelString", NULL},
    {"pbStrategy", NULL, "labelString", NULL},
    {"cUIomMode", "om9", "labelString", NULL},
    {"cUIomMode", "pb8", "sensitive", NULL},
    {"cUIomMode", "pb8", "labelString", NULL},
    {"cUIomMode", "pb7", "sensitive", NULL},
    {"cUIomMode", "pb7", "labelString", NULL},
    {"cUIomMode", "pb6", "labelString", NULL},
    {"cUIomMode", "pb5", "sensitive", NULL},
    {"cUIomMode", "pb5", "labelString", NULL},
    {"cUIomMode", "pb4", "sensitive", NULL},
    {"cUIomMode", "pb4", "labelString", NULL},
    {"cUIomMode", "pb3", "sensitive", NULL},
    {"cUIomMode", "pb3", "labelString", NULL},
    {"cUIomMode", "pb2", "labelString", NULL},
    {"cUIomMode", "pb1", "labelString", NULL},
    {"cUIomMode", "pb0", "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  MainWindow::_defaultMainWindowResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
MainWindow::MainWindow(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
MainWindow::MainWindow(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>

  m_hGC             = NULL;
  m_hPixmap         = 0;
  m_poHeader        = NULL;
  m_poXhelp         = NULL;
  m_poXcursor       = NULL;
  m_poXprop         = NULL;
  m_nSubProcessPID  = 0;
  m_pSubProcessStdIn= NULL;
  m_hIntervalId     = 0;

  char *pcTemp;

  pcTemp = getenv(ms_sDtprocess.string());
  if (NULL != pcTemp)
      {
	ms_sDtprocess = pcTemp;
      }
  m_poXprop       = new CXprop("DTDISPLAY_WINDOW_ID", ms_sDtprocess.string());

  pcTemp = getenv(ms_sDefaultHeaderTemplateFile.string());

  if (NULL != pcTemp)
    {
      ms_sDefaultHeaderTemplateFile = pcTemp;
    }

  // Save pointers to flowchart pushbuttons

  m_pwpbFlowChart[DTP_DLG_CALIBRATE] = &_pbCalibrate;
  m_pwpbFlowChart[DTP_DLG_FIND]      = &_pbFind;
  m_pwpbFlowChart[DTP_DLG_INDEX]     = &_pbIndex;
  m_pwpbFlowChart[DTP_DLG_REFINE]    = &_pbRefine;
  m_pwpbFlowChart[DTP_DLG_PREDICT]   = &_pbPredict;
  m_pwpbFlowChart[DTP_DLG_INTEGRATE] = &_pbIntegrate;
  m_pwpbFlowChart[DTP_DLG_MERGE]     = &_pbMerge;
  m_pwpbFlowChart[DTP_DLG_SCALE]     = &_pbScale;
  m_pwpbFlowChart[DTP_DLG_ORIENT]    = &_pbOrient;
  m_pwpbFlowChart[DTP_DLG_STRATEGY]  = &_pbStrategy;
 
  m_pwfrMain[DTP_DLG_CALIBRATE] = &_frCalibrate;
  m_pwfrMain[DTP_DLG_FIND]      = &_frFind;
  m_pwfrMain[DTP_DLG_INDEX]     = &_frIndex;
  m_pwfrMain[DTP_DLG_REFINE]    = &_frRefine;
  m_pwfrMain[DTP_DLG_PREDICT]   = &_frPredict;
  m_pwfrMain[DTP_DLG_INTEGRATE] = &_frIntegrate;
  m_pwfrMain[DTP_DLG_MERGE]     = &_frMerge;
  m_pwfrMain[DTP_DLG_SCALE]     = &_frScale;
  m_pwfrMain[DTP_DLG_ORIENT]    = &_frOrient;
  m_pwfrMain[DTP_DLG_STRATEGY]  = &_frStrategy;

  m_pwpbDialogRun[DTP_DLG_CALIBRATE] = &_pbCalibrateRun;
  m_pwpbDialogRun[DTP_DLG_FIND]      = &_pbFindRun;
  m_pwpbDialogRun[DTP_DLG_INDEX]     = &_pbIndexRun;
  m_pwpbDialogRun[DTP_DLG_REFINE]    = &_pbRefineRun;
  m_pwpbDialogRun[DTP_DLG_PREDICT]   = &_pbPredictRun;
  m_pwpbDialogRun[DTP_DLG_INTEGRATE] = &_pbIntegrateRun;
  m_pwpbDialogRun[DTP_DLG_MERGE]     = &_pbMergeRun;
  m_pwpbDialogRun[DTP_DLG_SCALE]     = &_pbScaleRun;
  m_pwpbDialogRun[DTP_DLG_ORIENT]    = &_pbOrientRun;
  m_pwpbDialogRun[DTP_DLG_STRATEGY]  = &_pbStrategyRun;  // Careful!

/*
  m_pwtfRefineMacros[1]              = &_tfRefineMacro1;
  m_pwtfRefineMacros[2]              = &_tfRefineMacro2;
  m_pwtfRefineMacros[3]              = &_tfRefineMacro3;
  m_pwtfRefineMacros[4]              = &_tfRefineMacro4;
  m_pwtfRefineMacros[5]              = &_tfRefineMacro5;
  m_pwtfRefineMacros[6]              = &_tfRefineMacro6;
  m_pwtfRefineMacros[7]              = &_tfRefineMacro7;
  m_pwtfRefineMacros[8]              = &_tfRefineMacro8;
*/
  m_nRefineMacro          = 0;
  m_nScaleAbscorMethod    = 0;

  m_bFCDialogRun          = FALSE;
  m_sHeaderName           = "";
  m_sHeaderDir            = sGetCWD();
  m_sHeaderMask           = m_sHeaderDir + "*.head";
  m_sImageName            = "";
  m_sImageDir             = m_sHeaderDir;
  m_sImageMask            = m_sImageDir + "*.img";
  m_sReflnlistName        = "";
  m_sReflnlistDir         = m_sHeaderDir;
  m_sReflnlistMask        = m_sHeaderDir + "*.ref";
  m_sLogfileName          = "";
  m_sLogfileDir           = m_sHeaderDir;
  m_sLogfileMask          = m_sHeaderDir + "*.log";
  m_sLogfileSearchString  = "";
  m_ucLogfileSearchDirection = XmARROW_UP;
  m_nLogfileType          = 0; // Unknown type
  m_lLogfileSize          = 0;
  m_lLogfileSizeShown     = 0;
  m_sFilePrintCommand     = "lpr ";

  m_sCalibrateSpatialDir  = m_sHeaderDir;
  m_sCalibrateSpatialName = m_sCalibrateSpatialDir  + "distor";
  m_sCalibrateSpatialMask = m_sCalibrateSpatialName + '*';
  m_sCalibrateNonunfDir   = m_sHeaderDir;
  m_sCalibrateNonunfName  = m_sCalibrateNonunfDir  + "*";
  m_sCalibrateNonunfMask  = m_sCalibrateNonunfName + '*';
  m_sCalibrateDarkDir     = m_sHeaderDir;
  m_sCalibrateDarkName    = m_sCalibrateDarkDir  + "dark";
  m_sCalibrateDarkMask    = m_sCalibrateDarkName + '*';
  m_sMergeMergeDir        = m_sHeaderDir;
  m_sMergeMergeName       = m_sMergeMergeDir + "dtmerge.ref"; 
  m_sMergeMergeMask       = m_sReflnlistMask;
  m_sScaleMergeDir        = m_sHeaderDir;
  m_sScaleMergeName       = m_sScaleMergeDir + "dtscale.ref";
  m_sScaleMergeMask       = m_sReflnlistMask;
  m_sScaleUnavgDir        = m_sHeaderDir;
  m_sScaleUnavgName       = m_sScaleUnavgDir + "dtunavg.ref"; 
  m_sScaleUnavgMask       = m_sReflnlistMask;
  m_sStrategyPreviousDir  = m_sReflnlistDir;
  m_sStrategyPreviousName = m_sReflnlistDir + "dtstrategy.ref";
  m_sStrategyPreviousMask = m_sReflnlistMask;
  m_sStrategyPredictDir   = m_sReflnlistDir;
  m_sStrategyPredictName  = m_sReflnlistDir + "dtpredict.ref";
  m_sStrategyPredictMask  = m_sReflnlistMask;

  m_poScan         = NULL;
  m_a2nSeqNum[0]   = 1;
  m_a2nSeqNum[1]   = 1;

  m_nFCActive    = DTP_DLG_CALIBRATE;
  m_wpbFlowChart = _pbCalibrate;
  m_wFCActive    = _frCalibrate;
  m_prvDialogCB  = &MainWindow::vCalibrateCB;

  m_ptClientDataStructs = new UICallbackStruct[300];

  m_tDtpredictOptions.bSeqOrRot = FALSE;

  m_sCalibrateExtra   = "";
  m_sFindExtra        = "";
  m_sIndexExtra       = "";
  m_sRefineExtra      = "";
  m_sPredictExtra     = "";
  m_sOrientExtra      = "";
  m_sStrategyExtra    = "";
  m_sIntegrateExtra   = "";
  m_sMergeExtra       = "";
  m_sScaleExtra       = "";

  m_tDtrefineOptions.sRefineSeq = "";

    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
MainWindow::~MainWindow() 
{
    
    // Begin user code block <destructor>
  cout << "~MainWindow called\n" << flush;
  vDestroy();
    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void MainWindow::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[720];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultMainWindowResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "MainWindow", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmMainWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmDialogShellWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmMessageBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFileSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmCascadeButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmPushButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmSeparatorWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmToggleButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFrameWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmArrowButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextFieldWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScrolledWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmDrawingAreaWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 363); ac++;
    XtSetArg(args[ac], XmNy, 185); ac++;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 661); ac++;
    _MainWindow = XmCreateMainWindow(parent,
        _name,
        args, 
        ac);
    
    _w = _MainWindow;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 792); ac++;
    XtSetArg(args[ac], XmNheight, 475); ac++;
    _xmDialogShellHeaderEdit = XtCreatePopupShell("xmDialogShellHeaderEdit",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellHeaderEdit, _appDefaults, "cUIheaderEdit", True);
#endif
    _cUIheaderEdit = new CUIheaderEdit("cUIheaderEdit");
    
    // Begin user code block <new_cUIheaderEdit>
    // End user code block <new_cUIheaderEdit>
    
    _cUIheaderEdit->create(_xmDialogShellHeaderEdit);
    
    //
    // Set exposed resources.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNtitle, "Adjust a number"); ac++;
    XtSetArg(args[ac], XmNwidth, 160); ac++;
    XtSetArg(args[ac], XmNheight, 120); ac++;
    _xmDialogShellTextNum = XtCreatePopupShell("xmDialogShellTextNum",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellTextNum, _appDefaults, "cUItextnumArrow", True);
#endif
    _cUItextnumArrow = new CUItextnumArrow("cUItextnumArrow");
    
    // Begin user code block <new_cUItextnumArrow>
    // End user code block <new_cUItextnumArrow>
    
    _cUItextnumArrow->create(_xmDialogShellTextNum);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 160); ac++;
    XtSetArg(args[ac], XmNheight, 120); ac++;
    XtSetValues(_cUItextnumArrow->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 318); ac++;
    XtSetArg(args[ac], XmNheight, 118); ac++;
    _xmDialogShellProgress = XtCreatePopupShell("xmDialogShellProgress",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNdialogStyle, XmDIALOG_FULL_APPLICATION_MODAL); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 318); ac++;
    XtSetArg(args[ac], XmNheight, 118); ac++;
    _mbProgress = XmCreateMessageBox(_xmDialogShellProgress,
        "mbProgress",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_mbProgress,
        XmNcancelCallback,
        MainWindow::vProgressCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 342); ac++;
    XtSetArg(args[ac], XmNheight, 101); ac++;
    _xmDialogShellError = XtCreatePopupShell("xmDialogShellError",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 342); ac++;
    XtSetArg(args[ac], XmNheight, 101); ac++;
    _mbError = XmCreateMessageBox(_xmDialogShellError,
        "mbError",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 479); ac++;
    _xmDialogShellFileFilter = XtCreatePopupShell("xmDialogShellFileFilter",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellFileFilter, _appDefaults, "cUIfileFilter", True);
#endif
    _cUIfileFilter = new CUIfileFilter("cUIfileFilter");
    
    // Begin user code block <new_cUIfileFilter>
    // End user code block <new_cUIfileFilter>
    
    _cUIfileFilter->create(_xmDialogShellFileFilter);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 479); ac++;
    XtSetValues(_cUIfileFilter->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _meMain = XmCreateMenuBar(_MainWindow,
        "meMain",
        args, 
        ac);
    XtManageChild(_meMain);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 5); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbFile = XmCreateCascadeButton(_meMain,
        "cbFile",
        args, 
        ac);
    XtManageChild(_cbFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 290); ac++;
    XtSetArg(args[ac], XmNheight, 278); ac++;
    _pdFile = XmCreatePulldownMenu(XtParent(_cbFile),
        "pdFile",
        args, 
        ac);
    
    ac = 0;
    _pbFileOpen = XmCreatePushButton(_pdFile,
        "pbFileOpen",
        args, 
        ac);
    XtManageChild(_pbFileOpen);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileOpen,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Open a header file with dtprocess values";
    XtAddCallback(_pbFileOpen,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileOpen,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileSaveAs = XmCreatePushButton(_pdFile,
        "pbFileSaveAs",
        args, 
        ac);
    XtManageChild(_pbFileSaveAs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileSaveAs,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Save a header file with current dtprocess values";
    XtAddCallback(_pbFileSaveAs,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileSaveAs,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileHeader = XmCreatePushButton(_pdFile,
        "pbFileHeader",
        args, 
        ac);
    XtManageChild(_pbFileHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileHeader,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select a header for input to subshells";
    XtAddCallback(_pbFileHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileHeader,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileTemplate = XmCreatePushButton(_pdFile,
        "pbFileTemplate",
        args, 
        ac);
    XtManageChild(_pbFileTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileTemplate,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select an image file for subshells";
    XtAddCallback(_pbFileTemplate,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileTemplate,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileReflnlist = XmCreatePushButton(_pdFile,
        "pbFileReflnlist",
        args, 
        ac);
    XtManageChild(_pbFileReflnlist);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileReflnlist,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select a reflnlist file for subshells";
    XtAddCallback(_pbFileReflnlist,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileReflnlist,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileLogfile = XmCreatePushButton(_pdFile,
        "pbFileLogfile",
        args, 
        ac);
    XtManageChild(_pbFileLogfile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileLogfile,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select a log file to view";
    XtAddCallback(_pbFileLogfile,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileLogfile,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbFilePrint = XmCreatePushButton(_pdFile,
        "pbFilePrint",
        args, 
        ac);
    XtManageChild(_pbFilePrint);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFilePrint,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Print the currently viewed log file";
    XtAddCallback(_pbFilePrint,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFilePrint,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spFile = XmCreateSeparator(_pdFile,
        "spFile",
        args, 
        ac);
    XtManageChild(_spFile);
    
    ac = 0;
    _pbFileCD = XmCreatePushButton(_pdFile,
        "pbFileCD",
        args, 
        ac);
    XtManageChild(_pbFileCD);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileCD,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Change the working directory";
    XtAddCallback(_pbFileCD,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileCD,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileMkdir = XmCreatePushButton(_pdFile,
        "pbFileMkdir",
        args, 
        ac);
    XtManageChild(_pbFileMkdir);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileMkdir,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make a new directory";
    XtAddCallback(_pbFileMkdir,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileMkdir,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spFile2 = XmCreateSeparator(_pdFile,
        "spFile2",
        args, 
        ac);
    XtManageChild(_spFile2);
    
    ac = 0;
    _pbFileExit = XmCreatePushButton(_pdFile,
        "pbFileExit",
        args, 
        ac);
    XtManageChild(_pbFileExit);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileExit,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Exit from dtprocess";
    XtAddCallback(_pbFileExit,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileExit,
        XmNactivateCallback,
        MainWindow::vExitCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdFile); ac++;
    XtSetValues(_cbFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 69); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbEdit = XmCreateCascadeButton(_meMain,
        "cbEdit",
        args, 
        ac);
    XtManageChild(_cbEdit);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 273); ac++;
    XtSetArg(args[ac], XmNheight, 85); ac++;
    _pdEdit = XmCreatePulldownMenu(XtParent(_cbEdit),
        "pdEdit",
        args, 
        ac);
    
    ac = 0;
    _pbEditHeader = XmCreatePushButton(_pdEdit,
        "pbEditHeader",
        args, 
        ac);
    XtManageChild(_pbEditHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditHeader,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit some header items";
    XtAddCallback(_pbEditHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditHeader,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spEdit = XmCreateSeparator(_pdEdit,
        "spEdit",
        args, 
        ac);
    XtManageChild(_spEdit);
    
    ac = 0;
    _cbEditClear = XmCreateCascadeButton(_pdEdit,
        "cbEditClear",
        args, 
        ac);
    XtManageChild(_cbEditClear);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 58); ac++;
    _pdEditClear = XmCreatePulldownMenu(XtParent(_cbEditClear),
        "pdEditClear",
        args, 
        ac);
    
    ac = 0;
    _pbEditClearAll = XmCreatePushButton(_pdEditClear,
        "pbEditClearAll",
        args, 
        ac);
    XtManageChild(_pbEditClearAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearAll,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear all text in output window";
    XtAddCallback(_pbEditClearAll,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearAll,
        XmNactivateCallback,
        MainWindow::vEditClearCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbEditClearSelected = XmCreatePushButton(_pdEditClear,
        "pbEditClearSelected",
        args, 
        ac);
    XtManageChild(_pbEditClearSelected);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearSelected,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear selected text in output window";
    XtAddCallback(_pbEditClearSelected,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearSelected,
        XmNactivateCallback,
        MainWindow::vEditClearCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdEditClear); ac++;
    XtSetValues(_cbEditClear, args, ac);
    
    ac = 0;
    _pbEditClearCommand = XmCreatePushButton(_pdEdit,
        "pbEditClearCommand",
        args, 
        ac);
    XtManageChild(_pbEditClearCommand);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearCommand,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear the command line";
    XtAddCallback(_pbEditClearCommand,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearCommand,
        XmNactivateCallback,
        MainWindow::vEditClearCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdEdit); ac++;
    XtSetValues(_cbEdit, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 133); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbView = XmCreateCascadeButton(_meMain,
        "cbView",
        args, 
        ac);
    XtManageChild(_cbView);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 207); ac++;
    XtSetArg(args[ac], XmNheight, 108); ac++;
    _pdView = XmCreatePulldownMenu(XtParent(_cbView),
        "pdView",
        args, 
        ac);
    
    ac = 0;
    _pbViewHeader = XmCreatePushButton(_pdView,
        "pbViewHeader",
        args, 
        ac);
    XtManageChild(_pbViewHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbViewHeader,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"View the header in a new window";
    XtAddCallback(_pbViewHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbViewHeader,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbViewLogfile = XmCreatePushButton(_pdView,
        "pbViewLogfile",
        args, 
        ac);
    XtManageChild(_pbViewLogfile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbViewLogfile,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select a log file to view";
    XtAddCallback(_pbViewLogfile,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbViewLogfile,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNvisibleWhenOff, True); ac++;
    _tbViewNumAdjust = XmCreateToggleButton(_pdView,
        "tbViewNumAdjust",
        args, 
        ac);
    XtManageChild(_tbViewNumAdjust);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbViewNumAdjust,
        XmNvalueChangedCallback,
        MainWindow::vToggleButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbViewNumAdjust,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use a special number adjuster tool";
    XtAddCallback(_tbViewNumAdjust,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNset, True); ac++;
    XtSetArg(args[ac], XmNvisibleWhenOff, True); ac++;
    _tbViewCommand = XmCreateToggleButton(_pdView,
        "tbViewCommand",
        args, 
        ac);
    XtManageChild(_tbViewCommand);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbViewCommand,
        XmNvalueChangedCallback,
        MainWindow::vToggleButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbViewCommand,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Display command line";
    XtAddCallback(_tbViewCommand,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdView); ac++;
    XtSetValues(_cbView, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_meMain, "Utils", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 197); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbUtils = XmCreateCascadeButton(_meMain,
        "cbUtils",
        args, 
        ac);
    XtManageChild(_cbUtils);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 147); ac++;
    _pdUtils = XmCreatePulldownMenu(XtParent(_cbUtils),
        "pdUtils",
        args, 
        ac);
    
    ac = 0;
    _pbUtilsDisplay = XmCreatePushButton(_pdUtils,
        "pbUtilsDisplay",
        args, 
        ac);
    XtManageChild(_pbUtilsDisplay);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsDisplay,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run dtdisplay in a subshell";
    XtAddCallback(_pbUtilsDisplay,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsDisplay,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCollect = XmCreatePushButton(_pdUtils,
        "pbUtilsCollect",
        args, 
        ac);
    XtManageChild(_pbUtilsCollect);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCollect,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run dtcollect in a subshell";
    XtAddCallback(_pbUtilsCollect,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCollect,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsPurge = XmCreatePushButton(_pdUtils,
        "pbUtilsPurge",
        args, 
        ac);
    XtManageChild(_pbUtilsPurge);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsPurge,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Purge old header and ref files";
    XtAddCallback(_pbUtilsPurge,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsPurge,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spUtils = XmCreateSeparator(_pdUtils,
        "spUtils",
        args, 
        ac);
    XtManageChild(_spUtils);
    
    ac = 0;
    _pbUtilsCommand1 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand1",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand1,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCommand2 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand2",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand2,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCommand3 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand3",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand3,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand3,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand3,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCommand4 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand4",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand4);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand4,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand4,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand4,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCommand5 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand5",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand5);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand5,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand5,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand5,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbUtilsCommand6 = XmCreatePushButton(_pdUtils,
        "pbUtilsCommand6",
        args, 
        ac);
    XtManageChild(_pbUtilsCommand6);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand6,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run user command";
    XtAddCallback(_pbUtilsCommand6,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbUtilsCommand6,
        XmNactivateCallback,
        MainWindow::vUtilsCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdUtils); ac++;
    XtSetValues(_cbUtils, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 273); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbHelp = XmCreateCascadeButton(_meMain,
        "cbHelp",
        args, 
        ac);
    XtManageChild(_cbHelp);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 278); ac++;
    XtSetArg(args[ac], XmNheight, 112); ac++;
    _pdHelp = XmCreatePulldownMenu(XtParent(_cbHelp),
        "pdHelp",
        args, 
        ac);
    
    ac = 0;
    _pbHelpHelp = XmCreatePushButton(_pdHelp,
        "pbHelpHelp",
        args, 
        ac);
    XtManageChild(_pbHelpHelp);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpHelp,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get general dtprocess help";
    XtAddCallback(_pbHelpHelp,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpHelp,
        XmNactivateCallback,
        MainWindow::vHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbHelpThisMenu = XmCreatePushButton(_pdHelp,
        "pbHelpThisMenu",
        args, 
        ac);
    XtManageChild(_pbHelpThisMenu);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpThisMenu,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get help for menu shown";
    XtAddCallback(_pbHelpThisMenu,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpThisMenu,
        XmNactivateCallback,
        MainWindow::vHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbHelpUpdate = XmCreatePushButton(_pdHelp,
        "pbHelpUpdate",
        args, 
        ac);
    XtManageChild(_pbHelpUpdate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpUpdate,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Check for updates via the web";
    XtAddCallback(_pbHelpUpdate,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpUpdate,
        XmNactivateCallback,
        MainWindow::vHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbHelpAbout = XmCreatePushButton(_pdHelp,
        "pbHelpAbout",
        args, 
        ac);
    XtManageChild(_pbHelpAbout);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpAbout,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show version information";
    XtAddCallback(_pbHelpAbout,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpAbout,
        XmNactivateCallback,
        MainWindow::vPopDialogCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdHelp); ac++;
    XtSetValues(_cbHelp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_NONE); ac++;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 626); ac++;
    _foMain = XmCreateForm(_MainWindow,
        "foMain",
        args, 
        ac);
    XtManageChild(_foMain);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frLogfile = XmCreateFrame(_foMain,
        "frLogfile",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 484); ac++;
    _foLogfile = XmCreateForm(_frLogfile,
        "foLogfile",
        args, 
        ac);
    XtManageChild(_foLogfile);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 436); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 50); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileClear = XmCreatePushButton(_foLogfile,
        "pbLogfileClear",
        args, 
        ac);
    XtManageChild(_pbLogfileClear);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileClear,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear Input text";
    XtAddCallback(_pbLogfileClear,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileClear,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 546); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 50); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileNo = XmCreatePushButton(_foLogfile,
        "pbLogfileNo",
        args, 
        ac);
    XtManageChild(_pbLogfileNo);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileNo,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Send No to sub-shell";
    XtAddCallback(_pbLogfileNo,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileNo,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
//+JWP    XtSetArg(args[ac], XmNx, 601); ac++;
    XtSetArg(args[ac], XmNx, 350); ac++;
//-JWP
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileReturn = XmCreatePushButton(_foLogfile,
        "pbLogfileReturn",
        args, 
        ac);
    XtManageChild(_pbLogfileReturn);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileReturn,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Send Input<cr> to sub-shell";
    XtAddCallback(_pbLogfileReturn,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileReturn,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 491); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 50); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileYes = XmCreatePushButton(_foLogfile,
        "pbLogfileYes",
        args, 
        ac);
    XtManageChild(_pbLogfileYes);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileYes,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Send Yes to sub-shell";
    XtAddCallback(_pbLogfileYes,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileYes,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 656); ac++;
    XtSetArg(args[ac], XmNy, 445); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbLogfileAutoscroll = XmCreateToggleButton(_foLogfile,
        "tbLogfileAutoscroll",
        args, 
        ac);
    XtManageChild(_tbLogfileAutoscroll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbLogfileAutoscroll,
        XmNvalueChangedCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbLogfileAutoscroll,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Scroll lock ON / OFF on log file updates";
    XtAddCallback(_tbLogfileAutoscroll,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 110); ac++;
    XtSetArg(args[ac], XmNy, 443); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbLogfileInput = XmCreateLabel(_foLogfile,
        "lbLogfileInput",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 6); ac++;
    XtSetArg(args[ac], XmNy, 445); ac++;
    XtSetArg(args[ac], XmNwidth, 94); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileAbort = XmCreatePushButton(_foLogfile,
        "pbLogfileAbort",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileAbort,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Abort a running subprocess";
    XtAddCallback(_pbLogfileAbort,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileAbort,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 438); ac++;
    XtSetArg(args[ac], XmNy, 446); ac++;
    XtSetArg(args[ac], XmNwidth, 38); ac++;
    XtSetArg(args[ac], XmNheight, 31); ac++;
    _abLogfileSearch = XmCreateArrowButton(_foLogfile,
        "abLogfileSearch",
        args, 
        ac);
    XtManageChild(_abLogfileSearch);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abLogfileSearch,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Set search direction";
    XtAddCallback(_abLogfileSearch,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abLogfileSearch,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 110); ac++;
    XtSetArg(args[ac], XmNy, 442); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbLogfileSearch = XmCreateLabel(_foLogfile,
        "lbLogfileSearch",
        args, 
        ac);
    XtManageChild(_lbLogfileSearch);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 210); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 221); ac++;
    XtSetArg(args[ac], XmNheight, 33); ac++;
    _tfLogfileSearch = XmCreateTextField(_foLogfile,
        "tfLogfileSearch",
        args, 
        ac);
    XtManageChild(_tfLogfileSearch);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfLogfileSearch,
        XmNlosingFocusCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfLogfileSearch,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfLogfileSearch,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNscrollBarPlacement, XmBOTTOM_LEFT); ac++;
    XtSetArg(args[ac], XmNscrollBarDisplayPolicy, XmSTATIC); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 430); ac++;
    _swLogfile = XmCreateScrolledWindow(_foLogfile,
        "swLogfile",
        args, 
        ac);
    XtManageChild(_swLogfile);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    XtSetArg(args[ac], XmNvalue, "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\n\
         1         2         3         4         5         6         7         8"); ac++;
    XtSetArg(args[ac], XmNscrollLeftSide, True); ac++;
    XtSetArg(args[ac], XmNcolumns, 79); ac++;
    XtSetArg(args[ac], XmNrows, 24); ac++;
    XtSetArg(args[ac], XmNeditable, False); ac++;
    _txLogfile = XmCreateText(_swLogfile,
        "txLogfile",
        args, 
        ac);
    XtManageChild(_txLogfile);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 6); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 94); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbLogfileDismiss = XmCreatePushButton(_foLogfile,
        "pbLogfileDismiss",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileDismiss,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Send Yes to sub-shell";
    XtAddCallback(_pbLogfileDismiss,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbLogfileDismiss,
        XmNactivateCallback,
        MainWindow::vLogfileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 430); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seLogfile = XmCreateSeparator(_foLogfile,
        "seLogfile",
        args, 
        ac);
    XtManageChild(_seLogfile);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foMain, _appDefaults, "cslLogfile", True);
#endif
    _cslLogfile = new CUIscrolledlist("cslLogfile");
    
    // Begin user code block <new_cslLogfile>
    // End user code block <new_cslLogfile>
    
    _cslLogfile->create(_foMain);
    
    //
    // Set exposed resources.
    //
    _cslLogfile->set_cuiscrolledlist_height((XtPointer)321);
    _cslLogfile->set_lilist_selectionPolicy((XtPointer)XmSINGLE_SELECT);
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 174); ac++;
    XtSetValues(_cslLogfile->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frStrategy = XmCreateFrame(_foMain,
        "frStrategy",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 484); ac++;
    _foStrategy = XmCreateForm(_frStrategy,
        "foStrategy",
        args, 
        ac);
    XtManageChild(_foStrategy);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbStrategyAnom = XmCreateToggleButton(_foStrategy,
        "tbStrategyAnom",
        args, 
        ac);
    XtManageChild(_tbStrategyAnom);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyAnom,
        XmNvalueChangedCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyAnom,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Assume I+ not equal to I-";
    XtAddCallback(_tbStrategyAnom,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbStrategyRef = XmCreateToggleButton(_foStrategy,
        "tbStrategyRef",
        args, 
        ac);
    XtManageChild(_tbStrategyRef);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyRef,
        XmNvalueChangedCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyRef,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Write selected reflns to file for future use";
    XtAddCallback(_tbStrategyRef,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foStrategy, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbStrategyPredicted = XmCreatePushButton(_foStrategy,
        "pbStrategyPredicted",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyPredicted,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"File selection dialog for previous reflnlist";
    XtAddCallback(_pbStrategyPredicted,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyPredicted,
        XmNactivateCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 365); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyPredicted = XmCreateTextField(_foStrategy,
        "tfStrategyPredicted",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPredicted,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPredicted,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPredicted,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbStrategyPredicted = XmCreateToggleButton(_foStrategy,
        "tbStrategyPredicted",
        args, 
        ac);
    XtManageChild(_tbStrategyPredicted);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyPredicted,
        XmNvalueChangedCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyPredicted,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use previous reflnlist";
    XtAddCallback(_tbStrategyPredicted,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbStrategyPrevious = XmCreateToggleButton(_foStrategy,
        "tbStrategyPrevious",
        args, 
        ac);
    XtManageChild(_tbStrategyPrevious);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyPrevious,
        XmNvalueChangedCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyPrevious,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use previous reflnlist";
    XtAddCallback(_tbStrategyPrevious,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 365); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyPrevious = XmCreateTextField(_foStrategy,
        "tfStrategyPrevious",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPrevious,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPrevious,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyPrevious,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foStrategy, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbStrategyPrevious = XmCreatePushButton(_foStrategy,
        "pbStrategyPrevious",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyPrevious,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"File selection dialog for previous reflnlist";
    XtAddCallback(_pbStrategyPrevious,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyPrevious,
        XmNactivateCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 429); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seStrategy = XmCreateSeparator(_foStrategy,
        "seStrategy",
        args, 
        ac);
    XtManageChild(_seStrategy);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbStrategyRun = XmCreatePushButton(_foStrategy,
        "pbStrategyRun",
        args, 
        ac);
    XtManageChild(_pbStrategyRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Determine best rotation start and range";
    XtAddCallback(_pbStrategyRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategyRun,
        XmNactivateCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbStrategyList = XmCreateToggleButton(_foStrategy,
        "tbStrategyList",
        args, 
        ac);
    XtManageChild(_tbStrategyList);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyList,
        XmNvalueChangedCallback,
        MainWindow::vStrategyCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbStrategyList,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -nocollision option in dtmultistrategy";
    XtAddCallback(_tbStrategyList,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyRotStepFine = XmCreateTextField(_foStrategy,
        "tfStrategyRotStepFine",
        args, 
        ac);
    XtManageChild(_tfStrategyRotStepFine);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepFine,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepFine,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepFine,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyRotStepCoarse = XmCreateTextField(_foStrategy,
        "tfStrategyRotStepCoarse",
        args, 
        ac);
    XtManageChild(_tfStrategyRotStepCoarse);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepCoarse,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepCoarse,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepCoarse,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyResolution2 = XmCreateTextField(_foStrategy,
        "tfStrategyResolution2",
        args, 
        ac);
    XtManageChild(_tfStrategyResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution2,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution2,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyResolution1 = XmCreateTextField(_foStrategy,
        "tfStrategyResolution1",
        args, 
        ac);
    XtManageChild(_tfStrategyResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution1,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution1,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyRotRangeMax = XmCreateTextField(_foStrategy,
        "tfStrategyRotRangeMax",
        args, 
        ac);
    XtManageChild(_tfStrategyRotRangeMax);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotRangeMax,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotRangeMax,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotRangeMax,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyCompleteness = XmCreateTextField(_foStrategy,
        "tfStrategyCompleteness",
        args, 
        ac);
    XtManageChild(_tfStrategyCompleteness);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyCompleteness,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyCompleteness,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyCompleteness,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyLScale = XmCreateTextField(_foStrategy,
        "tfStrategyLScale",
        args, 
        ac);
    XtManageChild(_tfStrategyLScale);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyLScale,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyLScale,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyLScale,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyRotEnd = XmCreateTextField(_foStrategy,
        "tfStrategyRotEnd",
        args, 
        ac);
    XtManageChild(_tfStrategyRotEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotEnd,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotEnd,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfStrategyRotStart = XmCreateTextField(_foStrategy,
        "tfStrategyRotStart",
        args, 
        ac);
    XtManageChild(_tfStrategyRotStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStart,
        XmNlosingFocusCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStart,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStart,
        XmNactivateCallback,
        MainWindow::vStrategyTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyRotStep = XmCreateLabel(_foStrategy,
        "lbStrategyRotStep",
        args, 
        ac);
    XtManageChild(_lbStrategyRotStep);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyResolution = XmCreateLabel(_foStrategy,
        "lbStrategyResolution",
        args, 
        ac);
    XtManageChild(_lbStrategyResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyRotRangeMax = XmCreateLabel(_foStrategy,
        "lbStrategyRotRangeMax",
        args, 
        ac);
    XtManageChild(_lbStrategyRotRangeMax);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyCompleteness = XmCreateLabel(_foStrategy,
        "lbStrategyCompleteness",
        args, 
        ac);
    XtManageChild(_lbStrategyCompleteness);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyLScale = XmCreateLabel(_foStrategy,
        "lbStrategyLScale",
        args, 
        ac);
    XtManageChild(_lbStrategyLScale);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbStrategyRot = XmCreateLabel(_foStrategy,
        "lbStrategyRot",
        args, 
        ac);
    XtManageChild(_lbStrategyRot);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbMode = XmCreateLabel(_foMain,
        "lbMode",
        args, 
        ac);
    XtManageChild(_lbMode);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 491); ac++;
    _frScale = XmCreateFrame(_foMain,
        "frScale",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 485); ac++;
    _foScale = XmCreateForm(_frScale,
        "foScale",
        args, 
        ac);
    XtManageChild(_foScale);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleScaleAnom = XmCreateToggleButton(_foScale,
        "tbScaleScaleAnom",
        args, 
        ac);
    XtManageChild(_tbScaleScaleAnom);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleScaleAnom,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleScaleAnom,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Treat I+ and I- as non-equivalent in scaling and statistics";
    XtAddCallback(_tbScaleScaleAnom,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleResolution1 = XmCreateTextField(_foScale,
        "tfScaleResolution1",
        args, 
        ac);
    XtManageChild(_tfScaleResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution1,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution1,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleResolution2 = XmCreateTextField(_foScale,
        "tfScaleResolution2",
        args, 
        ac);
    XtManageChild(_tfScaleResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution2,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleResolution2,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleResolution = XmCreateLabel(_foScale,
        "lbScaleResolution",
        args, 
        ac);
    XtManageChild(_lbScaleResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 255); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleUnavgOutput = XmCreateLabel(_foScale,
        "lbScaleUnavgOutput",
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foScale, _appDefaults, "cUIom9ScaleUnavgOutput", True);
#endif
    _cUIom9ScaleUnavgOutput = new CUIom9("cUIom9ScaleUnavgOutput");
    
    // Begin user code block <new_cUIom9ScaleUnavgOutput>
    // End user code block <new_cUIom9ScaleUnavgOutput>
    
    _cUIom9ScaleUnavgOutput->create(_foScale);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 210); ac++;
    XtSetArg(args[ac], XmNheight, 39); ac++;
    XtSetValues(_cUIom9ScaleUnavgOutput->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleNoHeader = XmCreateToggleButton(_foScale,
        "tbScaleNoHeader",
        args, 
        ac);
    XtManageChild(_tbScaleNoHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleNoHeader,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleNoHeader,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Output averaged reflnlist without a header";
    XtAddCallback(_tbScaleNoHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleTexsan = XmCreateToggleButton(_foScale,
        "tbScaleTexsan",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleTexsan,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleTexsan,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Output scaled but unaveraged reflnlist with hkl,I,sigI and noheader suitable for teXsan";
    XtAddCallback(_tbScaleTexsan,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    //XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNwidth, 180); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleAbscorReject = XmCreateTextField(_foScale,
        "tfScaleAbscorReject",
        args, 
        ac);
    XtManageChild(_tfScaleAbscorReject);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleAbscorReject,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleAbscorReject,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleAbscorReject,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 280); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleAbscorReject = XmCreateLabel(_foScale,
        "lbScaleAbscorReject",
        args, 
        ac);
    XtManageChild(_lbScaleAbscorReject);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 280); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleAbscor = XmCreateLabel(_foScale,
        "lbScaleAbscor",
        args, 
        ac);
    XtManageChild(_lbScaleAbscor);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foScale, _appDefaults, "cUIom9ScaleAbscor", True);
#endif
    _cUIom9ScaleAbscor = new CUIom9("cUIom9ScaleAbscor");
    
    // Begin user code block <new_cUIom9ScaleAbscor>
    // End user code block <new_cUIom9ScaleAbscor>
    
    _cUIom9ScaleAbscor->create(_foScale);
    _cUIom9ScaleAbscor->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 415); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 351); ac++;
    XtSetArg(args[ac], XmNheight, 39); ac++;
    XtSetValues(_cUIom9ScaleAbscor->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbScaleUnAvg = XmCreatePushButton(_foScale,
        "pbScaleUnAvg",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleUnAvg,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select output scaled but unaveraged reflnlist file";
    XtAddCallback(_pbScaleUnAvg,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleUnAvg,
        XmNactivateCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 330); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleUnAvg = XmCreateTextField(_foScale,
        "tfScaleUnAvg",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleUnAvg,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleUnAvg,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleUnAvg,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbScaleMergeFile = XmCreatePushButton(_foScale,
        "pbScaleMergeFile",
        args, 
        ac);
    XtManageChild(_pbScaleMergeFile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleMergeFile,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select output reflnlist file for dtscalemerge";
    XtAddCallback(_pbScaleMergeFile,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleMergeFile,
        XmNactivateCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 330); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleMergeFile = XmCreateTextField(_foScale,
        "tfScaleMergeFile",
        args, 
        ac);
    XtManageChild(_tfScaleMergeFile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleMergeFile,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleMergeFile,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleMergeFile,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleMergeFile = XmCreateLabel(_foScale,
        "lbScaleMergeFile",
        args, 
        ac);
    XtManageChild(_lbScaleMergeFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleUnaverage = XmCreateToggleButton(_foScale,
        "tbScaleUnaverage",
        args, 
        ac);
    XtManageChild(_tbScaleUnaverage);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleUnaverage,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleUnaverage,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Output a scaled, but unaveraged reflnlist";
    XtAddCallback(_tbScaleUnaverage,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleCycles = XmCreateLabel(_foScale,
        "lbScaleCycles",
        args, 
        ac);
    XtManageChild(_lbScaleCycles);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleCycles = XmCreateTextField(_foScale,
        "tfScaleCycles",
        args, 
        ac);
    XtManageChild(_tfScaleCycles);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleCycles,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleCycles,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleCycles,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    //    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNwidth, 180); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleFixedBatch = XmCreateTextField(_foScale,
        "tfScaleFixedBatch",
        args, 
        ac);
    XtManageChild(_tfScaleFixedBatch);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedBatch,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedBatch,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedBatch,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 280); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleFixedBatch = XmCreateLabel(_foScale,
        "lbScaleFixedBatch",
        args, 
        ac);
    XtManageChild(_lbScaleFixedBatch);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 0); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleFixedB = XmCreateTextField(_foScale,
        "tfScaleFixedB",
        args, 
        ac);
    XtManageChild(_tfScaleFixedB);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedB,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedB,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedB,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleFixedScale = XmCreateTextField(_foScale,
        "tfScaleFixedScale",
        args, 
        ac);
    XtManageChild(_tfScaleFixedScale);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedScale,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedScale,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedScale,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleFixedScale = XmCreateLabel(_foScale,
        "lbScaleFixedScale",
        args, 
        ac);
    XtManageChild(_lbScaleFixedScale);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleFixedB = XmCreateLabel(_foScale,
        "lbScaleFixedB",
        args, 
        ac);
    XtManageChild(_lbScaleFixedB);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleSigma = XmCreateTextField(_foScale,
        "tfScaleSigma",
        args, 
        ac);
    XtManageChild(_tfScaleSigma);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleSigma,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleSigma,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleSigma,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleSigma = XmCreateLabel(_foScale,
        "lbScaleSigma",
        args, 
        ac);
    XtManageChild(_lbScaleSigma);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 445); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbScaleRun = XmCreatePushButton(_foScale,
        "pbScaleRun",
        args, 
        ac);
    XtManageChild(_pbScaleRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Scale and average a reflnlist with dtscalemerge";
    XtAddCallback(_pbScaleRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScaleRun,
        XmNactivateCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleErrorAdd = XmCreateLabel(_foScale,
        "lbScaleErrorAdd",
        args, 
        ac);
    XtManageChild(_lbScaleErrorAdd);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleErrorAdd = XmCreateTextField(_foScale,
        "tfScaleErrorAdd",
        args, 
        ac);
    XtManageChild(_tfScaleErrorAdd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorAdd,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorAdd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorAdd,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleReject = XmCreateTextField(_foScale,
        "tfScaleReject",
        args, 
        ac);
    XtManageChild(_tfScaleReject);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleReject,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleReject,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleReject,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleReject = XmCreateLabel(_foScale,
        "lbScaleReject",
        args, 
        ac);
    XtManageChild(_lbScaleReject);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleAnom = XmCreateToggleButton(_foScale,
        "tbScaleAnom",
        args, 
        ac);
    XtManageChild(_tbScaleAnom);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleAnom,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleAnom,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Output I,sigI and I+,sigI+, I-,sigI-anomalous info on SAME line";
    XtAddCallback(_tbScaleAnom,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbScaleFixB = XmCreateToggleButton(_foScale,
        "tbScaleFixB",
        args, 
        ac);
    XtManageChild(_tbScaleFixB);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleFixB,
        XmNvalueChangedCallback,
        MainWindow::vScaleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScaleFixB,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix temperature factor refinement";
    XtAddCallback(_tbScaleFixB,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfScaleErrorMul = XmCreateTextField(_foScale,
        "tfScaleErrorMul",
        args, 
        ac);
    XtManageChild(_tfScaleErrorMul);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorMul,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorMul,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorMul,
        XmNactivateCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbScaleErrorMul = XmCreateLabel(_foScale,
        "lbScaleErrorMul",
        args, 
        ac);
    XtManageChild(_lbScaleErrorMul);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 430); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seScale = XmCreateSeparator(_foScale,
        "seScale",
        args, 
        ac);
    XtManageChild(_seScale);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 691); ac++;
    XtSetArg(args[ac], XmNheight, 486); ac++;
    _frMerge = XmCreateFrame(_foMain,
        "frMerge",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 685); ac++;
    XtSetArg(args[ac], XmNheight, 480); ac++;
    _foMerge = XmCreateForm(_frMerge,
        "foMerge",
        args, 
        ac);
    XtManageChild(_foMerge);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbMergeMergeFile = XmCreatePushButton(_foMerge,
        "pbMergeMergeFile",
        args, 
        ac);
    XtManageChild(_pbMergeMergeFile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMergeMergeFile,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select output reflnlist file for dtreflnmerge";
    XtAddCallback(_pbMergeMergeFile,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMergeMergeFile,
        XmNactivateCallback,
        MainWindow::vMergeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 330); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfMergeMergeFile = XmCreateTextField(_foMerge,
        "tfMergeMergeFile",
        args, 
        ac);
    XtManageChild(_tfMergeMergeFile);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfMergeMergeFile,
        XmNlosingFocusCallback,
        MainWindow::vScaleTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfMergeMergeFile,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfMergeMergeFile,
        XmNactivateCallback,
        MainWindow::vMergeTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 360); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbMergeMergeFile = XmCreateLabel(_foMerge,
        "lbMergeMergeFile",
        args, 
        ac);
    XtManageChild(_lbMergeMergeFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 274); ac++;
    XtSetArg(args[ac], XmNy, 440); ac++;
    XtSetArg(args[ac], XmNwidth, 137); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbMergeRun = XmCreatePushButton(_foMerge,
        "pbMergeRun",
        args, 
        ac);
    XtManageChild(_pbMergeRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMergeRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Merge one or more reflnlists with dtreflnmerge";
    XtAddCallback(_pbMergeRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMergeRun,
        XmNactivateCallback,
        MainWindow::vMergeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 425); ac++;
    XtSetArg(args[ac], XmNwidth, 685); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seMerge = XmCreateSeparator(_foMerge,
        "seMerge",
        args, 
        ac);
    XtManageChild(_seMerge);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frIntegrate = XmCreateFrame(_foMain,
        "frIntegrate",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 484); ac++;
    _foIntegrate = XmCreateForm(_frIntegrate,
        "foIntegrate",
        args, 
        ac);
    XtManageChild(_foIntegrate);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 369); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 75); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegratePrerefine = XmCreateLabel(_foIntegrate,
        "lbIntegratePrerefine",
        args, 
        ac);
    XtManageChild(_lbIntegratePrerefine);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foIntegrate, _appDefaults, "cUIom9IntegratePrerefine", True);
#endif
    _cUIom9IntegratePrerefine = new CUIom9("cUIom9IntegratePrerefine");
    
    // Begin user code block <new_cUIom9IntegratePrerefine>
    // End user code block <new_cUIom9IntegratePrerefine>
    
    _cUIom9IntegratePrerefine->create(_foIntegrate);
    _cUIom9IntegratePrerefine->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 555); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_cUIom9IntegratePrerefine->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 400); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateNopurge = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateNopurge",
        args, 
        ac);
    XtManageChild(_tbIntegrateNopurge);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateNopurge,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateNopurge,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -differentdet option in dtintegrate since the images have a different det position than stated in the input .head file";
    XtAddCallback(_tbIntegrateNopurge,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateMinPeakRadius = XmCreateTextField(_foIntegrate,
        "tfIntegrateMinPeakRadius",
        args, 
        ac);
    XtManageChild(_tfIntegrateMinPeakRadius);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateMinPeakRadius,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateMinPeakRadius,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateMinPeakRadius,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateMinPeakRadius = XmCreateLabel(_foIntegrate,
        "lbIntegrateMinPeakRadius",
        args, 
        ac);
    XtManageChild(_lbIntegrateMinPeakRadius);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foIntegrate, _appDefaults, "cUIom9IntegrateSpecial", True);
#endif
    _cUIom9IntegrateSpecial = new CUIom9("cUIom9IntegrateSpecial");
    
    // Begin user code block <new_cUIom9IntegrateSpecial>
    // End user code block <new_cUIom9IntegrateSpecial>
    
    _cUIom9IntegrateSpecial->create(_foIntegrate);
    _cUIom9IntegrateSpecial->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, -5); ac++;
    XtSetArg(args[ac], XmNy, 4); ac++;
    XtSetArg(args[ac], XmNwidth, 178); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_cUIom9IntegrateSpecial->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 429); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seIntegrate = XmCreateSeparator(_foIntegrate,
        "seIntegrate",
        args, 
        ac);
    XtManageChild(_seIntegrate);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbIntegrateRun = XmCreatePushButton(_foIntegrate,
        "pbIntegrateRun",
        args, 
        ac);
    XtManageChild(_pbIntegrateRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIntegrateRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Integrate reflections in a scan of images";
    XtAddCallback(_pbIntegrateRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIntegrateRun,
        XmNactivateCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 225); ac++;
    XtSetArg(args[ac], XmNwidth, 400); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateDisplay = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateDisplay",
        args, 
        ac);
    XtManageChild(_tbIntegrateDisplay);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateDisplay,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateDisplay,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -differentscan option in dtintegrate since the images are a different scan (but same det position) than stated in the input.head file";
    XtAddCallback(_tbIntegrateDisplay,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateDump = XmCreateTextField(_foIntegrate,
        "tfIntegrateDump",
        args, 
        ac);
    XtManageChild(_tfIntegrateDump);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateDump,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateDump,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateDump,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateProfSize2 = XmCreateTextField(_foIntegrate,
        "tfIntegrateProfSize2",
        args, 
        ac);
    XtManageChild(_tfIntegrateProfSize2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize2,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize2,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateProfSize1 = XmCreateTextField(_foIntegrate,
        "tfIntegrateProfSize1",
        args, 
        ac);
    XtManageChild(_tfIntegrateProfSize1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize1,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize1,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateResolution2 = XmCreateTextField(_foIntegrate,
        "tfIntegrateResolution2",
        args, 
        ac);
    XtManageChild(_tfIntegrateResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution2,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution2,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateResolution1 = XmCreateTextField(_foIntegrate,
        "tfIntegrateResolution1",
        args, 
        ac);
    XtManageChild(_tfIntegrateResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution1,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution1,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 95); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateSpecial1 = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateSpecial1",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial1,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select the chi=0 rotate around phi scan";
    XtAddCallback(_tbIntegrateSpecial1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 95); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateSpecial2 = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateSpecial2",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial2,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select the chi=90 rotate around omega scan";
    XtAddCallback(_tbIntegrateSpecial2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 95); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateSpecial3 = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateSpecial3",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial3,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial3,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select chi=90 rotate around phi scan";
    XtAddCallback(_tbIntegrateSpecial3,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNselectColor, 
        BX_CONVERT(_foIntegrate, "Green", 
        XmRPixel, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 95); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbIntegrateSpecial4 = XmCreateToggleButton(_foIntegrate,
        "tbIntegrateSpecial4",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial4,
        XmNvalueChangedCallback,
        MainWindow::vIntegrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIntegrateSpecial4,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select scan in the input header";
    XtAddCallback(_tbIntegrateSpecial4,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegratePadding = XmCreateTextField(_foIntegrate,
        "tfIntegratePadding",
        args, 
        ac);
    XtManageChild(_tfIntegratePadding);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegratePadding,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegratePadding,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegratePadding,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateWindow2 = XmCreateTextField(_foIntegrate,
        "tfIntegrateWindow2",
        args, 
        ac);
    XtManageChild(_tfIntegrateWindow2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow2,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow2,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateWindow1 = XmCreateTextField(_foIntegrate,
        "tfIntegrateWindow1",
        args, 
        ac);
    XtManageChild(_tfIntegrateWindow1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow1,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow1,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateBatchNum = XmCreateTextField(_foIntegrate,
        "tfIntegrateBatchNum",
        args, 
        ac);
    XtManageChild(_tfIntegrateBatchNum);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchNum,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchNum,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchNum,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateBatchPrefix = XmCreateTextField(_foIntegrate,
        "tfIntegrateBatchPrefix",
        args, 
        ac);
    XtManageChild(_tfIntegrateBatchPrefix);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchPrefix,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchPrefix,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateWait = XmCreateTextField(_foIntegrate,
        "tfIntegrateWait",
        args, 
        ac);
    XtManageChild(_tfIntegrateWait);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWait,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWait,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWait,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateSeqEnd = XmCreateTextField(_foIntegrate,
        "tfIntegrateSeqEnd",
        args, 
        ac);
    XtManageChild(_tfIntegrateSeqEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqEnd,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIntegrateSeqStart = XmCreateTextField(_foIntegrate,
        "tfIntegrateSeqStart",
        args, 
        ac);
    XtManageChild(_tfIntegrateSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqStart,
        XmNactivateCallback,
        MainWindow::vIntegrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateDump = XmCreateLabel(_foIntegrate,
        "lbIntegrateDump",
        args, 
        ac);
    XtManageChild(_lbIntegrateDump);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateProfSize = XmCreateLabel(_foIntegrate,
        "lbIntegrateProfSize",
        args, 
        ac);
    XtManageChild(_lbIntegrateProfSize);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 42); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateResolution = XmCreateLabel(_foIntegrate,
        "lbIntegrateResolution",
        args, 
        ac);
    XtManageChild(_lbIntegrateResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _seIntegrate1 = XmCreateSeparator(_foIntegrate,
        "seIntegrate1",
        args, 
        ac);
    XtManageChild(_seIntegrate1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegratePadding = XmCreateLabel(_foIntegrate,
        "lbIntegratePadding",
        args, 
        ac);
    XtManageChild(_lbIntegratePadding);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateWindow = XmCreateLabel(_foIntegrate,
        "lbIntegrateWindow",
        args, 
        ac);
    XtManageChild(_lbIntegrateWindow);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateBatchNum = XmCreateLabel(_foIntegrate,
        "lbIntegrateBatchNum",
        args, 
        ac);
    XtManageChild(_lbIntegrateBatchNum);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateBatchPrefix = XmCreateLabel(_foIntegrate,
        "lbIntegrateBatchPrefix",
        args, 
        ac);
    XtManageChild(_lbIntegrateBatchPrefix);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateWait = XmCreateLabel(_foIntegrate,
        "lbIntegrateWait",
        args, 
        ac);
    XtManageChild(_lbIntegrateWait);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIntegrateSeq = XmCreateLabel(_foIntegrate,
        "lbIntegrateSeq",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 691); ac++;
    XtSetArg(args[ac], XmNheight, 486); ac++;
    _frOrient = XmCreateFrame(_foMain,
        "frOrient",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 685); ac++;
    XtSetArg(args[ac], XmNheight, 480); ac++;
    _foOrient = XmCreateForm(_frOrient,
        "foOrient",
        args, 
        ac);
    XtManageChild(_foOrient);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 5); ac++;
    XtSetArg(args[ac], XmNy, 205); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrient1 = XmCreateLabel(_foOrient,
        "lbOrient1",
        args, 
        ac);
    XtManageChild(_lbOrient1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientRotDegrees = XmCreateLabel(_foOrient,
        "lbOrientRotDegrees",
        args, 
        ac);
    XtManageChild(_lbOrientRotDegrees);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 109); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfOrientRot = XmCreateTextField(_foOrient,
        "tfOrientRot",
        args, 
        ac);
    XtManageChild(_tfOrientRot);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfOrientRot,
        XmNvalueChangedCallback,
        MainWindow::vOrientTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfOrientRot,
        XmNlosingFocusCallback,
        MainWindow::vOrientTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfOrientRot,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfOrientRot,
        XmNactivateCallback,
        MainWindow::vOrientTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foOrient, _appDefaults, "cUIomOrientLab3", True);
#endif
    _cUIomOrientLab3 = new CUIom9("cUIomOrientLab3");
    
    // Begin user code block <new_cUIomOrientLab3>
    // End user code block <new_cUIomOrientLab3>
    
    _cUIomOrientLab3->create(_foOrient);
    _cUIomOrientLab3->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    XtSetValues(_cUIomOrientLab3->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 255); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientRot = XmCreateLabel(_foOrient,
        "lbOrientRot",
        args, 
        ac);
    XtManageChild(_lbOrientRot);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foOrient, "parallel to", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientParallel2 = XmCreateLabel(_foOrient,
        "lbOrientParallel2",
        args, 
        ac);
    XtManageChild(_lbOrientParallel2);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foOrient, "parallel to", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientParallel1 = XmCreateLabel(_foOrient,
        "lbOrientParallel1",
        args, 
        ac);
    XtManageChild(_lbOrientParallel1);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foOrient, _appDefaults, "cUIomOrientLab2", True);
#endif
    _cUIomOrientLab2 = new CUIom9("cUIomOrientLab2");
    
    // Begin user code block <new_cUIomOrientLab2>
    // End user code block <new_cUIomOrientLab2>
    
    _cUIomOrientLab2->create(_foOrient);
    _cUIomOrientLab2->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    XtSetValues(_cUIomOrientLab2->baseWidget(), args, ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foOrient, _appDefaults, "cUIomOrientLab1", True);
#endif
    _cUIomOrientLab1 = new CUIom9("cUIomOrientLab1");
    
    // Begin user code block <new_cUIomOrientLab1>
    // End user code block <new_cUIomOrientLab1>
    
    _cUIomOrientLab1->create(_foOrient);
    _cUIomOrientLab1->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    XtSetValues(_cUIomOrientLab1->baseWidget(), args, ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foOrient, _appDefaults, "cUIomOrientCrystal2", True);
#endif
    _cUIomOrientCrystal2 = new CUIom9("cUIomOrientCrystal2");
    
    // Begin user code block <new_cUIomOrientCrystal2>
    // End user code block <new_cUIomOrientCrystal2>
    
    _cUIomOrientCrystal2->create(_foOrient);
    _cUIomOrientCrystal2->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    XtSetValues(_cUIomOrientCrystal2->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientLab2 = XmCreateLabel(_foOrient,
        "lbOrientLab2",
        args, 
        ac);
    XtManageChild(_lbOrientLab2);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientLab1 = XmCreateLabel(_foOrient,
        "lbOrientLab1",
        args, 
        ac);
    XtManageChild(_lbOrientLab1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 145); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientCrystal2 = XmCreateLabel(_foOrient,
        "lbOrientCrystal2",
        args, 
        ac);
    XtManageChild(_lbOrientCrystal2);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 90); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbOrientCrystal1 = XmCreateLabel(_foOrient,
        "lbOrientCrystal1",
        args, 
        ac);
    XtManageChild(_lbOrientCrystal1);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foOrient, _appDefaults, "cUIomOrientCrystal1", True);
#endif
    _cUIomOrientCrystal1 = new CUIom9("cUIomOrientCrystal1");
    
    // Begin user code block <new_cUIomOrientCrystal1>
    // End user code block <new_cUIomOrientCrystal1>
    
    _cUIomOrientCrystal1->create(_foOrient);
    _cUIomOrientCrystal1->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 90); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 66); ac++;
    XtSetValues(_cUIomOrientCrystal1->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 274); ac++;
    XtSetArg(args[ac], XmNy, 440); ac++;
    XtSetArg(args[ac], XmNwidth, 137); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbOrientRun = XmCreatePushButton(_foOrient,
        "pbOrientRun",
        args, 
        ac);
    XtManageChild(_pbOrientRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbOrientRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Orient the crystal in specific ways";
    XtAddCallback(_pbOrientRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbOrientRun,
        XmNactivateCallback,
        MainWindow::vOrientCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 430); ac++;
    XtSetArg(args[ac], XmNwidth, 589); ac++;
    XtSetArg(args[ac], XmNheight, 5); ac++;
    _seOrient = XmCreateSeparator(_foOrient,
        "seOrient",
        args, 
        ac);
    XtManageChild(_seOrient);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 620); ac++;
    XtSetArg(args[ac], XmNheight, 85); ac++;
    _lbOrient = XmCreateLabel(_foOrient,
        "lbOrient",
        args, 
        ac);
    XtManageChild(_lbOrient);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 597); ac++;
    XtSetArg(args[ac], XmNheight, 491); ac++;
    _frPredict = XmCreateFrame(_foMain,
        "frPredict",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 591); ac++;
    XtSetArg(args[ac], XmNheight, 485); ac++;
    _foPredict = XmCreateForm(_frPredict,
        "foPredict",
        args, 
        ac);
    XtManageChild(_foPredict);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictMosaicity = XmCreateTextField(_foPredict,
        "tfPredictMosaicity",
        args, 
        ac);
    XtManageChild(_tfPredictMosaicity);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictMosaicity,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictMosaicity,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictMosaicity,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbPredictMosaicity = XmCreateLabel(_foPredict,
        "lbPredictMosaicity",
        args, 
        ac);
    XtManageChild(_lbPredictMosaicity);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 236); ac++;
    XtSetArg(args[ac], XmNy, 445); ac++;
    XtSetArg(args[ac], XmNwidth, 119); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbPredictRun = XmCreatePushButton(_foPredict,
        "pbPredictRun",
        args, 
        ac);
    XtManageChild(_pbPredictRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbPredictRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Predict reflections";
    XtAddCallback(_pbPredictRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbPredictRun,
        XmNactivateCallback,
        MainWindow::vPredictCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbPredictResolution = XmCreateLabel(_foPredict,
        "lbPredictResolution",
        args, 
        ac);
    XtManageChild(_lbPredictResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictResolution2 = XmCreateTextField(_foPredict,
        "tfPredictResolution2",
        args, 
        ac);
    XtManageChild(_tfPredictResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution2,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution2,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictResolution1 = XmCreateTextField(_foPredict,
        "tfPredictResolution1",
        args, 
        ac);
    XtManageChild(_tfPredictResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution1,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution1,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictSeqStart = XmCreateTextField(_foPredict,
        "tfPredictSeqStart",
        args, 
        ac);
    XtManageChild(_tfPredictSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqStart,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictSeqEnd = XmCreateTextField(_foPredict,
        "tfPredictSeqEnd",
        args, 
        ac);
    XtManageChild(_tfPredictSeqEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqEnd,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbPredictSeq = XmCreateLabel(_foPredict,
        "lbPredictSeq",
        args, 
        ac);
    XtManageChild(_lbPredictSeq);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 34); ac++;
    XtSetArg(args[ac], XmNy, 225); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbPredictList = XmCreateToggleButton(_foPredict,
        "tbPredictList",
        args, 
        ac);
    XtManageChild(_tbPredictList);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictList,
        XmNvalueChangedCallback,
        MainWindow::vPredictCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictList,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -list option in dtpredict";
    XtAddCallback(_tbPredictList,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 35); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbPredictNonunf = XmCreateToggleButton(_foPredict,
        "tbPredictNonunf",
        args, 
        ac);
    XtManageChild(_tbPredictNonunf);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictNonunf,
        XmNvalueChangedCallback,
        MainWindow::vPredictCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictNonunf,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -nonunf option in dtpredict";
    XtAddCallback(_tbPredictNonunf,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictRotEnd = XmCreateTextField(_foPredict,
        "tfPredictRotEnd",
        args, 
        ac);
    XtManageChild(_tfPredictRotEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotEnd,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotEnd,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfPredictRotStart = XmCreateTextField(_foPredict,
        "tfPredictRotStart",
        args, 
        ac);
    XtManageChild(_tfPredictRotStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotStart,
        XmNlosingFocusCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotStart,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotStart,
        XmNactivateCallback,
        MainWindow::vPredictTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbPredictRot = XmCreateLabel(_foPredict,
        "lbPredictRot",
        args, 
        ac);
    XtManageChild(_lbPredictRot);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 360); ac++;
    XtSetArg(args[ac], XmNy, 10); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbPredictDisplay = XmCreateToggleButton(_foPredict,
        "tbPredictDisplay",
        args, 
        ac);
    XtManageChild(_tbPredictDisplay);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictDisplay,
        XmNvalueChangedCallback,
        MainWindow::vPredictCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbPredictDisplay,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -display option in dtpredict";
    XtAddCallback(_tbPredictDisplay,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 430); ac++;
    XtSetArg(args[ac], XmNwidth, 591); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _sePredict = XmCreateSeparator(_foPredict,
        "sePredict",
        args, 
        ac);
    XtManageChild(_sePredict);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frRefine = XmCreateFrame(_foMain,
        "frRefine",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 484); ac++;
    _foRefine1 = XmCreateForm(_frRefine,
        "foRefine1",
        args, 
        ac);
    XtManageChild(_foRefine1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 1); ac++;
    XtSetArg(args[ac], XmNwidth, 60); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineRefln = XmCreateLabel(_foRefine1,
        "lbRefineRefln",
        args, 
        ac);
    XtManageChild(_lbRefineRefln);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foRefine1, _appDefaults, "cUIom9RefineRefln", True);
#endif
    _cUIom9RefineRefln = new CUIom9("cUIom9RefineRefln");
    
    // Begin user code block <new_cUIom9RefineRefln>
    // End user code block <new_cUIom9RefineRefln>
    
    _cUIom9RefineRefln->create(_foRefine1);
    _cUIom9RefineRefln->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 202); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    XtSetValues(_cUIom9RefineRefln->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 616); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefinePrompt = XmCreateToggleButton(_foRefine1,
        "tbRefinePrompt",
        args, 
        ac);
    XtManageChild(_tbRefinePrompt);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefinePrompt,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefinePrompt,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -prompt option in dtrefine";
    XtAddCallback(_tbRefinePrompt,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 269); ac++;
    XtSetArg(args[ac], XmNwidth, 753); ac++;
    XtSetArg(args[ac], XmNheight, 161); ac++;
    _foRefineMacro = XmCreateForm(_foRefine1,
        "foRefineMacro",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foRefineMacro, ":::t\"Options: -reso, -sigma, -rej, -display, -prompt, -cycles, -weight, -verbose,-go\":t\"Items to refine (precede by +) or fix (precede by -): All,\":t\"CrysAll, CrysCell, CrysLengths, CrysAstar, CrysBstar, CrysCstar, CrysAngles,\":t\"CrysAlps, CrysBets, CrysGams, CrysRot, CrysRot1, CrysRot2, CrysRot3,\":t\"CrysMosaicity, CrysConstraints,\":t\"DetAll, DetTrans, DetTrans1, DetTrans2, DetTrans3, \":t\"DetRot, DetRot1, DetRot2, DetRot3,\"\"SourceRot, SourceRot1, SourceRot2, SourceWave\"", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 743); ac++;
    XtSetArg(args[ac], XmNheight, 156); ac++;
    _lbRefineMacro = XmCreateLabel(_foRefineMacro,
        "lbRefineMacro",
        args, 
        ac);
    XtManageChild(_lbRefineMacro);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 751); ac++;
    XtSetArg(args[ac], XmNheight, 211); ac++;
    _swRefineMacro = XmCreateScrolledWindow(_foRefine1,
        "swRefineMacro",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    _txRefineMacro = XmCreateText(_swRefineMacro,
        "txRefineMacro",
        args, 
        ac);
    XtManageChild(_txRefineMacro);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_txRefineMacro,
        XmNlosingFocusCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_txRefineMacro,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_txRefineMacro,
        XmNactivateCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 7); ac++;
    _seRefine4 = XmCreateSeparator(_foRefine1,
        "seRefine4",
        args, 
        ac);
    XtManageChild(_seRefine4);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbRefineRun = XmCreatePushButton(_foRefine1,
        "pbRefineRun",
        args, 
        ac);
    XtManageChild(_pbRefineRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbRefineRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Look for solutions that match a known spacegroup";
    XtAddCallback(_pbRefineRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbRefineRun,
        XmNactivateCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 428); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 20); ac++;
    _seRefine = XmCreateSeparator(_foRefine1,
        "seRefine",
        args, 
        ac);
    XtManageChild(_seRefine);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDisplay = XmCreateToggleButton(_foRefine1,
        "tbRefineDisplay",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDisplay,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDisplay,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -display option in dtrefine";
    XtAddCallback(_tbRefineDisplay,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foRefine1, _appDefaults, "cUIom9RefineMacros", True);
#endif
    _cUIom9RefineMacros = new CUIom9("cUIom9RefineMacros");
    
    // Begin user code block <new_cUIom9RefineMacros>
    // End user code block <new_cUIom9RefineMacros>
    
    _cUIom9RefineMacros->create(_foRefine1);
    _cUIom9RefineMacros->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 250); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    XtSetValues(_cUIom9RefineMacros->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineMacros = XmCreateLabel(_foRefine1,
        "lbRefineMacros",
        args, 
        ac);
    XtManageChild(_lbRefineMacros);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 390); ac++;
    _foRefine = XmCreateForm(_foRefine1,
        "foRefine",
        args, 
        ac);
    XtManageChild(_foRefine);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 174); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineTestMosaicity = XmCreateToggleButton(_foRefine,
        "tbRefineTestMosaicity",
        args, 
        ac);
    XtManageChild(_tbRefineTestMosaicity);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineTestMosaicity,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineTestMosaicity,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Test crystal mosaicity values";
    XtAddCallback(_tbRefineTestMosaicity,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineSourceRots = XmCreateToggleButton(_foRefine,
        "tbRefineSourceRots",
        args, 
        ac);
    XtManageChild(_tbRefineSourceRots);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRots,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRots,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix 2 source rotations";
    XtAddCallback(_tbRefineSourceRots,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 7); ac++;
    _seRefine3 = XmCreateSeparator(_foRefine,
        "seRefine3",
        args, 
        ac);
    XtManageChild(_seRefine3);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 7); ac++;
    _seRefine2 = XmCreateSeparator(_foRefine,
        "seRefine2",
        args, 
        ac);
    XtManageChild(_seRefine2);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalMosaicity = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalMosaicity",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalMosaicity);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalMosaicity,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalMosaicity,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal mosaicity";
    XtAddCallback(_tbRefineCrystalMosaicity,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 45); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalCell = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalCell",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalCell);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalCell,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalCell,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix all 6 cell parameters";
    XtAddCallback(_tbRefineCrystalCell,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 45); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetAll = XmCreateToggleButton(_foRefine,
        "tbRefineDetAll",
        args, 
        ac);
    XtManageChild(_tbRefineDetAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetAll,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetAll,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix all 6 detector position parameters";
    XtAddCallback(_tbRefineDetAll,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalAll = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalAll",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAll,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAll,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix all 6 cell parameters, 3 crystal rotations and mosaicity";
    XtAddCallback(_tbRefineCrystalAll,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineRelWeight = XmCreateTextField(_foRefine,
        "tfRefineRelWeight",
        args, 
        ac);
    XtManageChild(_tfRefineRelWeight);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineRelWeight,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineRelWeight,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineRelWeight,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineCycles = XmCreateTextField(_foRefine,
        "tfRefineCycles",
        args, 
        ac);
    XtManageChild(_tfRefineCycles);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineCycles,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineCycles,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineCycles,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineReject3 = XmCreateTextField(_foRefine,
        "tfRefineReject3",
        args, 
        ac);
    XtManageChild(_tfRefineReject3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject3,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject3,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject3,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineReject2 = XmCreateTextField(_foRefine,
        "tfRefineReject2",
        args, 
        ac);
    XtManageChild(_tfRefineReject2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject2,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject2,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineReject1 = XmCreateTextField(_foRefine,
        "tfRefineReject1",
        args, 
        ac);
    XtManageChild(_tfRefineReject1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject1,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject1,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 125); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineCycles = XmCreateLabel(_foRefine,
        "lbRefineCycles",
        args, 
        ac);
    XtManageChild(_lbRefineCycles);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 125); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineRelWeight = XmCreateLabel(_foRefine,
        "lbRefineRelWeight",
        args, 
        ac);
    XtManageChild(_lbRefineRelWeight);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineReject = XmCreateLabel(_foRefine,
        "lbRefineReject",
        args, 
        ac);
    XtManageChild(_lbRefineReject);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seRefine1 = XmCreateSeparator(_foRefine,
        "seRefine1",
        args, 
        ac);
    XtManageChild(_seRefine1);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineSourceWavelength = XmCreateToggleButton(_foRefine,
        "tbRefineSourceWavelength",
        args, 
        ac);
    XtManageChild(_tbRefineSourceWavelength);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceWavelength,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceWavelength,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix source wavelength";
    XtAddCallback(_tbRefineSourceWavelength,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineSourceRot2 = XmCreateToggleButton(_foRefine,
        "tbRefineSourceRot2",
        args, 
        ac);
    XtManageChild(_tbRefineSourceRot2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRot2,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRot2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix source direction 2";
    XtAddCallback(_tbRefineSourceRot2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineSourceRot1 = XmCreateToggleButton(_foRefine,
        "tbRefineSourceRot1",
        args, 
        ac);
    XtManageChild(_tbRefineSourceRot1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRot1,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineSourceRot1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix source direction 1";
    XtAddCallback(_tbRefineSourceRot1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetRots = XmCreateToggleButton(_foRefine,
        "tbRefineDetRots",
        args, 
        ac);
    XtManageChild(_tbRefineDetRots);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRots,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRots,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix all detector rotations";
    XtAddCallback(_tbRefineDetRots,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetTrans = XmCreateToggleButton(_foRefine,
        "tbRefineDetTrans",
        args, 
        ac);
    XtManageChild(_tbRefineDetTrans);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix all detector translations";
    XtAddCallback(_tbRefineDetTrans,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetRot3 = XmCreateToggleButton(_foRefine,
        "tbRefineDetRot3",
        args, 
        ac);
    XtManageChild(_tbRefineDetRot3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot3,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot3,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix detector rotation 3";
    XtAddCallback(_tbRefineDetRot3,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetRot2 = XmCreateToggleButton(_foRefine,
        "tbRefineDetRot2",
        args, 
        ac);
    XtManageChild(_tbRefineDetRot2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot2,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix detector swing or theta angle";
    XtAddCallback(_tbRefineDetRot2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetRot1 = XmCreateToggleButton(_foRefine,
        "tbRefineDetRot1",
        args, 
        ac);
    XtManageChild(_tbRefineDetRot1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot1,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetRot1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix detector rotation around source";
    XtAddCallback(_tbRefineDetRot1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetTrans3 = XmCreateToggleButton(_foRefine,
        "tbRefineDetTrans3",
        args, 
        ac);
    XtManageChild(_tbRefineDetTrans3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans3,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans3,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal to detector distance";
    XtAddCallback(_tbRefineDetTrans3,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetTrans2 = XmCreateToggleButton(_foRefine,
        "tbRefineDetTrans2",
        args, 
        ac);
    XtManageChild(_tbRefineDetTrans2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans2,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix detector translation 2";
    XtAddCallback(_tbRefineDetTrans2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineDetTrans1 = XmCreateToggleButton(_foRefine,
        "tbRefineDetTrans1",
        args, 
        ac);
    XtManageChild(_tbRefineDetTrans1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans1,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineDetTrans1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix detector translation 1";
    XtAddCallback(_tbRefineDetTrans1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineSource = XmCreateLabel(_foRefine,
        "lbRefineSource",
        args, 
        ac);
    XtManageChild(_lbRefineSource);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineDet = XmCreateLabel(_foRefine,
        "lbRefineDet",
        args, 
        ac);
    XtManageChild(_lbRefineDet);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalRots = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalRots",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalRots);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRots,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRots,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal rotations 1,2,3";
    XtAddCallback(_tbRefineCrystalRots,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalAngles = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalAngles",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalAngles);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAngles,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAngles,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell angles alpha*, beta*, gamma*";
    XtAddCallback(_tbRefineCrystalAngles,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalLengths = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalLengths",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalLengths);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalLengths,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalLengths,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell lengths a*, b*, c*";
    XtAddCallback(_tbRefineCrystalLengths,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalRot2 = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalRot2",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalRot2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot2,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot2,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal rotation 2";
    XtAddCallback(_tbRefineCrystalRot2,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalRot1 = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalRot1",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalRot1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot1,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot1,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal rotation 1";
    XtAddCallback(_tbRefineCrystalRot1,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalRot3 = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalRot3",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalRot3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot3,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalRot3,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix crystal rotation 3";
    XtAddCallback(_tbRefineCrystalRot3,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalGammastar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalGammastar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalGammastar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalGammastar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalGammastar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell angle gamma*";
    XtAddCallback(_tbRefineCrystalGammastar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalBetastar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalBetastar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalBetastar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalBetastar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalBetastar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell angle beta*";
    XtAddCallback(_tbRefineCrystalBetastar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalAlphastar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalAlphastar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalAlphastar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAlphastar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAlphastar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell angle alpha*";
    XtAddCallback(_tbRefineCrystalAlphastar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalCstar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalCstar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalCstar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalCstar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalCstar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell length c*";
    XtAddCallback(_tbRefineCrystalCstar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalBstar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalBstar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalBstar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalBstar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalBstar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell length b*";
    XtAddCallback(_tbRefineCrystalBstar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineCrystal = XmCreateLabel(_foRefine,
        "lbRefineCrystal",
        args, 
        ac);
    XtManageChild(_lbRefineCrystal);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 105); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbRefineCrystalAstar = XmCreateToggleButton(_foRefine,
        "tbRefineCrystalAstar",
        args, 
        ac);
    XtManageChild(_tbRefineCrystalAstar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAstar,
        XmNvalueChangedCallback,
        MainWindow::vRefineCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbRefineCrystalAstar,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Fix/unfix cell length a*";
    XtAddCallback(_tbRefineCrystalAstar,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineResolution2 = XmCreateTextField(_foRefine,
        "tfRefineResolution2",
        args, 
        ac);
    XtManageChild(_tfRefineResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution2,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution2,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineResolution1 = XmCreateTextField(_foRefine,
        "tfRefineResolution1",
        args, 
        ac);
    XtManageChild(_tfRefineResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution1,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution1,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfRefineSigma = XmCreateTextField(_foRefine,
        "tfRefineSigma",
        args, 
        ac);
    XtManageChild(_tfRefineSigma);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineSigma,
        XmNlosingFocusCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineSigma,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineSigma,
        XmNactivateCallback,
        MainWindow::vRefineTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineResolution = XmCreateLabel(_foRefine,
        "lbRefineResolution",
        args, 
        ac);
    XtManageChild(_lbRefineResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbRefineSigma = XmCreateLabel(_foRefine,
        "lbRefineSigma",
        args, 
        ac);
    XtManageChild(_lbRefineSigma);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 488); ac++;
    _frIndex = XmCreateFrame(_foMain,
        "frIndex",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 482); ac++;
    _foIndex = XmCreateForm(_frIndex,
        "foIndex",
        args, 
        ac);
    XtManageChild(_foIndex);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 159); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexMethod = XmCreateLabel(_foIndex,
        "lbIndexMethod",
        args, 
        ac);
    XtManageChild(_lbIndexMethod);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 201); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 32); ac++;
    _tbIndexDiffs = XmCreateToggleButton(_foIndex,
        "tbIndexDiffs",
        args, 
        ac);
    XtManageChild(_tbIndexDiffs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexDiffs,
        XmNvalueChangedCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexDiffs,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Do NOT use difference vectors";
    XtAddCallback(_tbIndexDiffs,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foIndex, _appDefaults, "omIndexMethod", True);
#endif
    _omIndexMethod = new CUIom9("omIndexMethod");
    
    // Begin user code block <new_omIndexMethod>
    // End user code block <new_omIndexMethod>
    
    _omIndexMethod->create(_foIndex);
    _omIndexMethod->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 375); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    XtSetValues(_omIndexMethod->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexSigma = XmCreateTextField(_foIndex,
        "tfIndexSigma",
        args, 
        ac);
    XtManageChild(_tfIndexSigma);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSigma,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSigma,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSigma,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexResolution2 = XmCreateTextField(_foIndex,
        "tfIndexResolution2",
        args, 
        ac);
    XtManageChild(_tfIndexResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution2,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution2,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexResolution1 = XmCreateTextField(_foIndex,
        "tfIndexResolution1",
        args, 
        ac);
    XtManageChild(_tfIndexResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution1,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexResolution1,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foIndex, "Resolution:", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexResolution = XmCreateLabel(_foIndex,
        "lbIndexResolution",
        args, 
        ac);
    XtManageChild(_lbIndexResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexSigma = XmCreateLabel(_foIndex,
        "lbIndexSigma",
        args, 
        ac);
    XtManageChild(_lbIndexSigma);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 277); ac++;
    XtSetArg(args[ac], XmNy, 112); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 32); ac++;
    _tbIndexAdvanced = XmCreateToggleButton(_foIndex,
        "tbIndexAdvanced",
        args, 
        ac);
    XtManageChild(_tbIndexAdvanced);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexAdvanced,
        XmNvalueChangedCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexAdvanced,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show advanced options";
    XtAddCallback(_tbIndexAdvanced,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexMaxResid = XmCreateTextField(_foIndex,
        "tfIndexMaxResid",
        args, 
        ac);
    XtManageChild(_tfIndexMaxResid);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxResid,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxResid,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxResid,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexMaxResid = XmCreateLabel(_foIndex,
        "lbIndexMaxResid",
        args, 
        ac);
    XtManageChild(_lbIndexMaxResid);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexSpacegroup = XmCreateTextField(_foIndex,
        "tfIndexSpacegroup",
        args, 
        ac);
    XtManageChild(_tfIndexSpacegroup);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSpacegroup,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSpacegroup,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSpacegroup,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 35); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexSpacegroup = XmCreateLabel(_foIndex,
        "lbIndexSpacegroup",
        args, 
        ac);
    XtManageChild(_lbIndexSpacegroup);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _tbIndexKnown = XmCreateToggleButton(_foIndex,
        "tbIndexKnown",
        args, 
        ac);
    XtManageChild(_tbIndexKnown);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexKnown,
        XmNvalueChangedCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexKnown,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Specify whether solutions should match a known cell";
    XtAddCallback(_tbIndexKnown,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 442); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbIndexRun = XmCreatePushButton(_foIndex,
        "pbIndexRun",
        args, 
        ac);
    XtManageChild(_pbIndexRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIndexRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Index spots with dtindex to get crystal cell and orientation";
    XtAddCallback(_pbIndexRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIndexRun,
        XmNactivateCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 5); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _tbIndexPrompt = XmCreateToggleButton(_foIndex,
        "tbIndexPrompt",
        args, 
        ac);
    XtManageChild(_tbIndexPrompt);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexPrompt,
        XmNvalueChangedCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexPrompt,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Specify whether to let user choose the solution in dtindex";
    XtAddCallback(_tbIndexPrompt,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 273); ac++;
    XtSetArg(args[ac], XmNy, 238); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 32); ac++;
    _tbIndexList = XmCreateToggleButton(_foIndex,
        "tbIndexList",
        args, 
        ac);
    XtManageChild(_tbIndexList);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexList,
        XmNvalueChangedCallback,
        MainWindow::vIndexCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbIndexList,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"List detector properties in output";
    XtAddCallback(_tbIndexList,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorAngle3 = XmCreateTextField(_foIndex,
        "tfIndexErrorAngle3",
        args, 
        ac);
    XtManageChild(_tfIndexErrorAngle3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle3,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle3,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle3,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorAngle2 = XmCreateTextField(_foIndex,
        "tfIndexErrorAngle2",
        args, 
        ac);
    XtManageChild(_tfIndexErrorAngle2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle2,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle2,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorAngle1 = XmCreateTextField(_foIndex,
        "tfIndexErrorAngle1",
        args, 
        ac);
    XtManageChild(_tfIndexErrorAngle1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle1,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle1,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorLength3 = XmCreateTextField(_foIndex,
        "tfIndexErrorLength3",
        args, 
        ac);
    XtManageChild(_tfIndexErrorLength3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength3,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength3,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength3,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorLength2 = XmCreateTextField(_foIndex,
        "tfIndexErrorLength2",
        args, 
        ac);
    XtManageChild(_tfIndexErrorLength2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength2,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength2,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexErrorLength1 = XmCreateTextField(_foIndex,
        "tfIndexErrorLength1",
        args, 
        ac);
    XtManageChild(_tfIndexErrorLength1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength1,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength1,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexGrid = XmCreateTextField(_foIndex,
        "tfIndexGrid",
        args, 
        ac);
    XtManageChild(_tfIndexGrid);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexGrid,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexGrid,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexGrid,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexMaxCell = XmCreateTextField(_foIndex,
        "tfIndexMaxCell",
        args, 
        ac);
    XtManageChild(_tfIndexMaxCell);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxCell,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxCell,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxCell,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfIndexMaxDiffs = XmCreateTextField(_foIndex,
        "tfIndexMaxDiffs",
        args, 
        ac);
    XtManageChild(_tfIndexMaxDiffs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxDiffs,
        XmNlosingFocusCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxDiffs,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxDiffs,
        XmNactivateCallback,
        MainWindow::vIndexTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexErrorAngle = XmCreateLabel(_foIndex,
        "lbIndexErrorAngle",
        args, 
        ac);
    XtManageChild(_lbIndexErrorAngle);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexErrorLength = XmCreateLabel(_foIndex,
        "lbIndexErrorLength",
        args, 
        ac);
    XtManageChild(_lbIndexErrorLength);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 427); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seIndex = XmCreateSeparator(_foIndex,
        "seIndex",
        args, 
        ac);
    XtManageChild(_seIndex);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexGrid = XmCreateLabel(_foIndex,
        "lbIndexGrid",
        args, 
        ac);
    XtManageChild(_lbIndexGrid);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexMaxCell = XmCreateLabel(_foIndex,
        "lbIndexMaxCell",
        args, 
        ac);
    XtManageChild(_lbIndexMaxCell);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbIndexMaxDiffs = XmCreateLabel(_foIndex,
        "lbIndexMaxDiffs",
        args, 
        ac);
    XtManageChild(_lbIndexMaxDiffs);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frFind = XmCreateFrame(_foMain,
        "frFind",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 484); ac++;
    _foFind = XmCreateForm(_frFind,
        "foFind",
        args, 
        ac);
    XtManageChild(_foFind);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindResolution1 = XmCreateTextField(_foFind,
        "tfFindResolution1",
        args, 
        ac);
    XtManageChild(_tfFindResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution1,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution1,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindResolution2 = XmCreateTextField(_foFind,
        "tfFindResolution2",
        args, 
        ac);
    XtManageChild(_tfFindResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution2,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindResolution2,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindResolution = XmCreateLabel(_foFind,
        "lbFindResolution",
        args, 
        ac);
    XtManageChild(_lbFindResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 199); ac++;
    XtSetArg(args[ac], XmNwidth, 180); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbFindMore = XmCreateToggleButton(_foFind,
        "tbFindMore",
        args, 
        ac);
    XtManageChild(_tbFindMore);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFindMore,
        XmNvalueChangedCallback,
        MainWindow::vFindCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 429); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seFind1 = XmCreateSeparator(_foFind,
        "seFind1",
        args, 
        ac);
    XtManageChild(_seFind1);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 302); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbFindRun = XmCreatePushButton(_foFind,
        "pbFindRun",
        args, 
        ac);
    XtManageChild(_pbFindRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFindRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Run dtfind program to find spots";
    XtAddCallback(_pbFindRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFindRun,
        XmNactivateCallback,
        MainWindow::vFindCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNindicatorSize, 17); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 387); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbFind3D = XmCreateToggleButton(_foFind,
        "tbFind3D",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFind3D,
        XmNvalueChangedCallback,
        MainWindow::vFindCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFind3D,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -3D option in dtfind";
    XtAddCallback(_tbFind3D,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tbFindDisplay = XmCreateToggleButton(_foFind,
        "tbFindDisplay",
        args, 
        ac);
    XtManageChild(_tbFindDisplay);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFindDisplay,
        XmNvalueChangedCallback,
        MainWindow::vFindCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbFindDisplay,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use -display option in dtfind";
    XtAddCallback(_tbFindDisplay,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindDump = XmCreateTextField(_foFind,
        "tfFindDump",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindDump,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindDump,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindDump,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindRect4 = XmCreateTextField(_foFind,
        "tfFindRect4",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect4,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect4,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect4,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindRect3 = XmCreateTextField(_foFind,
        "tfFindRect3",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect3,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect3,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect3,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindRect2 = XmCreateTextField(_foFind,
        "tfFindRect2",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect2,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect2,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindRect1 = XmCreateTextField(_foFind,
        "tfFindRect1",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect1,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect1,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindCircle4 = XmCreateTextField(_foFind,
        "tfFindCircle4",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle4,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle4,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle4,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindCircle3 = XmCreateTextField(_foFind,
        "tfFindCircle3",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle3,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle3,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle3,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindCircle2 = XmCreateTextField(_foFind,
        "tfFindCircle2",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle2,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle2,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindCircle1 = XmCreateTextField(_foFind,
        "tfFindCircle1",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle1,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle1,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindBackRect2 = XmCreateTextField(_foFind,
        "tfFindBackRect2",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect2,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect2,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindBackRect1 = XmCreateTextField(_foFind,
        "tfFindBackRect1",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect1,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect1,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindPadding = XmCreateTextField(_foFind,
        "tfFindPadding",
        args, 
        ac);
    XtManageChild(_tfFindPadding);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindPadding,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindPadding,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindPadding,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindWindow2 = XmCreateTextField(_foFind,
        "tfFindWindow2",
        args, 
        ac);
    XtManageChild(_tfFindWindow2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow2,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow2,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindWindow1 = XmCreateTextField(_foFind,
        "tfFindWindow1",
        args, 
        ac);
    XtManageChild(_tfFindWindow1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow1,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow1,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindFilter = XmCreateTextField(_foFind,
        "tfFindFilter",
        args, 
        ac);
    XtManageChild(_tfFindFilter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindFilter,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindFilter,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindFilter,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindMin = XmCreateTextField(_foFind,
        "tfFindMin",
        args, 
        ac);
    XtManageChild(_tfFindMin);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindMin,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindMin,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindMin,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindSigma = XmCreateTextField(_foFind,
        "tfFindSigma",
        args, 
        ac);
    XtManageChild(_tfFindSigma);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSigma,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSigma,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSigma,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindSeqEnd = XmCreateTextField(_foFind,
        "tfFindSeqEnd",
        args, 
        ac);
    XtManageChild(_tfFindSeqEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqEnd,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfFindSeqStart = XmCreateTextField(_foFind,
        "tfFindSeqStart",
        args, 
        ac);
    XtManageChild(_tfFindSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqStart,
        XmNactivateCallback,
        MainWindow::vFindTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindDump = XmCreateLabel(_foFind,
        "lbFindDump",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindRect = XmCreateLabel(_foFind,
        "lbFindRect",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindCircle = XmCreateLabel(_foFind,
        "lbFindCircle",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindBackRect = XmCreateLabel(_foFind,
        "lbFindBackRect",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _seFind = XmCreateSeparator(_foFind,
        "seFind",
        args, 
        ac);
    XtManageChild(_seFind);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindPadding = XmCreateLabel(_foFind,
        "lbFindPadding",
        args, 
        ac);
    XtManageChild(_lbFindPadding);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindWindow = XmCreateLabel(_foFind,
        "lbFindWindow",
        args, 
        ac);
    XtManageChild(_lbFindWindow);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindFilter = XmCreateLabel(_foFind,
        "lbFindFilter",
        args, 
        ac);
    XtManageChild(_lbFindFilter);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindMin = XmCreateLabel(_foFind,
        "lbFindMin",
        args, 
        ac);
    XtManageChild(_lbFindMin);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindSigma = XmCreateLabel(_foFind,
        "lbFindSigma",
        args, 
        ac);
    XtManageChild(_lbFindSigma);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFindSeq = XmCreateLabel(_foFind,
        "lbFindSeq",
        args, 
        ac);
    XtManageChild(_lbFindSeq);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 762); ac++;
    XtSetArg(args[ac], XmNheight, 490); ac++;
    _frCalibrate = XmCreateFrame(_foMain,
        "frCalibrate",
        args, 
        ac);
    XtManageChild(_frCalibrate);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    _foCalibrate = XmCreateForm(_frCalibrate,
        "foCalibrate",
        args, 
        ac);
    XtManageChild(_foCalibrate);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 161); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _tbCalibrateModeSmall = XmCreateToggleButton(_foCalibrate,
        "tbCalibrateModeSmall",
        args, 
        ac);
    XtManageChild(_tbCalibrateModeSmall);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbCalibrateModeSmall,
        XmNvalueChangedCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbCalibrateModeSmall,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Use small molecule features inauto mode";
    XtAddCallback(_tbCalibrateModeSmall,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 161); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _tbCalibrateIndexPrompt = XmCreateToggleButton(_foCalibrate,
        "tbCalibrateIndexPrompt",
        args, 
        ac);
    XtManageChild(_tbCalibrateIndexPrompt);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbCalibrateIndexPrompt,
        XmNvalueChangedCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbCalibrateIndexPrompt,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Specify whether to let user choose the solution in dtindex";
    XtAddCallback(_tbCalibrateIndexPrompt,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 185); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibratedTREKPrefix = XmCreateTextField(_foCalibrate,
        "tfCalibratedTREKPrefix",
        args, 
        ac);
    XtManageChild(_tfCalibratedTREKPrefix);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibratedTREKPrefix,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibratedTREKPrefix,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibratedTREKPrefix,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibratedTREKPrefix = XmCreateLabel(_foCalibrate,
        "lbCalibratedTREKPrefix",
        args, 
        ac);
    XtManageChild(_lbCalibratedTREKPrefix);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateWindow2 = XmCreateTextField(_foCalibrate,
        "tfCalibrateWindow2",
        args, 
        ac);
    XtManageChild(_tfCalibrateWindow2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow2,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow2,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateWindow1 = XmCreateTextField(_foCalibrate,
        "tfCalibrateWindow1",
        args, 
        ac);
    XtManageChild(_tfCalibrateWindow1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow1,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateWindow1,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateWindow = XmCreateLabel(_foCalibrate,
        "lbCalibrateWindow",
        args, 
        ac);
    XtManageChild(_lbCalibrateWindow);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateResolution1 = XmCreateTextField(_foCalibrate,
        "tfCalibrateResolution1",
        args, 
        ac);
    XtManageChild(_tfCalibrateResolution1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution1,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution1,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateResolution2 = XmCreateTextField(_foCalibrate,
        "tfCalibrateResolution2",
        args, 
        ac);
    XtManageChild(_tfCalibrateResolution2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution2,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateResolution2,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateResolution = XmCreateLabel(_foCalibrate,
        "lbCalibrateResolution",
        args, 
        ac);
    XtManageChild(_lbCalibrateResolution);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateSpacegroup = XmCreateLabel(_foCalibrate,
        "lbCalibrateSpacegroup",
        args, 
        ac);
    XtManageChild(_lbCalibrateSpacegroup);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateSpacegroup = XmCreateTextField(_foCalibrate,
        "tfCalibrateSpacegroup",
        args, 
        ac);
    XtManageChild(_tfCalibrateSpacegroup);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpacegroup,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpacegroup,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpacegroup,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foCalibrate, "Det swing (deg):", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateDetTheta = XmCreateLabel(_foCalibrate,
        "lbCalibrateDetTheta",
        args, 
        ac);
    XtManageChild(_lbCalibrateDetTheta);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateDetTheta = XmCreateTextField(_foCalibrate,
        "tfCalibrateDetTheta",
        args, 
        ac);
    XtManageChild(_tfCalibrateDetTheta);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetTheta,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetTheta,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetTheta,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateDetDist = XmCreateTextField(_foCalibrate,
        "tfCalibrateDetDist",
        args, 
        ac);
    XtManageChild(_tfCalibrateDetDist);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetDist,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetDist,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDetDist,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 300); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateDetDist = XmCreateLabel(_foCalibrate,
        "lbCalibrateDetDist",
        args, 
        ac);
    XtManageChild(_lbCalibrateDetDist);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foCalibrate, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrateTemplate = XmCreatePushButton(_foCalibrate,
        "pbCalibrateTemplate",
        args, 
        ac);
    XtManageChild(_pbCalibrateTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateTemplate,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Browse for scan template";
    XtAddCallback(_pbCalibrateTemplate,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateTemplate,
        XmNactivateCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 535); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateTemplate = XmCreateTextField(_foCalibrate,
        "tfCalibrateTemplate",
        args, 
        ac);
    XtManageChild(_tfCalibrateTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateTemplate,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateTemplate,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateTemplate,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateTemplate = XmCreateLabel(_foCalibrate,
        "lbCalibrateTemplate",
        args, 
        ac);
    XtManageChild(_lbCalibrateTemplate);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foCalibrate, _appDefaults, "cUIomCalibrateSpatial", True);
#endif
    _cUIomCalibrateSpatial = new CUIom9("cUIomCalibrateSpatial");
    
    // Begin user code block <new_cUIomCalibrateSpatial>
    // End user code block <new_cUIomCalibrateSpatial>
    
    _cUIomCalibrateSpatial->create(_foCalibrate);
    _cUIomCalibrateSpatial->manage();
    
    //
    // Set exposed resources.
    //
    _cUIomCalibrateSpatial->set_pb8_userData((XtPointer)10);
    _cUIomCalibrateSpatial->set_pb7_userData((XtPointer)10);
    _cUIomCalibrateSpatial->set_pb6_userData((XtPointer)10);
    _cUIomCalibrateSpatial->set_pb5_userData((XtPointer)10);
    _cUIomCalibrateSpatial->set_pb4_userData((XtPointer)10);
    _cUIomCalibrateSpatial->set_pb3_userData((XtPointer)10);
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 303); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    XtSetValues(_cUIomCalibrateSpatial->baseWidget(), args, ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foCalibrate, _appDefaults, "cUIomCalibrateNonunf", True);
#endif
    _cUIomCalibrateNonunf = new CUIom9("cUIomCalibrateNonunf");
    
    // Begin user code block <new_cUIomCalibrateNonunf>
    // End user code block <new_cUIomCalibrateNonunf>
    
    _cUIomCalibrateNonunf->create(_foCalibrate);
    _cUIomCalibrateNonunf->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 303); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    XtSetValues(_cUIomCalibrateNonunf->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 240); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateNonunfNonunf = XmCreateTextField(_foCalibrate,
        "tfCalibrateNonunfNonunf",
        args, 
        ac);
    XtManageChild(_tfCalibrateNonunfNonunf);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfNonunf,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfNonunf,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfNonunf,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 245); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateNonunfNonunf = XmCreateLabel(_foCalibrate,
        "lbCalibrateNonunfNonunf",
        args, 
        ac);
    XtManageChild(_lbCalibrateNonunfNonunf);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foCalibrate, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrateNonunfNonunf = XmCreatePushButton(_foCalibrate,
        "pbCalibrateNonunfNonunf",
        args, 
        ac);
    XtManageChild(_pbCalibrateNonunfNonunf);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateNonunfNonunf,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select non-uniformity or mask file";
    XtAddCallback(_pbCalibrateNonunfNonunf,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateNonunfNonunf,
        XmNactivateCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 240); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateNonunfDark = XmCreateTextField(_foCalibrate,
        "tfCalibrateNonunfDark",
        args, 
        ac);
    XtManageChild(_tfCalibrateNonunfDark);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfDark,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfDark,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateNonunfDark,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateNonunfDark = XmCreateLabel(_foCalibrate,
        "lbCalibrateNonunfDark",
        args, 
        ac);
    XtManageChild(_lbCalibrateNonunfDark);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foCalibrate, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrateNonunfDark = XmCreatePushButton(_foCalibrate,
        "pbCalibrateNonunfDark",
        args, 
        ac);
    XtManageChild(_pbCalibrateNonunfDark);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateNonunfDark,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select dark file";
    XtAddCallback(_pbCalibrateNonunfDark,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateNonunfDark,
        XmNactivateCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 350); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 245); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateNonunf = XmCreateLabel(_foCalibrate,
        "lbCalibrateNonunf",
        args, 
        ac);
    XtManageChild(_lbCalibrateNonunf);
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_foCalibrate, "...", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrateSpatialInterp = XmCreatePushButton(_foCalibrate,
        "pbCalibrateSpatialInterp",
        args, 
        ac);
    XtManageChild(_pbCalibrateSpatialInterp);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateSpatialInterp,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select spatial distortion table basename";
    XtAddCallback(_pbCalibrateSpatialInterp,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateSpatialInterp,
        XmNactivateCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 240); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateSpatialInterp = XmCreateTextField(_foCalibrate,
        "tfCalibrateSpatialInterp",
        args, 
        ac);
    XtManageChild(_tfCalibrateSpatialInterp);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialInterp,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialInterp,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialInterp,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 200); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateSpatialInterp = XmCreateLabel(_foCalibrate,
        "lbCalibrateSpatialInterp",
        args, 
        ac);
    XtManageChild(_lbCalibrateSpatialInterp);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateSpatialSimple2 = XmCreateTextField(_foCalibrate,
        "tfCalibrateSpatialSimple2",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple2,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple2,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateSpatialSimple1 = XmCreateTextField(_foCalibrate,
        "tfCalibrateSpatialSimple1",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple1,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple1,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateSpatialSimple = XmCreateLabel(_foCalibrate,
        "lbCalibrateSpatialSimple",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 245); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateSpatial = XmCreateLabel(_foCalibrate,
        "lbCalibrateSpatial",
        args, 
        ac);
    XtManageChild(_lbCalibrateSpatial);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 150); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbCalibrateDirectBeam = XmCreateLabel(_foCalibrate,
        "lbCalibrateDirectBeam",
        args, 
        ac);
    XtManageChild(_lbCalibrateDirectBeam);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateDirBeam2 = XmCreateTextField(_foCalibrate,
        "tfCalibrateDirBeam2",
        args, 
        ac);
    XtManageChild(_tfCalibrateDirBeam2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam2,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam2,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam2,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfCalibrateDirBeam1 = XmCreateTextField(_foCalibrate,
        "tfCalibrateDirBeam1",
        args, 
        ac);
    XtManageChild(_tfCalibrateDirBeam1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam1,
        XmNlosingFocusCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam1,
        XmNlosingFocusCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam1,
        XmNactivateCallback,
        MainWindow::vCalibrateTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 429); ac++;
    XtSetArg(args[ac], XmNwidth, 756); ac++;
    XtSetArg(args[ac], XmNheight, 10); ac++;
    _seCalibrate = XmCreateSeparator(_foCalibrate,
        "seCalibrate",
        args, 
        ac);
    XtManageChild(_seCalibrate);
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 189); ac++;
    XtSetArg(args[ac], XmNy, 444); ac++;
    XtSetArg(args[ac], XmNwidth, 378); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrateRun = XmCreatePushButton(_foCalibrate,
        "pbCalibrateRun",
        args, 
        ac);
    XtManageChild(_pbCalibrateRun);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateRun,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Write header dtprocess.head";
    XtAddCallback(_pbCalibrateRun,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrateRun,
        XmNactivateCallback,
        MainWindow::vCalibrateCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 138); ac++;
    XtSetArg(args[ac], XmNheight, 43); ac++;
    _lbCommand = XmCreateLabel(_foMain,
        "lbCommand",
        args, 
        ac);
    XtManageChild(_lbCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 490); ac++;
    XtSetArg(args[ac], XmNwidth, 938); ac++;
    XtSetArg(args[ac], XmNheight, 44); ac++;
    _tfCommand = XmCreateTextField(_foMain,
        "tfCommand",
        args, 
        ac);
    XtManageChild(_tfCommand);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCommand,
        XmNactivateCallback,
        MainWindow::vCommandCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _swOutput = XmCreateScrolledWindow(_foMain,
        "swOutput",
        args, 
        ac);
    XtManageChild(_swOutput);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    XtSetArg(args[ac], XmNscrollLeftSide, True); ac++;
    _txOutput = XmCreateText(_swOutput,
        "txOutput",
        args, 
        ac);
    XtManageChild(_txOutput);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foMain, _appDefaults, "cslImages", True);
#endif
    _cslImages = new CUIscrolledlist("cslImages");
    
    // Begin user code block <new_cslImages>
    // End user code block <new_cslImages>
    
    _cslImages->create(_foMain);
    _cslImages->manage();
    
    //
    // Set exposed resources.
    //
    _cslImages->set_cuiscrolledlist_height((XtPointer)342);
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 174); ac++;
    XtSetValues(_cslImages->baseWidget(), args, ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foMain, _appDefaults, "cslHeader", True);
#endif
    _cslHeader = new CUIscrolledlist("cslHeader");
    
    // Begin user code block <new_cslHeader>
    // End user code block <new_cslHeader>
    
    _cslHeader->create(_foMain);
    _cslHeader->manage();
    
    //
    // Set exposed resources.
    //
    _cslHeader->set_cuiscrolledlist_height((XtPointer)142);
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 174); ac++;
    XtSetValues(_cslHeader->baseWidget(), args, ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foMain, _appDefaults, "cslReflnlist", True);
#endif
    _cslReflnlist = new CUIscrolledlist("cslReflnlist");
    
    // Begin user code block <new_cslReflnlist>
    // End user code block <new_cslReflnlist>
    
    _cslReflnlist->create(_foMain);
    
    //
    // Set exposed resources.
    //
    _cslReflnlist->set_cuiscrolledlist_height((XtPointer)363);
    _cslReflnlist->set_lilist_selectionPolicy((XtPointer)XmSINGLE_SELECT);
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 170); ac++;
    XtSetValues(_cslReflnlist->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 174); ac++;
    XtSetArg(args[ac], XmNheight, 488); ac++;
    _frLists = XmCreateFrame(_foMain,
        "frLists",
        args, 
        ac);
    XtManageChild(_frLists);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 65); ac++;
    XtSetArg(args[ac], XmNwidth, 152); ac++;
    XtSetArg(args[ac], XmNheight, 425); ac++;
    _frFlowchart = XmCreateFrame(_foMain,
        "frFlowchart",
        args, 
        ac);
    XtManageChild(_frFlowchart);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginHeight, 2); ac++;
    XtSetArg(args[ac], XmNmarginWidth, 2); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 146); ac++;
    XtSetArg(args[ac], XmNheight, 419); ac++;
    _daFlowchart = XmCreateDrawingArea(_frFlowchart,
        "daFlowchart",
        args, 
        ac);
    XtManageChild(_daFlowchart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_daFlowchart,
        XmNexposeCallback,
        MainWindow::vDAExposeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 14); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbCalibrate = XmCreatePushButton(_daFlowchart,
        "pbCalibrate",
        args, 
        ac);
    XtManageChild(_pbCalibrate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrate,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Setup menu";
    XtAddCallback(_pbCalibrate,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCalibrate,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbFind = XmCreatePushButton(_daFlowchart,
        "pbFind",
        args, 
        ac);
    XtManageChild(_pbFind);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFind,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Find menu to find reflections";
    XtAddCallback(_pbFind,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFind,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 105); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbIndex = XmCreatePushButton(_daFlowchart,
        "pbIndex",
        args, 
        ac);
    XtManageChild(_pbIndex);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIndex,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Index menu to index reflections";
    XtAddCallback(_pbIndex,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIndex,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 150); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbRefine = XmCreatePushButton(_daFlowchart,
        "pbRefine",
        args, 
        ac);
    XtManageChild(_pbRefine);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbRefine,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Refine menu to refine crystal, detector and source properties";
    XtAddCallback(_pbRefine,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbRefine,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 195); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbPredict = XmCreatePushButton(_daFlowchart,
        "pbPredict",
        args, 
        ac);
    XtManageChild(_pbPredict);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbPredict,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Predict menu to predict reflections";
    XtAddCallback(_pbPredict,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbPredict,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 285); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbIntegrate = XmCreatePushButton(_daFlowchart,
        "pbIntegrate",
        args, 
        ac);
    XtManageChild(_pbIntegrate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIntegrate,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Integrate menu to integrate reflections in a scan of images";
    XtAddCallback(_pbIntegrate,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbIntegrate,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 330); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbMerge = XmCreatePushButton(_daFlowchart,
        "pbMerge",
        args, 
        ac);
    XtManageChild(_pbMerge);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMerge,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the dtreflnmerge menu to merge one or more reflnlists";
    XtAddCallback(_pbMerge,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbMerge,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 375); ac++;
    XtSetArg(args[ac], XmNwidth, 140); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbScale = XmCreatePushButton(_daFlowchart,
        "pbScale",
        args, 
        ac);
    XtManageChild(_pbScale);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScale,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Scale/Average menu to scale and average a reflnlist";
    XtAddCallback(_pbScale,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScale,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    XtSetArg(args[ac], XmNx, 4); ac++;
    XtSetArg(args[ac], XmNy, 240); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbOrient = XmCreatePushButton(_daFlowchart,
        "pbOrient",
        args, 
        ac);
    XtManageChild(_pbOrient);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbOrient,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Orient menu to re-orient the crystal";
    XtAddCallback(_pbOrient,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbOrient,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    XtSetArg(args[ac], XmNx, 74); ac++;
    XtSetArg(args[ac], XmNy, 240); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbStrategy = XmCreatePushButton(_daFlowchart,
        "pbStrategy",
        args, 
        ac);
    XtManageChild(_pbStrategy);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategy,
        XmNdisarmCallback,
        MainWindow::vUnpostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Show the Strategy menu to calculate best rotation start and range";
    XtAddCallback(_pbStrategy,
        XmNarmCallback,
        MainWindow::vPostHelpCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbStrategy,
        XmNactivateCallback,
        MainWindow::vFlowChartCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
#if defined(cxx_bx_compat)
    setAppDefaults(_foMain, _appDefaults, "cUIomMode", True);
#endif
    _cUIomMode = new CUIom9("cUIomMode");
    
    // Begin user code block <new_cUIomMode>
    // End user code block <new_cUIomMode>
    
    _cUIomMode->create(_foMain);
    _cUIomMode->manage();
    
    //
    // Set exposed resources.
    //
    _cUIomMode->set_pb8_userData((XtPointer)10);
    _cUIomMode->set_pb7_userData((XtPointer)10);
    _cUIomMode->set_pb6_userData((XtPointer)10);
    _cUIomMode->set_pb5_userData((XtPointer)10);
    _cUIomMode->set_pb4_userData((XtPointer)10);
    _cUIomMode->set_pb3_userData((XtPointer)10);
    ac = 0;
    XtSetArg(args[ac], XmNx, -14); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 166); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    XtSetValues(_cUIomMode->baseWidget(), args, ac);
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frLogfile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _pbLogfileYes); ac++;
    XtSetValues(_pbLogfileClear, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _pbLogfileReturn); ac++;
    XtSetValues(_pbLogfileNo, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbLogfileAutoscroll); ac++;
    XtSetValues(_pbLogfileReturn, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _pbLogfileNo); ac++;
    XtSetValues(_pbLogfileYes, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 4); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_tbLogfileAutoscroll, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 7); ac++;
    XtSetArg(args[ac], XmNleftOffset, 110); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbLogfileInput, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftOffset, 6); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_pbLogfileAbort, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 7); ac++;
    XtSetArg(args[ac], XmNrightOffset, 180); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbLogfileAutoscroll); ac++;
    XtSetValues(_abLogfileSearch, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 7); ac++;
    XtSetArg(args[ac], XmNleftOffset, 110); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_lbLogfileSearch, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 7); ac++;
    XtSetArg(args[ac], XmNleftOffset, 210); ac++;
    XtSetArg(args[ac], XmNrightOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbLogfileAutoscroll); ac++;
    XtSetValues(_tfLogfileSearch, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _seLogfile); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_swLogfile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftOffset, 6); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_pbLogfileDismiss, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 4); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _tfLogfileSearch); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_seLogfile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cslHeader->baseWidget()); ac++;
    XtSetValues(_cslLogfile->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frStrategy, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyLScale); ac++;
    XtSetValues(_tbStrategyAnom, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyList); ac++;
    XtSetValues(_tbStrategyRef, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 1); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfStrategyPredicted); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfStrategyPredicted); ac++;
    XtSetValues(_pbStrategyPredicted, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 160); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyPredicted); ac++;
    XtSetValues(_tfStrategyPredicted, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyPrevious); ac++;
    XtSetValues(_tbStrategyPredicted, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyAnom); ac++;
    XtSetValues(_tbStrategyPrevious, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 20); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbStrategyPrevious); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyPrevious); ac++;
    XtSetValues(_tfStrategyPrevious, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 1); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfStrategyPrevious); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfStrategyPrevious); ac++;
    XtSetValues(_pbStrategyPrevious, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbStrategyRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_seStrategy, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbStrategyRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbStrategyPredicted); ac++;
    XtSetValues(_tbStrategyList, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfStrategyRotStepCoarse); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfStrategyRotStepCoarse); ac++;
    XtSetValues(_tfStrategyRotStepFine, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 160); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRotStep); ac++;
    XtSetValues(_tfStrategyRotStepCoarse, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfStrategyResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfStrategyResolution1); ac++;
    XtSetValues(_tfStrategyResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbStrategyResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyResolution); ac++;
    XtSetValues(_tfStrategyResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbStrategyRotRangeMax); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRotRangeMax); ac++;
    XtSetValues(_tfStrategyRotRangeMax, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbStrategyCompleteness); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyCompleteness); ac++;
    XtSetValues(_tfStrategyCompleteness, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbStrategyLScale); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyLScale); ac++;
    XtSetValues(_tfStrategyLScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfStrategyRotStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfStrategyRotStart); ac++;
    XtSetValues(_tfStrategyRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbStrategyRot); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRot); ac++;
    XtSetValues(_tfStrategyRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRotRangeMax); ac++;
    XtSetValues(_lbStrategyRotStep, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRot); ac++;
    XtSetValues(_lbStrategyResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyCompleteness); ac++;
    XtSetValues(_lbStrategyRotRangeMax, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyResolution); ac++;
    XtSetValues(_lbStrategyCompleteness, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbStrategyRotStep); ac++;
    XtSetValues(_lbStrategyLScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbStrategyRot, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frFlowchart); ac++;
    XtSetValues(_lbMode, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, -1); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 100); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbScaleAnom); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbScaleAnom); ac++;
    XtSetValues(_tbScaleScaleAnom, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 1); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleResolution); ac++;
    XtSetValues(_tfScaleResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfScaleResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScaleResolution1); ac++;
    XtSetValues(_tfScaleResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleCycles); ac++;
    XtSetValues(_lbScaleResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _cUIom9ScaleUnavgOutput->baseWidget()); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIom9ScaleUnavgOutput->baseWidget()); ac++;
    XtSetValues(_lbScaleUnavgOutput, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _pbScaleUnAvg); ac++;
    XtSetArg(args[ac], XmNtopWidget, _pbScaleUnAvg); ac++;
    XtSetValues(_cUIom9ScaleUnavgOutput->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -1); ac++;
    XtSetArg(args[ac], XmNleftWidget, _pbScaleMergeFile); ac++;
    XtSetArg(args[ac], XmNtopWidget, _pbScaleMergeFile); ac++;
    XtSetValues(_tbScaleNoHeader, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _pbScaleUnAvg); ac++;
    XtSetArg(args[ac], XmNtopWidget, _pbScaleUnAvg); ac++;
    XtSetValues(_tbScaleTexsan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleAbscorReject); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleAbscorReject); ac++;
    XtSetValues(_tfScaleAbscorReject, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 280); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_lbScaleAbscorReject, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 280); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbScaleAbscor, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 415); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_cUIom9ScaleAbscor->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfScaleUnAvg); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScaleUnAvg); ac++;
    XtSetValues(_pbScaleUnAvg, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbScaleUnaverage); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbScaleUnaverage); ac++;
    XtSetValues(_tfScaleUnAvg, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfScaleMergeFile); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScaleMergeFile); ac++;
    XtSetValues(_pbScaleMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleMergeFile); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleMergeFile); ac++;
    XtSetValues(_tfScaleMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 25); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbScaleUnaverage); ac++;
    XtSetValues(_lbScaleMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbScaleAnom); ac++;
    XtSetValues(_tbScaleUnaverage, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleErrorAdd); ac++;
    XtSetValues(_lbScaleCycles, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleCycles); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleCycles); ac++;
    XtSetValues(_tfScaleCycles, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleFixedBatch); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleFixedBatch); ac++;
    XtSetValues(_tfScaleFixedBatch, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 280); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleErrorMul); ac++;
    XtSetValues(_lbScaleFixedBatch, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleFixedB); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleFixedB); ac++;
    XtSetValues(_tfScaleFixedB, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleFixedScale); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleFixedScale); ac++;
    XtSetValues(_tfScaleFixedScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleFixedBatch); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleFixedBatch); ac++;
    XtSetValues(_lbScaleFixedScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleFixedScale); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleFixedScale); ac++;
    XtSetValues(_lbScaleFixedB, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleSigma); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleSigma); ac++;
    XtSetValues(_tfScaleSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbScaleRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleErrorMul); ac++;
    XtSetValues(_lbScaleErrorAdd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleErrorAdd); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleErrorAdd); ac++;
    XtSetValues(_tfScaleErrorAdd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleReject); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleReject); ac++;
    XtSetValues(_tfScaleReject, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleSigma); ac++;
    XtSetValues(_lbScaleReject, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 20); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleResolution); ac++;
    XtSetValues(_tbScaleAnom, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfScaleFixedB); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScaleFixedB); ac++;
    XtSetValues(_tbScaleFixB, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbScaleErrorMul); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleErrorMul); ac++;
    XtSetValues(_tfScaleErrorMul, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbScaleReject); ac++;
    XtSetValues(_lbScaleErrorMul, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbScaleRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_seScale, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frMerge, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfMergeMergeFile); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfMergeMergeFile); ac++;
    XtSetValues(_pbMergeMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbMergeMergeFile); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbMergeMergeFile); ac++;
    XtSetValues(_tfMergeMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 360); ac++;
    XtSetValues(_lbMergeMergeFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbMergeRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbMergeRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_seMerge, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frIntegrate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 369); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegratePadding); ac++;
    XtSetValues(_lbIntegratePrerefine, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, -2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegratePrerefine); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegratePrerefine); ac++;
    XtSetValues(_cUIom9IntegratePrerefine->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateProfSize2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateBatchPrefix); ac++;
    XtSetValues(_tbIntegrateNopurge, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateMinPeakRadius); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateMinPeakRadius); ac++;
    XtSetValues(_tfIntegrateMinPeakRadius, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegratePadding); ac++;
    XtSetValues(_lbIntegrateMinPeakRadius, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, -5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 7); ac++;
    XtSetArg(args[ac], XmNtopOffset, 4); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tfIntegrateResolution1); ac++;
    XtSetValues(_cUIom9IntegrateSpecial->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbIntegrateRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_seIntegrate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbIntegrateRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 8); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 225); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateProfSize2); ac++;
    XtSetValues(_tbIntegrateDisplay, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateDump); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateDump); ac++;
    XtSetValues(_tfIntegrateDump, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateProfSize1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateProfSize1); ac++;
    XtSetValues(_tfIntegrateProfSize2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateProfSize); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateProfSize); ac++;
    XtSetValues(_tfIntegrateProfSize1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateResolution1); ac++;
    XtSetValues(_tfIntegrateResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateResolution); ac++;
    XtSetValues(_tfIntegrateResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateResolution1); ac++;
    XtSetValues(_tbIntegrateSpecial1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbIntegrateSpecial1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbIntegrateSpecial1); ac++;
    XtSetValues(_tbIntegrateSpecial2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbIntegrateSpecial2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbIntegrateSpecial2); ac++;
    XtSetValues(_tbIntegrateSpecial3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
//+2010-02-04 JWP
// Since tbIntegrateSpecial1-3 will no longer be managed, change attachment for 4. 
//    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;

    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
//    XtSetArg(args[ac], XmNleftWidget, _tbIntegrateSpecial3); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateResolution1); ac++;
//-2010-02-04 JWP
    XtSetArg(args[ac], XmNtopWidget, _tbIntegrateSpecial3); ac++;
    XtSetValues(_tbIntegrateSpecial4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegratePadding); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegratePadding); ac++;
    XtSetValues(_tfIntegratePadding, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateWindow1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateWindow1); ac++;
    XtSetValues(_tfIntegrateWindow2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateWindow); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateWindow); ac++;
    XtSetValues(_tfIntegrateWindow1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateBatchNum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateBatchNum); ac++;
    XtSetValues(_tfIntegrateBatchNum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateBatchPrefix); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateBatchPrefix); ac++;
    XtSetValues(_tfIntegrateBatchPrefix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegrateWait); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateWait); ac++;
    XtSetValues(_tfIntegrateWait, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateSeqStart); ac++;
    XtSetValues(_tfIntegrateSeqEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIntegrateResolution1); ac++;
    XtSetValues(_tfIntegrateSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateWait); ac++;
    XtSetValues(_lbIntegrateDump, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateMinPeakRadius); ac++;
    XtSetValues(_lbIntegrateProfSize, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 42); ac++;
    XtSetValues(_lbIntegrateResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIntegrateBatchPrefix); ac++;
    XtSetValues(_seIntegrate1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateWindow); ac++;
    XtSetValues(_lbIntegratePadding, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateResolution); ac++;
    XtSetValues(_lbIntegrateWindow, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateProfSize); ac++;
    XtSetValues(_lbIntegrateBatchNum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegrateBatchNum); ac++;
    XtSetValues(_lbIntegrateBatchPrefix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seIntegrate1); ac++;
    XtSetValues(_lbIntegrateWait, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbIntegrateSeq, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frOrient, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 205); ac++;
    XtSetValues(_lbOrient1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 6); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfOrientRot); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientRot); ac++;
    XtSetValues(_lbOrientRotDegrees, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientRot); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientRot); ac++;
    XtSetValues(_tfOrientRot, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientRotDegrees); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientRotDegrees); ac++;
    XtSetValues(_cUIomOrientLab3->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 255); ac++;
    XtSetValues(_lbOrientRot, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIomOrientCrystal2->baseWidget()); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomOrientCrystal2->baseWidget()); ac++;
    XtSetValues(_lbOrientParallel2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIomOrientCrystal1->baseWidget()); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomOrientCrystal1->baseWidget()); ac++;
    XtSetValues(_lbOrientParallel1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientLab2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientLab2); ac++;
    XtSetValues(_cUIomOrientLab2->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientLab1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomOrientCrystal1->baseWidget()); ac++;
    XtSetValues(_cUIomOrientLab1->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientCrystal2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientCrystal2); ac++;
    XtSetValues(_cUIomOrientCrystal2->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientParallel2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientParallel2); ac++;
    XtSetValues(_lbOrientLab2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientParallel1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbOrientCrystal1); ac++;
    XtSetValues(_lbOrientLab1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 145); ac++;
    XtSetValues(_lbOrientCrystal2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 90); ac++;
    XtSetValues(_lbOrientCrystal1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 90); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbOrientCrystal1); ac++;
    XtSetValues(_cUIomOrientCrystal1->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_pbOrientRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbOrientRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_seOrient, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbOrient, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frPredict, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 1); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPredictMosaicity); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictMosaicity); ac++;
    XtSetValues(_tfPredictMosaicity, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 15); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictResolution); ac++;
    XtSetValues(_lbPredictMosaicity, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbPredictRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 15); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictRot); ac++;
    XtSetValues(_lbPredictResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfPredictResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfPredictResolution1); ac++;
    XtSetValues(_tfPredictResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPredictResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictResolution); ac++;
    XtSetValues(_tfPredictResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPredictSeq); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictSeq); ac++;
    XtSetValues(_tfPredictSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfPredictSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfPredictSeqStart); ac++;
    XtSetValues(_tfPredictSeqEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbPredictSeq, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 34); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 225); ac++;
    XtSetValues(_tbPredictList, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 35); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbPredictList); ac++;
    XtSetValues(_tbPredictNonunf, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfPredictRotStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfPredictRotStart); ac++;
    XtSetValues(_tfPredictRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbPredictRot); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictRot); ac++;
    XtSetValues(_tfPredictRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 15); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbPredictSeq); ac++;
    XtSetValues(_lbPredictRot, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 360); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetValues(_tbPredictDisplay, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbPredictRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_sePredict, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frRefine, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 9); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 1); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIom9RefineMacros->baseWidget()); ac++;
    XtSetValues(_lbRefineRefln, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, -5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineRefln); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbRefinePrompt); ac++;
    XtSetValues(_cUIom9RefineRefln->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_tbRefinePrompt, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, -2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _seRefine); ac++;
    XtSetArg(args[ac], XmNleftOffset, 3); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_foRefineMacro, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbRefineMacro, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 8); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _foRefineMacro); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seRefine4); ac++;
    XtSetValues(_swRefineMacro, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_seRefine4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_pbRefineRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 428); ac++;
    XtSetValues(_seRefine, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 6); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIom9RefineRefln->baseWidget()); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefinePrompt); ac++;
    XtSetValues(_tbRefineDisplay, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineMacros); ac++;
    XtSetValues(_cUIom9RefineMacros->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 4); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seRefine4); ac++;
    XtSetValues(_foRefine, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineSourceWavelength); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfRefineReject3); ac++;
    XtSetValues(_tbRefineTestMosaicity, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineSource); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSource); ac++;
    XtSetValues(_tbRefineSourceRots, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetAll); ac++;
    XtSetValues(_seRefine3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalMosaicity); ac++;
    XtSetValues(_seRefine2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalRot1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalRot1); ac++;
    XtSetValues(_tbRefineCrystalMosaicity, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbRefineCrystalAngles); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAngles); ac++;
    XtSetValues(_tbRefineCrystalCell, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tbRefineDetRots); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans); ac++;
    XtSetValues(_tbRefineDetAll, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalCell); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalRots); ac++;
    XtSetValues(_tbRefineCrystalAll, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineRelWeight); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineRelWeight); ac++;
    XtSetValues(_tfRefineRelWeight, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 1); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineCycles); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineCycles); ac++;
    XtSetValues(_tfRefineCycles, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRefineReject2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfRefineReject2); ac++;
    XtSetValues(_tfRefineReject3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRefineReject1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfRefineReject1); ac++;
    XtSetValues(_tfRefineReject2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineReject); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineReject); ac++;
    XtSetValues(_tfRefineReject1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineRelWeight); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSigma); ac++;
    XtSetValues(_lbRefineCycles, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRefineResolution2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfRefineResolution2); ac++;
    XtSetValues(_lbRefineRelWeight, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineResolution); ac++;
    XtSetValues(_lbRefineReject, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSource); ac++;
    XtSetValues(_seRefine1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineSourceRot2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineSourceRot2); ac++;
    XtSetValues(_tbRefineSourceWavelength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineSourceRot1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineSourceRot1); ac++;
    XtSetValues(_tbRefineSourceRot2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 105); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineSource); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSource); ac++;
    XtSetValues(_tbRefineSourceRot1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetTrans); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans); ac++;
    XtSetValues(_tbRefineDetRots, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineDet); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineDet); ac++;
    XtSetValues(_tbRefineDetTrans, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetRot2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetRot2); ac++;
    XtSetValues(_tbRefineDetRot3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetRot1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetRot1); ac++;
    XtSetValues(_tbRefineDetRot2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetTrans1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans1); ac++;
    XtSetValues(_tbRefineDetRot1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetTrans2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans2); ac++;
    XtSetValues(_tbRefineDetTrans3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetTrans1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans1); ac++;
    XtSetValues(_tbRefineDetTrans2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineDetTrans); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineDetTrans); ac++;
    XtSetValues(_tbRefineDetTrans1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seRefine3); ac++;
    XtSetValues(_lbRefineSource, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seRefine2); ac++;
    XtSetValues(_lbRefineDet, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalAngles); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAngles); ac++;
    XtSetValues(_tbRefineCrystalRots, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalLengths); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalLengths); ac++;
    XtSetValues(_tbRefineCrystalAngles, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineCrystal); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineCrystal); ac++;
    XtSetValues(_tbRefineCrystalLengths, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalRot1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalRot1); ac++;
    XtSetValues(_tbRefineCrystalRot2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalAlphastar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAlphastar); ac++;
    XtSetValues(_tbRefineCrystalRot1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalRot2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalRot2); ac++;
    XtSetValues(_tbRefineCrystalRot3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalBetastar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalBetastar); ac++;
    XtSetValues(_tbRefineCrystalGammastar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalAlphastar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAlphastar); ac++;
    XtSetValues(_tbRefineCrystalBetastar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalAstar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAstar); ac++;
    XtSetValues(_tbRefineCrystalAlphastar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalBstar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalBstar); ac++;
    XtSetValues(_tbRefineCrystalCstar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalAstar); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalAstar); ac++;
    XtSetValues(_tbRefineCrystalBstar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbRefineCrystal, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbRefineCrystalLengths); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbRefineCrystalLengths); ac++;
    XtSetValues(_tbRefineCrystalAstar, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRefineResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfRefineResolution1); ac++;
    XtSetValues(_tfRefineResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineResolution); ac++;
    XtSetValues(_tfRefineResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbRefineSigma); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSigma); ac++;
    XtSetValues(_tfRefineSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbRefineSigma); ac++;
    XtSetValues(_lbRefineResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seRefine1); ac++;
    XtSetValues(_lbRefineSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frIndex, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 159); ac++;
    XtSetValues(_lbIndexMethod, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 201); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbIndexList); ac++;
    XtSetValues(_tbIndexDiffs, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, -12); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexMethod); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMethod); ac++;
    XtSetValues(_omIndexMethod->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexSigma); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexSigma); ac++;
    XtSetValues(_tfIndexSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIndexResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexResolution1); ac++;
    XtSetValues(_tfIndexResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexResolution); ac++;
    XtSetValues(_tfIndexResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 13); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbIndexAdvanced); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexSpacegroup); ac++;
    XtSetValues(_lbIndexResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexMaxResid); ac++;
    XtSetValues(_lbIndexSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 277); ac++;
    XtSetArg(args[ac], XmNtopOffset, 112); ac++;
    XtSetValues(_tbIndexAdvanced, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexMaxResid); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMaxResid); ac++;
    XtSetValues(_tfIndexMaxResid, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexSpacegroup); ac++;
    XtSetValues(_lbIndexMaxResid, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexSpacegroup); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexSpacegroup); ac++;
    XtSetValues(_tfIndexSpacegroup, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 35); ac++;
    XtSetValues(_lbIndexSpacegroup, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 4); ac++;
    XtSetArg(args[ac], XmNtopOffset, 17); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexGrid); ac++;
    XtSetValues(_tbIndexKnown, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbIndexRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_tbIndexPrompt, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 273); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 238); ac++;
    XtSetValues(_tbIndexList, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIndexErrorAngle2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexErrorAngle2); ac++;
    XtSetValues(_tfIndexErrorAngle3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIndexErrorAngle1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexErrorAngle1); ac++;
    XtSetValues(_tfIndexErrorAngle2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexErrorAngle); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexErrorAngle); ac++;
    XtSetValues(_tfIndexErrorAngle1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIndexErrorLength2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexErrorLength2); ac++;
    XtSetValues(_tfIndexErrorLength3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfIndexErrorLength1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfIndexErrorLength1); ac++;
    XtSetValues(_tfIndexErrorLength2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 160); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexErrorLength); ac++;
    XtSetValues(_tfIndexErrorLength1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexGrid); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexGrid); ac++;
    XtSetValues(_tfIndexGrid, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexMaxCell); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMaxCell); ac++;
    XtSetValues(_tfIndexMaxCell, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIndexMaxDiffs); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMaxDiffs); ac++;
    XtSetValues(_tfIndexMaxDiffs, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexErrorLength); ac++;
    XtSetValues(_lbIndexErrorAngle, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 9); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tbIndexKnown); ac++;
    XtSetValues(_lbIndexErrorLength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbIndexRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_seIndex, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMaxDiffs); ac++;
    XtSetValues(_lbIndexGrid, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMaxResid); ac++;
    XtSetValues(_lbIndexMaxCell, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIndexMethod); ac++;
    XtSetValues(_lbIndexMaxDiffs, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frFind, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindResolution); ac++;
    XtSetValues(_tfFindResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindResolution1); ac++;
    XtSetValues(_tfFindResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbFindDisplay); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindSigma); ac++;
    XtSetValues(_lbFindResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 20); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 199); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindWindow2); ac++;
    XtSetValues(_tbFindMore, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbFindRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetValues(_seFind1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 60); ac++;
    XtSetArg(args[ac], XmNleftPosition, 40); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbFindRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 387); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbFindDisplay); ac++;
    XtSetValues(_tbFind3D, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 20); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindSeqEnd); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindSeqEnd); ac++;
    XtSetValues(_tbFindDisplay, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindDump); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindDump); ac++;
    XtSetValues(_tfFindDump, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindRect3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindRect3); ac++;
    XtSetValues(_tfFindRect4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindRect2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindRect2); ac++;
    XtSetValues(_tfFindRect3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindRect1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindRect1); ac++;
    XtSetValues(_tfFindRect2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindRect); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindRect); ac++;
    XtSetValues(_tfFindRect1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindCircle3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindCircle3); ac++;
    XtSetValues(_tfFindCircle4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindCircle2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindCircle2); ac++;
    XtSetValues(_tfFindCircle3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindCircle1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindCircle1); ac++;
    XtSetValues(_tfFindCircle2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 160); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindCircle); ac++;
    XtSetValues(_tfFindCircle1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindBackRect1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindBackRect1); ac++;
    XtSetValues(_tfFindBackRect2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindBackRect); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindBackRect); ac++;
    XtSetValues(_tfFindBackRect1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindPadding); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindPadding); ac++;
    XtSetValues(_tfFindPadding, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindWindow1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindWindow1); ac++;
    XtSetValues(_tfFindWindow2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindWindow); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindWindow); ac++;
    XtSetValues(_tfFindWindow1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindFilter); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindFilter); ac++;
    XtSetValues(_tfFindFilter, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindMin); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindMin); ac++;
    XtSetValues(_tfFindMin, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindSigma); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindSigma); ac++;
    XtSetValues(_tfFindSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfFindSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindSeqStart); ac++;
    XtSetValues(_tfFindSeqEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFindSeq); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindSeq); ac++;
    XtSetValues(_tfFindSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindRect); ac++;
    XtSetValues(_lbFindDump, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindCircle); ac++;
    XtSetValues(_lbFindRect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindBackRect); ac++;
    XtSetValues(_lbFindCircle, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _seFind); ac++;
    XtSetValues(_lbFindBackRect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfFindPadding); ac++;
    XtSetValues(_seFind, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindWindow); ac++;
    XtSetValues(_lbFindPadding, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindFilter); ac++;
    XtSetValues(_lbFindWindow, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindMin); ac++;
    XtSetValues(_lbFindFilter, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindSigma); ac++;
    XtSetValues(_lbFindMin, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbFindSeq); ac++;
    XtSetValues(_lbFindSigma, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbFindSeq, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, -2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetValues(_frCalibrate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -35); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateResolution2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateResolution2); ac++;
    XtSetValues(_tbCalibrateModeSmall, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateSpacegroup); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateSpacegroup); ac++;
    XtSetValues(_tbCalibrateIndexPrompt, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibratedTREKPrefix); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibratedTREKPrefix); ac++;
    XtSetValues(_tfCalibratedTREKPrefix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 185); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpatial); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateSpatial); ac++;
    XtSetValues(_lbCalibratedTREKPrefix, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateWindow1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateWindow1); ac++;
    XtSetValues(_tfCalibrateWindow2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateWindow); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateWindow); ac++;
    XtSetValues(_tfCalibrateWindow1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpacegroup); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateSpacegroup); ac++;
    XtSetValues(_lbCalibrateWindow, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateResolution); ac++;
    XtSetValues(_tfCalibrateResolution1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateResolution1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateResolution1); ac++;
    XtSetValues(_tfCalibrateResolution2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 110); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateDetDist); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDetDist); ac++;
    XtSetValues(_lbCalibrateResolution, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateResolution); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateResolution); ac++;
    XtSetValues(_lbCalibrateSpacegroup, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpacegroup); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateSpacegroup); ac++;
    XtSetValues(_tfCalibrateSpacegroup, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDetDist); ac++;
    XtSetValues(_lbCalibrateDetTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 1); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateDetTheta); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDetTheta); ac++;
    XtSetValues(_tfCalibrateDetTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateDetDist); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDetDist); ac++;
    XtSetValues(_tfCalibrateDetDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 300); ac++;
    XtSetValues(_lbCalibrateDetDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateTemplate); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateTemplate); ac++;
    XtSetValues(_pbCalibrateTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateTemplate); ac++;
    XtSetArg(args[ac], XmNrightWidget, _tfCalibrateResolution2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateTemplate); ac++;
    XtSetValues(_tfCalibrateTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbCalibrateTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpatial); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomCalibrateNonunf->baseWidget()); ac++;
    XtSetValues(_cUIomCalibrateSpatial->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateNonunf); ac++;
    XtSetValues(_cUIomCalibrateNonunf->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateNonunfNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateNonunfNonunf); ac++;
    XtSetValues(_tfCalibrateNonunfNonunf, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomCalibrateNonunf->baseWidget()); ac++;
    XtSetValues(_lbCalibrateNonunfNonunf, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateNonunfNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateNonunfNonunf); ac++;
    XtSetValues(_pbCalibrateNonunfNonunf, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateNonunfNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateNonunfDark); ac++;
    XtSetValues(_tfCalibrateNonunfDark, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateNonunfNonunf); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateNonunfNonunf); ac++;
    XtSetValues(_lbCalibrateNonunfDark, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateNonunfDark); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateNonunfDark); ac++;
    XtSetValues(_pbCalibrateNonunfDark, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 350); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_lbCalibrateNonunf, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateSpatialInterp); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateSpatialInterp); ac++;
    XtSetValues(_pbCalibrateSpatialInterp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpatialInterp); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateSpatialInterp); ac++;
    XtSetValues(_tfCalibrateSpatialInterp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, -5); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIomCalibrateSpatial->baseWidget()); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomCalibrateSpatial->baseWidget()); ac++;
    XtSetValues(_lbCalibrateSpatialInterp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateSpatialSimple1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateSpatialSimple1); ac++;
    XtSetValues(_tfCalibrateSpatialSimple2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateSpatialSimple); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateSpatialSimple); ac++;
    XtSetValues(_tfCalibrateSpatialSimple1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _cUIomCalibrateSpatial->baseWidget()); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cUIomCalibrateSpatial->baseWidget()); ac++;
    XtSetValues(_lbCalibrateSpatialSimple, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateNonunf); ac++;
    XtSetValues(_lbCalibrateSpatial, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDetTheta); ac++;
    XtSetValues(_lbCalibrateDirectBeam, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfCalibrateDirBeam1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCalibrateDirBeam1); ac++;
    XtSetValues(_tfCalibrateDirBeam2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbCalibrateDirectBeam); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCalibrateDirectBeam); ac++;
    XtSetValues(_tfCalibrateDirBeam1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _pbCalibrateRun); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_seCalibrate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightPosition, 75); ac++;
    XtSetArg(args[ac], XmNleftPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbCalibrateRun, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frFlowchart); ac++;
    XtSetValues(_lbCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _lbCommand); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFlowchart); ac++;
    XtSetValues(_tfCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCommand); ac++;
    XtSetValues(_swOutput, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cslHeader->baseWidget()); ac++;
    XtSetValues(_cslImages->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 23); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frLists); ac++;
    XtSetValues(_cslHeader->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frLists); ac++;
    XtSetArg(args[ac], XmNtopWidget, _cslHeader->baseWidget()); ac++;
    XtSetValues(_cslReflnlist->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFlowchart); ac++;
    XtSetValues(_frLists, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 65); ac++;
    XtSetValues(_frFlowchart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNleftOffset, -14); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frFlowchart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbMode); ac++;
    XtSetValues(_cUIomMode->baseWidget(), args, ac);
    
    
    // Begin user code block <endcreate>

    // Some bug in X servers make the original top offset of 0 give a
    // mis-aligned tbIntegrateSpecial4, so make it 5 here

    ac = 0;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_tbIntegrateSpecial4, args, ac);

    vPutMessage(D_K_DTREKVersion);

    // Get default print command

    char *pcTemp;
    pcTemp = XmTextFieldGetString(_tfLogfileSearch);
    if ( (NULL != pcTemp) && ('\0' != pcTemp[0]) )
      m_sFilePrintCommand = pcTemp;
    XtFree(pcTemp);
    XmTextFieldSetString(_tfLogfileSearch, "");

    // Unmanage some of the unset user command buttons

    int i;
    XmString sxLabel;
    Widget wTemp[6];
    wTemp[0] = _pbUtilsCommand1;
    wTemp[1] = _pbUtilsCommand2;
    wTemp[2] = _pbUtilsCommand3;
    wTemp[3] = _pbUtilsCommand4;
    wTemp[4] = _pbUtilsCommand5;
    wTemp[5] = _pbUtilsCommand6;
    for (i = 0; i < 6; i++)
      {
	if (NULL != wTemp[i])
	  {
	    XtVaGetValues(wTemp[i], XmNlabelString, &sxLabel,  NULL);
	    XmStringGetLtoR(sxLabel,
#if (XmVersion >= 1002)
			    XmFONTLIST_DEFAULT_TAG,
#else
			    XmSTRING_DEFAULT_CHARSET,
#endif
			    &pcTemp);
	    XmStringFree(sxLabel);
	    if ((Cstring)"" == (Cstring)pcTemp)
	      {
		XtUnmanageChild(wTemp[i]);
	      }
	    if (NULL != pcTemp)
	      XtFree(pcTemp);
	  }
      }

    // Setup some callbacks 

    _cUIomMode->m_pObj = (XtPointer)this;
    _cUIomMode->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIomMode->set_pb3_userData((XtPointer)3);
    _cUIomMode->vScanUnmanage();

    ac = 0;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, -14); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_cUIomMode->baseWidget(), args, ac);


    _omIndexMethod->m_pObj = (XtPointer)this;
    _omIndexMethod->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _omIndexMethod->vScanUnmanage();

    _cUIomOrientLab3->m_pObj = (XtPointer)this;
    _cUIomOrientLab3->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIomOrientLab2->m_pObj = (XtPointer)this;
    _cUIomOrientLab2->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIomOrientLab1->m_pObj = (XtPointer)this;
    _cUIomOrientLab1->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIomOrientCrystal2->m_pObj = (XtPointer)this;
    _cUIomOrientCrystal2->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIomOrientCrystal1->m_pObj = (XtPointer)this;
    _cUIomOrientCrystal1->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    
    _cUIom9RefineMacros->m_pObj = (XtPointer)this;
    _cUIom9RefineMacros->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;

    _cUIom9RefineRefln->m_pObj = (XtPointer)this;
    _cUIom9RefineRefln->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIom9RefineRefln->vScanUnmanage();

    _cUIomCalibrateSpatial->m_pObj = (XtPointer)this;
    _cUIomCalibrateSpatial->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;

    _cUIomCalibrateNonunf->m_pObj = (XtPointer)this;
    _cUIomCalibrateNonunf->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;

    _cUIom9ScaleAbscor->m_pObj = (XtPointer)this;
    _cUIom9ScaleAbscor->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIom9ScaleAbscor->vScanUnmanage();

    _cUIom9ScaleUnavgOutput->m_pObj = (XtPointer)this;
    _cUIom9ScaleUnavgOutput->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIom9ScaleUnavgOutput->vScanUnmanage();

    _cUIom9IntegrateSpecial->m_pObj = (XtPointer)this;
    _cUIom9IntegrateSpecial->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIom9IntegrateSpecial->vScanUnmanage();

    _cUIom9IntegratePrerefine->m_pObj = (XtPointer)this;
    _cUIom9IntegratePrerefine->m_prvCUIom9Callback
      = MainWindow::vCUIom9CBCallback;
    _cUIom9IntegratePrerefine->vScanUnmanage();

    // Fix up attachment of the om9IntegratePrerefine widget. 
    // Do this here, since when it is done above, it doesn't seem to take.

    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbIntegratePrerefine); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbIntegratePrerefine); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, -10); ac++;
    XtSetArg(args[ac], XmNtopOffset, -2); ac++;
    XtSetValues(_cUIom9IntegratePrerefine->baseWidget(), args, ac);
    
    _cUIheaderEdit->m_pObj = (XtPointer)this;
    _cUIheaderEdit->m_prvHeaderModNotifyCallback
      = MainWindow::vHeaderEditCBCallback;

    _cslHeader->vShowButtons(False);
    _cslHeader->set_lilist_selectionPolicy((XtPointer)XmSINGLE_SELECT);
    _cslHeader->m_pObj = (XtPointer)this;
    _cslHeader->m_prvScrolledListCallback = MainWindow::vScrolledListCBCallback;

    _cslImages->m_pObj = (XtPointer)this;
    _cslImages->m_prvScrolledListCallback = MainWindow::vScrolledListCBCallback;

    _cslReflnlist->vShowButtons(False);
    _cslReflnlist->m_pObj = (XtPointer)this;
    _cslReflnlist->m_prvScrolledListCallback = MainWindow::vScrolledListCBCallback;

    _cslLogfile->vShowButtons(False);
    _cslLogfile->m_pObj = (XtPointer)this;
    _cslLogfile->m_prvScrolledListCallback = MainWindow::vScrolledListCBCallback;

    _cUIfileFilter->m_pObj = (XtPointer)this;
    _cUIfileFilter->m_prvFileCallback = MainWindow::vFileFilterCBCallback;

    // Setup initial filtering of scrolled lists

    _cslHeader->vDeleteAll();
    if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
      _cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
    if ("" != m_sHeaderName)
      _cslHeader->vSetSelection(m_sHeaderName, True);

    _cslReflnlist->vDeleteAll();
    if (_cUIfileFilter->bDoSearch(m_sReflnlistMask))
      _cslReflnlist->vAddOtherList(_cUIfileFilter->wGetListWidget());
    if ("" != m_sReflnlistName)
      _cslReflnlist->vSetSelection(m_sReflnlistName, False);

    _cslLogfile->vDeleteAll();
    if (_cUIfileFilter->bDoSearch(m_sLogfileMask))
      _cslLogfile->vAddOtherList(_cUIfileFilter->wGetListWidget());
    if ("" != m_sLogfileName)
      _cslLogfile->vSetSelection(m_sLogfileName, False);


    // Draw triangle in drawing area

    XtRealizeWidget(parent);

    // Make sure flowchart mode is colored correctly

    _cUIomMode->vSetValue(_cUIomMode->nGetValue());
    vDrawInFlowChart(parent);
    
    // Fix up mbError message box display

    XtUnmanageChild(XmMessageBoxGetChild(_mbError, XmDIALOG_OK_BUTTON));
    XtUnmanageChild(XmMessageBoxGetChild(_mbError, XmDIALOG_HELP_BUTTON));

    // Fix up mbProgress message box display

    XtUnmanageChild(XmMessageBoxGetChild(_mbProgress, XmDIALOG_OK_BUTTON));
    XtUnmanageChild(XmMessageBoxGetChild(_mbProgress, XmDIALOG_HELP_BUTTON));

    // Methods for cursor manipulation
    
    m_poXcursor   = new CXcursor (_w); 

    // Create the help object

    m_poXhelp     = new CXhelp (_w);     // Methods for on-line help

    // Setup some things for help

    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_CALIBRATE], XmNuserData,
		  (XtPointer)"Calibrate$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_FIND],      XmNuserData,
		  (XtPointer)"Find$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_INDEX],     XmNuserData,
		  (XtPointer)"Index$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_REFINE],    XmNuserData,
		  (XtPointer)"Refine$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_PREDICT],   XmNuserData,
		  (XtPointer)"Predict$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_INTEGRATE], XmNuserData,
		  (XtPointer)"Integrate$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_MERGE],     XmNuserData,
		  (XtPointer)"Merge$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_SCALE],     XmNuserData,
		  (XtPointer)"Scale$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_ORIENT],    XmNuserData,
		  (XtPointer)"Orient$$", NULL);
    XtVaSetValues(*m_pwpbFlowChart[DTP_DLG_STRATEGY],  XmNuserData,
		  (XtPointer)"Strategy$$", NULL);
 
    // Initialize main window dialog

    vPutMessage("Copyright (c) 2006 Rigaku.  All rights reserved.");

    if (bFileExists(ms_sDefaultHeaderTemplateFile))
      (void) nLoadHeader(ms_sDefaultHeaderTemplateFile, TRUE);
    else
      {
	vPutMessage("WARNING, initial default header: "
                    + ms_sDefaultHeaderTemplateFile + " not found!");
      }
  
    // Initialize Calibrate menu option menus

    vCUIom9CB(this, _cUIomCalibrateSpatial->baseWidget(), 
	      (XtPointer)_cUIomCalibrateSpatial->nGetValue(), NULL);
    _cUIomCalibrateNonunf->vSetValue(3);
    vCUIom9CB(this, _cUIomCalibrateNonunf->baseWidget(), 
	      (XtPointer)_cUIomCalibrateNonunf->nGetValue(), NULL);

    // Initialize Refine menu macro option menu

    m_tDtrefineOptions.sRefineMacro[8] 
       = "-sigma 10\n"
         "+CrysAll -CrysMosaicity +DetAll -DetRot1\n"
         "+SourceRot -go\n"
         "-SourceRot +DetRot1 -go\n"
         "-DetRot1\n"
         "-name Rotation axis, cryst, det";
    m_tDtrefineOptions.sRefineMacro[7]
       = "-rej 2.5 2.5 1 -sigma 5 -cycles 30 +CrysAll +DetAll -verbose 0 -go -go -go -go\n" 
         "-rej 0.5 0.5 1 -sigma 5\n" 
	 "-name Small Molecule";
    m_tDtrefineOptions.sRefineMacro[6]
      =  "-cycles 30 -rej 1 1 2 -sigma 3 +CrysAll +DetAll\n"
         "-name Fit Most";
    m_tDtrefineOptions.sRefineMacro[5]
      =  "-cycles 30 -rej 1 1 2 -sigma 3 +All\n"
         "-name Fit All";
    m_tDtrefineOptions.sRefineMacro[4] 
      =  "-reso 100 .1 -sigma 2 -verbose 0\n"
         "+CrysAll +DetAll -DetRot1 -go\n"
         "-CrysRot3 +DetRot1 -go -verbose 1\n"
	 "+CrysRot3 -DetRot1\n"
         "-name Integrate";
    m_tDtrefineOptions.sRefineMacro[3]
      =  "-reso 100 3 -sigma 5\n"
         "+CrysRot -go\n"
         "+CrysAll -go\n"
	 "-CrysAll +DetAll -DetRot1 -go\n"
         "+DetAll +CrysAll\n"
         "-reso 100 .3\n"
         "-name Low reso, then all reso";
    m_tDtrefineOptions.sRefineMacro[2]
      =  "-reso 100 3 -sigma 5\n"
         "+CrysRot -go\n"
         "+CrysAll -go\n"
         "-CrysAll +DetAll -DetRot1 -go\n"
         "+DetAll +CrysAll\n"
         "-reso 100 .2\n"
         "-name Crystal, then all detector";
    m_tDtrefineOptions.sRefineMacro[1]
      =  "-reso 100 3 -sigma 5\n"
         "+DetAll -DetRot1 -go\n"
         "-DetAll +CrysRot -go\n"
         "+CrysAll -go\n"
         "-reso 100 .1 +DetAll\n"
         "-name Detector, then all crystal";

    // Initialize Find menu

    vFindCB(_tbFindMore, NULL, NULL);

    // Initialize Index menu advanced options

    vIndexCB(_tbIndexAdvanced, NULL, NULL);

    // Initialize Refine menu

    int nSave = _cUIom9RefineMacros->nGetValue();
    vRefineCB(_cUIom9RefineMacros->baseWidget(), (XtPointer)0, NULL);
    vRefineCB(_cUIom9RefineMacros->baseWidget(), (XtPointer)nSave, NULL);

    m_nFCActive    = DTP_DLG_CALIBRATE;
    m_wpbFlowChart = _pbCalibrate;
    m_wFCActive    = _frCalibrate;
    m_prvDialogCB  = &MainWindow::vCalibrateCB;
//    vFlowChartCB(_pbCalibrate, NULL, NULL);

#if (XmVersion >= 1002)
    // Add focusCallback's used in Motif 1.2 and higher

    m_nCDC = 0;
    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqStart,
		  XmNfocusCallback,
		  MainWindow::vPredictTextFieldCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vPredictTextFieldCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotStart,
		  XmNfocusCallback,
		  MainWindow::vPredictTextFieldCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotEnd,
		  XmNfocusCallback,
		  MainWindow::vPredictTextFieldCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Max resolution limit for predicting reflections";
    XtAddCallback(_tfPredictResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Min resolution limit for predicting reflections";
    XtAddCallback(_tfPredictResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Effective crystal mosaicity in degrees";
    XtAddCallback(_tfPredictMosaicity,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"File name for output merged reflnlist";
    XtAddCallback(_tfMergeMergeFile,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Logfile search string or input to subshell";
    XtAddCallback(_tfLogfileSearch,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"File name for scaled but unaveraged reflnlist";
    XtAddCallback(_tfScaleUnAvg,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"File name for the scaled and averaged reflnlist";
    XtAddCallback(_tfScaleMergeFile,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum number of cycles used in scaling";
    XtAddCallback(_tfScaleCycles,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Name of batch which is held fixed (reference batch)";
    XtAddCallback(_tfScaleFixedBatch,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"B factor of reference batch";
    XtAddCallback(_tfScaleFixedB,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Scale factor of reference batch";
    XtAddCallback(_tfScaleFixedScale,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum refln I/sigma to include in computing scale factors";
    XtAddCallback(_tfScaleSigma,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Batch scale factor restraint, 0 is unrestrained, 0.001 is highly restrained, 0.5 is just a little restrained";
    XtAddCallback(_tfScaleAbscorReject,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Factor to multiply Intensity by and then add to sigma";
    XtAddCallback(_tfScaleErrorAdd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Reject measurements which differ by more than this sigma from average";
    XtAddCallback(_tfScaleReject,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Factor to multiply sigmas by";
    XtAddCallback(_tfScaleErrorMul,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum resolution of reflections used in scaling AND output";
    XtAddCallback(_tfScaleResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum resolution of reflections used in scaling AND output";
    XtAddCallback(_tfScaleResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Write corrected shoebox every n refln";
    XtAddCallback(_tfIntegrateDump,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum image range for a reference profile";
    XtAddCallback(_tfIntegrateProfSize2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Number of images per refine batch: every 'refine batch'th image, refinement will occur";
    XtAddCallback(_tfIntegrateProfSize1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum peak radius in pixels";
    XtAddCallback(_tfIntegrateMinPeakRadius,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Max resolution limit for integrating reflections";
    XtAddCallback(_tfIntegrateResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Min resolution limit for integrating reflections";
    XtAddCallback(_tfIntegrateResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Pad each rocking curve by this many images at start and end;"
                   " Multiply refined mosaicity by MosMul and add MosAdd";
    XtAddCallback(_tfIntegratePadding,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"2nd dimension of integration box window";
    XtAddCallback(_tfIntegrateWindow2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"1st dimension of integration box window";
    XtAddCallback(_tfIntegrateWindow1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Number of images per scale batch; try to keep at 1";
    XtAddCallback(_tfIntegrateBatchNum,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Prefix added to all batch IDs. Helps identify reflns from separate scans with the same image numbers.";
    XtAddCallback(_tfIntegrateBatchPrefix,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Number of seconds to wait for an image before error";
    XtAddCallback(_tfIntegrateWait,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Last image sequence number to integrate";
    XtAddCallback(_tfIntegrateSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"First image sequence number to integrate";
    XtAddCallback(_tfIntegrateSeqStart,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"First image sequence number for prediction";
    XtAddCallback(_tfPredictSeqStart,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Last image sequence number for prediction";
    XtAddCallback(_tfPredictSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Ending rotation angle in degrees for prediction";
    XtAddCallback(_tfPredictRotEnd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Starting rotation angle in degrees for prediction";
    XtAddCallback(_tfPredictRotStart,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Relative weight of rotation angle versus mm position";
    XtAddCallback(_tfRefineRelWeight,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum number of refinement cycles";
    XtAddCallback(_tfRefineCycles,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Reject reflns with obs-calc angle larger than this";
    XtAddCallback(_tfRefineReject3,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Reject reflns with obs-calc Ymm larger than this";
    XtAddCallback(_tfRefineReject2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Reject reflns with obs-calc Xmm larger than this";
    XtAddCallback(_tfRefineReject1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum resolution cutoff for included reflns";
    XtAddCallback(_tfRefineResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum resolution cutoff for included reflns";
    XtAddCallback(_tfRefineResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum I/sigma cutoff for included reflns";
    XtAddCallback(_tfRefineSigma,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Requested spacegroup";
    XtAddCallback(_tfIndexSpacegroup,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in gamma angle in degrees";
    XtAddCallback(_tfIndexErrorAngle3,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in beta angle in degrees";
    XtAddCallback(_tfIndexErrorAngle2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in alpha angle in degrees";
    XtAddCallback(_tfIndexErrorAngle1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in c cell length in Angstroms";
    XtAddCallback(_tfIndexErrorLength3,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in b cell length in Angstroms";
    XtAddCallback(_tfIndexErrorLength2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Allowed error in a cell length in Angstroms";
    XtAddCallback(_tfIndexErrorLength1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Fourier map grid size in Angstroms";
    XtAddCallback(_tfIndexGrid,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum cell edge (max size of Fourier map) in Angstroms";
    XtAddCallback(_tfIndexMaxCell,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum number of difference vectors to use";
    XtAddCallback(_tfIndexMaxDiffs,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum allowed residual for a listed solution";
    XtAddCallback(_tfIndexMaxResid,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum resolution of spots used in indexing";
    XtAddCallback(_tfIndexResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum resolution of spots used in indexing";
    XtAddCallback(_tfIndexResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"I/sigI cutoff for spots used in indexing";
    XtAddCallback(_tfIndexSigma,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Write every nth refln shoebox to a file";
    XtAddCallback(_tfFindDump,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"2nd dimension end in pixels of rectangular search limit";
    XtAddCallback(_tfFindRect4,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"1st dimension end in pixels of rectangular search limit";
    XtAddCallback(_tfFindRect3,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"2nd dimension origin in pixels of rectangular search limit";
    XtAddCallback(_tfFindRect2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"1st dimension origin in pixels of rectangular search limit";
    XtAddCallback(_tfFindRect1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Outer radius in pixels of circular search limit";
    XtAddCallback(_tfFindCircle4,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Inner radius in pixels of circular search limit";
    XtAddCallback(_tfFindCircle3,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"2nd dimension origin in pixels of circular search limit";
    XtAddCallback(_tfFindCircle2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"1st dimension origin in pixels of circular search limit";
    XtAddCallback(_tfFindCircle1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"2nd dimension extent in pixels of local background rectangle";
    XtAddCallback(_tfFindBackRect2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"1st dimension extent in pixels of local background rectangle";
    XtAddCallback(_tfFindBackRect1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Pad each peak with this num of images at start and end";
    XtAddCallback(_tfFindPadding,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Peak centroid box window size in pixels";
    XtAddCallback(_tfFindWindow2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Peak centroid box window size in pixels";
    XtAddCallback(_tfFindWindow1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"In a 3x3 box, this num of pixels must be above threshold";
    XtAddCallback(_tfFindFilter,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum threshold for a peak";
    XtAddCallback(_tfFindMin,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum I/sigma for a peak";
    XtAddCallback(_tfFindSigma,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Last image sequence number for finding";
    XtAddCallback(_tfFindSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"First image sequence number for finding";
    XtAddCallback(_tfFindSeqStart,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum resolution to search for reflections";
    XtAddCallback(_tfFindResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum resolution to search for reflections";
    XtAddCallback(_tfFindResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Scan template (should have ??? in it)";
    XtAddCallback(_tfCalibrateTemplate,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;
//-jwp23

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Find and integration box size in fast direction in pixels";
    XtAddCallback(_tfCalibrateWindow1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Find and integration box size in slow direction in pixels";
    XtAddCallback(_tfCalibrateWindow2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Prepend a string to all default output filenames";
    XtAddCallback(_tfCalibratedTREKPrefix,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;


    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Name of non-uniformity or bad pixel mask file";
    XtAddCallback(_tfCalibrateNonunfNonunf,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Name of dark current file";
    XtAddCallback(_tfCalibrateNonunfDark,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Basename of interpolation file(s)";
    XtAddCallback(_tfCalibrateSpatialInterp,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Pixel size in mm in first dimension";
    XtAddCallback(_tfCalibrateSpatialSimple1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Pixel size in mm in second dimension";
    XtAddCallback(_tfCalibrateSpatialSimple2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Direct beam position in first pixel direction";
    XtAddCallback(_tfCalibrateDirBeam1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Detector theta or swing angle in degrees";
    XtAddCallback(_tfCalibrateDetTheta,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Detector to crystal distance in millimeter";
    XtAddCallback(_tfCalibrateDetDist,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Direct beam position in second pixel direction";
    XtAddCallback(_tfCalibrateDirBeam2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Suggested spacegroup number for autoindexing";
    XtAddCallback(_tfCalibrateSpacegroup,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Maximum resolution to set in all menus, except Strategy";
    XtAddCallback(_tfCalibrateResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Minimum resolution to set in all menus, except Strategy";
    XtAddCallback(_tfCalibrateResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter a shell command";
    XtAddCallback(_tfCommand,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter minimum rotation start angle in degrees to search";
    XtAddCallback(_tfStrategyRotStart,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter maximum rotation start angle in degrees to search";
    XtAddCallback(_tfStrategyRotEnd,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter minimum resolution in Angstroms to search";
    XtAddCallback(_tfStrategyResolution1,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter maximum resolution in Angstroms to search";
    XtAddCallback(_tfStrategyResolution2,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter maximum allowed rotation range to allow";
    XtAddCallback(_tfStrategyRotRangeMax,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter rotation angle coarse step size for test";
    XtAddCallback(_tfStrategyRotStepCoarse,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter rotation angle fine step size for test";
    XtAddCallback(_tfStrategyRotStepFine,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter cell length scale factor for predicting reflections";
    XtAddCallback(_tfStrategyLScale,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter minimum acceptable % completeness";
    XtAddCallback(_tfStrategyCompleteness,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter previously predicted reflnlist filename (no prediction done)";
    XtAddCallback(_tfStrategyPredicted,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter previously available reflnlist filename";
    XtAddCallback(_tfStrategyPrevious,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter minimum acceptable % completeness";
    XtAddCallback(_tfStrategyCompleteness,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data 
      = (XtPointer)"Enter angle in degrees to rotate by";
    XtAddCallback(_tfOrientRot,
		  XmNfocusCallback,
		  MainWindow::vPostHelpCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);

#endif    

#if (XmVersion >= 1002)

    // Add number adjust callback for numeric field textfield widgets
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfOrientRot,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleCycles,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedB,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleFixedScale,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleSigma,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorAdd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleReject,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfScaleErrorMul,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateDump,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateProfSize1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateMinPeakRadius,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateResolution1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegratePadding,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWindow1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateBatchNum,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateWait,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIntegrateSeqStart,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictResolution1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictMosaicity,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqStart,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotEnd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfPredictRotStart,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineRelWeight,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineCycles,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject3,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineReject1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineResolution1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfRefineSigma,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexSpacegroup,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle3,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorAngle1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength3,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexErrorLength1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexGrid,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxCell,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxDiffs,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfIndexMaxResid,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindDump,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect4,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect3,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindRect1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle4,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle3,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindCircle1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindBackRect1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindPadding,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindWindow1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindFilter,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindMin,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSigma,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqEnd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfFindSeqStart,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStart,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotEnd,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyResolution2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotRangeMax,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyCompleteness,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepCoarse,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyRotStepFine,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfStrategyLScale,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateSpatialSimple2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam1,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XtAddCallback(_tfCalibrateDirBeam2,
		  XmNfocusCallback,
		  MainWindow::vNumberAdjustCBCallback,
		  (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

#endif    
    
    // Trick to unmanaged unused pushbuttons from the option menus

    _cUIomCalibrateSpatial->set_pb2_userData((XtPointer)10);
    _cUIomCalibrateSpatial->vScanUnmanage();

    _cUIomCalibrateNonunf->set_pb8_userData((XtPointer)10);
    _cUIomCalibrateNonunf->set_pb7_userData((XtPointer)10);
    _cUIomCalibrateNonunf->set_pb6_userData((XtPointer)10);
    _cUIomCalibrateNonunf->set_pb5_userData((XtPointer)10);
    _cUIomCalibrateNonunf->vScanUnmanage();

    // Unmanage some mostly unused strategy dialog widgets

    XtUnmanageChild(_tfStrategyRotStepFine);
    //XtUnmanageChild(_tfStrategyRotStepCoarse);
    //XtUnmanageChild(_lbStrategyRotStep);

    // Unmanage some calibrate menu items not sensitive

    if (!XtIsSensitive(_lbCalibrateDetDist))
      {
	XtUnmanageChild(_tfCalibrateDetDist);
	XtUnmanageChild(_lbCalibrateDetDist);
      }

    if (!XtIsSensitive(_lbCalibrateSpacegroup))
      {
	XtUnmanageChild(_tfCalibrateSpacegroup);
	XtUnmanageChild(_lbCalibrateSpacegroup);
      }

    if (!XtIsSensitive(_lbCalibrateDetTheta))
      {
	XtUnmanageChild(_tfCalibrateDetTheta);
	XtUnmanageChild(_lbCalibrateDetTheta);
      }

    if (!XtIsSensitive(_tbIntegrateNopurge))
      {
	XtUnmanageChild(_tbIntegrateNopurge);
      }

    // Make sure "close" (delete window) from window manager calls our vExitCB

    Atom hWM_DELETE_WINDOW;
    hWM_DELETE_WINDOW = XmInternAtom(XtDisplay(parent),
				     "WM_DELETE_WINDOW", False);

    m_ptClientDataStructs[m_nCDC].object = this;
    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XmAddWMProtocolCallback(parent, hWM_DELETE_WINDOW, 
			    MainWindow::vExitCBCallback, 
			    (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;

    // Change background color of _txLogfile to white

    vSetLabel(_txLogfile, NULL, "white");

    // Get rid of some unused widgets

    XtUnmanageChild(_tfIntegrateDump);
    XtUnmanageChild(_lbIntegrateDump);

    // Unmanage these at the beginning

    XtUnmanageChild(_pbLogfileClear);
    XtUnmanageChild(_pbLogfileYes);
    XtUnmanageChild(_pbLogfileNo);
    XtUnmanageChild(_pbLogfileReturn);

    // Initialize search direction based on arrow button direction
    // which comes from resource file

    vLogfileCB(_abLogfileSearch, NULL, NULL);

//+5-June-2000
    // Some changes for use of dtscaleaverage instead of dtscalemerge

    // Unmanage some wigdets in the Scale/Average menu that are no longer
    // used.

    XtUnmanageChild(_lbScaleCycles);
    XtUnmanageChild(_tfScaleCycles);
    /***
    XtUnmanageChild(_lbScaleAbscorReject);
    XtUnmanageChild(_tfScaleAbscorReject);
    ***/

    XtUnmanageChild(_lbScaleFixedScale);
    XtUnmanageChild(_tfScaleFixedScale);
    XtUnmanageChild(_lbScaleFixedB);
    XtUnmanageChild(_tfScaleFixedB);


//-5-June-2000

//+29-Aug-200
    // Refine menu Relative Weight widgets no longer needed.

    XtUnmanageChild(_tfRefineRelWeight);
    XtUnmanageChild(_lbRefineRelWeight);

    // Unmanage some Integrate menu widgets that are no longer needed

    //    XtUnmanageChild(_lbIntegrateProfSize);
    //    XtUnmanageChild(_tfIntegrateProfSize1);
    //    XtUnmanageChild(_tfIntegrateProfSize2);

    XtUnmanageChild(_lbIntegrateMinPeakRadius);
    XtUnmanageChild(_tfIntegrateMinPeakRadius);
    XtUnmanageChild(_tbRefineTestMosaicity);

    if (!XtIsSensitive(_tbCalibrateModeSmall))
      XtUnmanageChild(_tbCalibrateModeSmall);
//-29-Aug-200
    
    //+-13-Jan-2003 dtfind/Find/ -pad is obsolete

    XtUnmanageChild(_tfFindPadding);
    XtUnmanageChild(_lbFindPadding);

    //+ 2009-11-03 JWP
    // Updates to simplify and extend Integrate dialog
    // 
    // Do not show the toggle buttons for c*.??? under "SpecialScans"

    XtUnmanageChild(_tbIntegrateSpecial1);
    XtUnmanageChild(_tbIntegrateSpecial2);
    XtUnmanageChild(_tbIntegrateSpecial3);

    // Usurp the Display and No purge togglebuttons for differentscan and differentdet

    // Since we do not ever change the profile params num refs and num images (-profit 50 7) 
    // let's use those fields for something else "Images per refine batch" (default 4)
    // We reserve the unmanaged tfIntegrateProfSize2 to hold "50 7" and the -profit params

    XtUnmanageChild(_tfIntegrateProfSize2);
    //- 2009-11-03 JWP

    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const MainWindow::className()
{
    return ("MainWindow");
}

void MainWindow::vProgressCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vProgressCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vProgressCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vProgressCB>

  // User pressed Cancel and/or Abort button in the _mbProgress message box
  // or other place.

  if (0 < m_nSubProcessPID)
    {
      // Kill all subshells ...

      (void) nKillProcess(m_nSubProcessPID, 9);
      m_nSubProcessPID = 0;
      if (NULL != m_pSubProcessStdIn)
	{
	  pclose(m_pSubProcessStdIn);
	  m_pSubProcessStdIn = NULL;
	}

      if (0 != _cUIomMode->nGetValue())
	{
	  // Set mode to manual

	  _cUIomMode->vSetValue(0);
	  vPutMessage("Subshell ABORTED!\nFlow chart mode set to Manual.", 1);
	  vCUIom9CB(this, _cUIomMode->baseWidget(), NULL, NULL);
	}
      else
	{
	  vPutMessage("Subshell ABORTED!", 1);
	}
    }
  else
    {
      vPutMessage("Subshell process ID unavailable!", 1);
    }
  m_poXcursor->vRestore();

    // End user code block <vProgressCB>
}

void MainWindow::vUnpostHelpCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vUnpostHelpCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vUnpostHelpCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vUnpostHelpCB>
  if (NULL != m_poXhelp)
    {
      m_poXhelp->vUnpostOneLineCB(w, clientData, callData);
    }
    // End user code block <vUnpostHelpCB>
}

void MainWindow::vPostHelpCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPostHelpCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPostHelpCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPostHelpCB>
  if (NULL != m_poXhelp)
    {
      m_poXhelp->vPostOneLineCB(w, clientData, callData);
    }
    // End user code block <vPostHelpCB>
}

void MainWindow::vPopDialogCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPopDialog(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPopDialog(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPopDialog>
  Boolean bManageFileFilter;
  Cstring *psMask;
  Cstring sFilename;
  Cstring sTitle;

  bManageFileFilter = TRUE;

  if (w == _pbFileOpen)
    {
      m_wpbFilterButton = w;
      psMask     = &m_sHeaderMask;
      // Not sure if m_sHeaderName has directory specification or not
      sFilename  = m_sHeaderDir + sFileGetBasename(m_sHeaderName);
      sTitle     = "dtprocess - Select an image or header file";
    }
  else if (w == _pbEditHeader)
    {
      bManageFileFilter = FALSE;
      _cUIheaderEdit->vSetHeader(m_poHeader);
      _cUIheaderEdit->manage();
    }
  else if (w == _pbViewHeader)
    {
      bManageFileFilter = FALSE;
      vLogfileCB(w, NULL, NULL);
    }
  else if (w == _pbFileMkdir)
    {
      m_wpbFilterButton = w;
      psMask     = &m_sHeaderMask;
      sFilename  = m_sHeaderDir;
      sTitle     = "dtprocess - Make a new directory";
    }
  else if (w == _pbFileCD)
    {
      m_wpbFilterButton = w;
      psMask     = &m_sHeaderMask;
      sFilename  = m_sHeaderDir;
      sTitle     = "dtprocess - Select a new default directory";
    }
  else if (w == _pbFileSaveAs)
    {
      m_wpbFilterButton = w;
      psMask     = &m_sHeaderMask;
      sFilename  = m_sHeaderDir + m_sHeaderName;
      sTitle     = "dtprocess - Select a header file to save";
    }
  else if ( (w == _pbFileTemplate) || (w == _pbCalibrateTemplate) )
    {
      m_wpbFilterButton = w;

      if (0 <= m_tDtcalibrateOptions.sTemplate.index('?'))
	{
	  // If scan_template is known, then use it with the XmNdirMask

	  psMask     = &m_tDtcalibrateOptions.sTemplate;
	}
      else
	{
	  psMask = &m_sImageMask;
	}
      sTitle = "dtprocess - Select an image file or scan template";
    }
  else if (w == _pbFileHeader)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sHeaderMask;
      sFilename         = m_sHeaderName;
      sTitle            = "dtprocess - Select a header file or image file with header";
    }
  else if (w == _pbFileReflnlist)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sReflnlistMask;
      sFilename         = m_sReflnlistName;
      sTitle            = "dtprocess - Select a reflnlist file";
    }
  else if (   (w == _pbFileLogfile)
	   || (w == _pbViewLogfile) )
    {
      if (3 == m_nLogfileType)
	{
//	  cout << "about to call vLogfileCB from vPopDialog()...\n" << flush;
	  vLogfileCB(NULL, NULL, NULL);
	  XtManageChild(_frLogfile);
	  return;
	}
      else
	{
	  m_wpbFilterButton = w;
	  psMask            = &m_sLogfileMask;
	  sFilename         = m_sLogfileName;
	  sTitle            = "dtprocess - Select a log file";
	}
    }
  else if (w == _pbFilePrint)
    {
      bManageFileFilter = FALSE;
      nDoSystemCommand(m_sFilePrintCommand + ' ' + m_sLogfileName);
    }
  else if (w == _pbHelpAbout)
    {
      bManageFileFilter = FALSE;
      Cstring sTemp;
      sTemp = Cstring("HelpAbout$$dtprocess\nHelp About...\n")
	      +  Cstring(D_K_DTREKVersion) 
              +  Cstring("\nCopyright (c) 2006 Rigaku\n")
	+ (Cstring)"\nReference: Pflugrath, JW (1999) Acta Cryst. D55,"
        + (Cstring)"\n                1718-1725.\n"
        + (Cstring)"\nPlease see the file ${DTREK_ROOT}/ACKNOWLEDGEMENTS"
        + (Cstring)"\nfor further acknowledgements, copyrights and"
        + (Cstring)"\nlicense information.";

      vPostError(_mbError, (XtPointer)sTemp.string(),
		 NULL);
    }
  else if (w == _pbCalibrateSpatialInterp)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sCalibrateSpatialMask;
      sFilename         = m_sCalibrateSpatialName;
      sTitle            = "dtprocess - Select spatial distortion table basename";
    }
  else if (w == _pbCalibrateNonunfNonunf)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sCalibrateNonunfMask;
      sFilename         = m_sCalibrateNonunfName;
      sTitle            = "dtprocess - Select non-uniformity or mask file";
    }
  else if (w == _pbCalibrateNonunfDark)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sCalibrateDarkMask;
      sFilename         = m_sCalibrateDarkName;
      sTitle            = "dtprocess - Select dark file";
    }
  else if (w == _pbMergeMergeFile)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sMergeMergeMask;
      sFilename         = m_sMergeMergeName;
      sTitle = "dtprocess - Select output reflnlist file for dtreflnmerge";
    }
  else if (w == _pbScaleMergeFile)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sScaleMergeMask;
      sFilename         = m_sScaleMergeName;
      sTitle = "dtprocess - Select output reflnlist file for dtscalemerge";
    }
  else if (w == _pbScaleUnAvg)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sScaleUnavgMask;
      sFilename         = m_sScaleUnavgName;
      sTitle = "dtprocess - Select output scaled but unaveraged reflnlist file";
    }
  else if (w == _pbStrategyPrevious)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sStrategyPreviousMask;
      sFilename         = m_sStrategyPreviousName;
      sTitle = "dtprocess - Select previous available reflnlist file";
    }
  else if (w == _pbStrategyPredicted)
    {
      m_wpbFilterButton = w;
      psMask            = &m_sStrategyPredictMask;
      sFilename         = m_sStrategyPredictName;
      sTitle = "dtprocess - Select predicted reflnlist file";
    }

  if (bManageFileFilter)
    {
      // Change dialog title and filter mask, then manage the filefilter widget

      XtVaSetValues(_xmDialogShellFileFilter, XmNtitle, 
		    sTitle.string(), NULL);
      XmString xsString;
      xsString = (XmString)BX_CONVERT(_cUIfileFilter->baseWidget(), 
			 psMask->string(), XmRXmString, 0, &bManageFileFilter);
      XtVaSetValues(_cUIfileFilter->baseWidget(), XmNdirMask, xsString, NULL);
      XmStringFree(xsString);

      // The following will do a search!

      _cUIfileFilter->manage();

      // So update file selection after the manage.

      xsString = (XmString)BX_CONVERT(_cUIfileFilter->baseWidget(), 
				   sFilename.string(), XmRXmString, 
				   0, &bManageFileFilter);
      XtVaSetValues(_cUIfileFilter->baseWidget(),
		    XmNdirSpec, xsString, NULL);
      XmStringFree(xsString);
    }

    // End user code block <vPopDialog>
}

void MainWindow::vExitCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vExitCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vExitCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vExitCB>
  
  // Should delete all items created with 'new'

  vDestroy();
  exit(0);
    // End user code block <vExitCB>
}

void MainWindow::vEditClearCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vEditClearCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vEditClearCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vEditClearCB>
  if (w == _pbEditClearCommand)
    {
      XmTextSetSelection(_tfCommand, 0, XmTextGetLastPosition(_tfCommand),
			 CurrentTime);
      XmTextRemove(_tfCommand);
    }
  else
    {
      if (w == _pbEditClearAll)
	{
	  XmTextSetSelection(_txOutput, 0, XmTextGetLastPosition(_txOutput),
			     CurrentTime);
	}
#if (XmVersion >= 1002)
      XtVaSetValues(_txOutput, XmNeditable, True, NULL);
      XmTextRemove(_txOutput);
      XtVaSetValues(_txOutput, XmNeditable, False, NULL);
#else
      XmTextRemove(_txOutput);
#endif
      XmTextShowPosition(_txOutput, XmTextGetLastPosition(_txOutput));    
    }
    // End user code block <vEditClearCB>
}

void MainWindow::vToggleButtonCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vToggleButtonCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vToggleButtonCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vToggleButtonCB>
  XmToggleButtonCallbackStruct *pCBS = (XmToggleButtonCallbackStruct *)callData;
  if (w == _tbViewNumAdjust)
    {
      if (pCBS->set)
	{
	  _cUItextnumArrow->manage();
	}
      else
	{
	  _cUItextnumArrow->unmanage();
	}
    }
  else if (w == _tbViewCommand)
    {
      if (pCBS->set)
	{
	  XtManageChild(_lbCommand);
	  XtManageChild(_tfCommand);
	  XtVaSetValues(_swOutput, XmNtopOffset, 2, NULL);
	}
      else
	{
	  XtUnmanageChild(_lbCommand);
	  XtUnmanageChild(_tfCommand);
	  XtVaSetValues(_swOutput, XmNtopOffset, -42, NULL);
	}
    }

    // End user code block <vToggleButtonCB>
}

void MainWindow::vUtilsCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vUtilsCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vUtilsCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vUtilsCB>
  if (w == _pbUtilsDisplay)
    {
      nDoSystemCommand(sTransSymbol("$(dtdisplay)") + '&');
    }
  else if (w == _pbUtilsCollect)
    {
       nDoSystemCommand(sTransSymbol("$(dtcollect)") + '&');
    }
  else if (   (w == _pbUtilsCommand1)
	   || (w == _pbUtilsCommand2)
	   || (w == _pbUtilsCommand3)
	   || (w == _pbUtilsCommand4)
	   || (w == _pbUtilsCommand5)
	   || (w == _pbUtilsCommand6) )
    {
      // Get the button labelString and do that command
      
      XmString sxTemp;
      char *pcTemp;
      Cstring sTemp;
      XtVaGetValues(w, XmNlabelString, &sxTemp, NULL);
      XmStringGetLtoR(sxTemp,
#if (XmVersion >= 1002)
		      XmFONTLIST_DEFAULT_TAG,
#else
		      XmSTRING_DEFAULT_CHARSET,
#endif
		      &pcTemp);
      sTemp     = pcTemp;
      XtFree(pcTemp);
      bool bHasDots;
      bHasDots = sTemp.contains("...");
      if (bHasDots)
	{
	  sTemp = sTemp.before("...");
	  int i = sTemp.length()-1;
	  while ( (' ' == sTemp.GetAt(i)) && (0 < i) )
	    {
	      sTemp = sTemp.before(i);
	      i--;
	    }
	}
      // Allow some symbol substitution.  
      // This needs to be changed so these symbols get defined in
      // the environment, then sTransSymbol would work automatically

      sTemp = sTransSymbol("$("+sTemp+")");
//      cout << "AsTemp is: " << sTemp << endl;
      
      while (sTemp.contains("DTREK_PREFIX")
	     && ("DTREK_PREFIX" != sDtrekGetPrefix()) )
	{
	  sTemp = sTemp.before("DTREK_PREFIX")
	          + sDtrekGetPrefix()
	          + sTemp.after("DTREK_PREFIX");
	}
      while (sTemp.contains("DTPROCESS_IMAGE_NAME"))
	{
	  sTemp = sTemp.before("DTPROCESS_IMAGE_NAME")
	          + m_sImageName
	          + sTemp.after("DTPROCESS_IMAGE_NAME");
	}
      while (sTemp.contains("DTPROCESS_HEADER_NAME"))
	{
	  sTemp = sTemp.before("DTPROCESS_HEADER_NAME")
	          + m_sHeaderName
		  + sTemp.after("DTPROCESS_HEADER_NAME");
	}
      while (sTemp.contains("DTPROCESS_LOGFILE_NAME"))
	{
	  sTemp = sTemp.before("DTPROCESS_LOGFILE_NAME")
	          + m_sLogfileName
		  + sTemp.after("DTPROCESS_LOGFILE_NAME");
	}
      while (sTemp.contains("DTPROCESS_REFLNLIST_NAME"))
	{
	  sTemp = sTemp.before("DTPROCESS_REFLNLIST_NAME")
	          + m_sReflnlistName
		  + sTemp.after("DTPROCESS_REFLNLIST_NAME");
	}
//      cout << "BsTemp is: " << sTemp << endl;
      if (bHasDots)
	{
	  vPutMessage(sTemp);
	  nDoSystemCommand(sTemp + '&');
	}
      else
	{
	  vCommandExecute(sTemp, 1); // Run in window plus allow input 
	}
    }
  else if (w == _pbUtilsPurge)
    {
      m_poXcursor->vSetWait();

      //+2009-11-24 JWP
      int  nVersionMethod = 1;
      int  nStat = 0;
      if ("" != sGetEnv("DTREK_FILE_VERSIONING"))
	{
	  nStat = atoi(sGetEnv("DTREK_FILE_VERSIONING").string());
	  if (0 == nStat)
	    nVersionMethod = 0;  // Only switch if exactly matches 0
	  nStat = 0;
	}
      Cstring sPurge;
      if (0 == nVersionMethod)
	{
          sPurge =  "rm *.head.* *dtintref*.ref*; rm *dtintpred*.ref*; "
                    "rm *dtprocess.lock* *dtrefinetmp.ref* *dtfind*tmp.ref*; "
                    "rm *dtfind.ref.* *dtinte*.ref.* *dtprof*.ref.* *dtintpartials.ref.*;"
                    "rm *dtfind.ref.* *dtinte*.ref.* *dtprof*.ref.*;"
                    "rm *dtprocess.log.*";
	}
      else
	{
	  // This is tricky since some folks may rename their files with an underscore, so
	  // try to narrow it down somewhat an underscore followed by 1 or 2 digits

	  sPurge =  "rm *_[0-9].head *dtintref*_[0-9].ref; rm *dtintpred*_[0-9].ref; "
                    "rm *dtprocess*.lock* *dtrefinetmp.ref *dtrefinetmp_[0-9].ref *dtfind*tmp*.ref; "
                    "rm *dtfind_[0-9].ref *dtintegrate_[0-9].ref *dtprofit_[0-9].ref;"
                    "rm *dtprocess_[0-9].log;";
	  sPurge += " rm *_[0-9][0-9].head *dtintref*_[0-9][0-9].ref; rm *dtintpred*_[0-9][0-9].ref; "
                    "rm *dtprocess*.lock* *dtrefinetmp_[0-9][0-9].ref ; "
                    "rm *dtfind_[0-9][0-9].ref *dtintegrate_[0-9][0-9].ref *dtprofit_[0-9][0-9].ref;"
                    "rm *dtintegrate_[0-9][0-9][0-9].head;"
                    "rm *dtintpartials_[0-9][0-9].ref *dtprocess_[0-9][0-9].log";
	}
      //cout << "PURGE:>" << sPurge << endl;
      nDoSystemCommand(sPurge);
      //-2009-11-24 JWP

      // Refilter lists

      m_bFCDialogRun = FALSE;
      vCommandDone();
      vPutMessage("Files purged.");
    }
    // End user code block <vUtilsCB>
}

void MainWindow::vHelpCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vHelpCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vHelpCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vHelpCB>
  vPutMessage("Please check your web browser window for help text.", 1);
  XmUpdateDisplay(w);
  if (NULL != m_poXhelp)
    {
      XtPointer pUserData;
      if (w == _pbHelpThisMenu)
	{
	  XtVaGetValues(m_wpbFlowChart, XmNuserData, &pUserData, NULL);
	}
      else if (w == _pbHelpUpdate)
	{
	  m_poXhelp->vHTMLHelp(w, (XtPointer)"CheckForUpdates", callData);
	  return;
	}
      else
	{
	  pUserData = clientData;
	}
	  
      m_poXhelp->vHTMLHelp(w, pUserData, callData);
    }
    // End user code block <vHelpCB>
}

void MainWindow::vLogfileCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vLogfileCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vLogfileCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vLogfileCB>

  // This routine displays text information in the _txLogfile XmText widget.
  // The text information is:
  //  1.  A selected log file   (w == _cslLogfile)
  //  2.  A Cstring from m_poHeader (w == _cslHeader)
  //  3.  A "tail" of a log file (w == NULL)
  // This routine also is called when searching the text in _txLogfile,
  // when changing the direction of the search, and when dismissing _txLogfile
  // from user view.
  //  5.  Process several callbacks for pushbuttons, 
  

  static int s_nFile = 0;

  if (_pbLogfileDismiss == w)
    {
      _cslLogfile->unmanage();
      m_nLogfileType = 0;
      XtUnmanageChild(_frLogfile);
      XtSetSensitive(_pbFilePrint, False);
      return;
    }
  else if (_tbLogfileAutoscroll == w)
    {
      XmToggleButtonCallbackStruct *pCBS
	   = (XmToggleButtonCallbackStruct *)callData;
//+JWP 2008-05-26 added ! in next line because this was changed to SCROLL LOCK
      XtVaSetValues(_txLogfile, XmNautoShowCursorPosition, !pCBS->set, NULL);
      return;
    }
  else if (_pbLogfileClear == w)
    {
      XmTextSetSelection(_tfLogfileSearch, 0, 
			 XmTextGetLastPosition(_tfLogfileSearch),
			 CurrentTime);
      XmTextRemove(_tfLogfileSearch);
      XmProcessTraversal(_tfLogfileSearch, XmTRAVERSE_CURRENT);
    }
  else if (   (_pbLogfileYes == w)
	   || (_pbLogfileNo  == w)
	   || (_pbLogfileReturn == w) )
    {
      if ( (3 == s_nFile) && (NULL != m_pSubProcessStdIn) )
	{
	  Cstring sTemp;
	  if (_pbLogfileYes == w)
	    sTemp = "Yes";
	  else if (_pbLogfileNo == w)
	    sTemp = "No";
	  else
	    {
	      char *pcTemp;
	      pcTemp = XmTextFieldGetString(_tfLogfileSearch);
	      if (NULL != pcTemp)
		m_sLogfileSearchString = pcTemp;
	      XtFree(pcTemp);
	      sTemp = m_sLogfileSearchString;
	    }
	  fprintf(m_pSubProcessStdIn, "%s\n", sTemp.string());
	  fflush(m_pSubProcessStdIn);
	  vPutMessage("Input to subshell: " + m_sLogfileSearchString);
	  XmTextFieldSetString(_tfLogfileSearch, "");
	}
      return;
    }
  else if (_pbLogfileAbort == w)
    {
      vProgressCB(w, NULL, NULL);
      if (3 == s_nFile)
	{
	  m_lLogfileSizeShown = -1;
	  vLogfileCB(NULL, NULL, NULL);
	  XmTextInsert(_txLogfile, XmTextGetLastPosition(_txLogfile),
		       "\nABORTED!\n");
	}
      else
	{
	  XtUnmanageChild(_pbLogfileAbort);
	  XtUnmanageChild(_lbLogfileInput);
	  XtUnmanageChild(_pbLogfileClear);
	  XtUnmanageChild(_pbLogfileYes);
	  XtUnmanageChild(_pbLogfileNo);
	  XtUnmanageChild(_pbLogfileReturn);
	  XtManageChild(_pbLogfileDismiss);
	  XtManageChild(_lbLogfileSearch);
	  XtManageChild(_abLogfileSearch);
	  m_nLogfileType = 1;
	}
      return;
    }
  else if (_abLogfileSearch == w)
    {
      XtVaGetValues(_abLogfileSearch, XmNarrowDirection, 
		    &m_ucLogfileSearchDirection, NULL);
      if (XmARROW_UP == m_ucLogfileSearchDirection)
	{
	  m_ucLogfileSearchDirection = XmARROW_DOWN;
	}
      else
	{
	  m_ucLogfileSearchDirection = XmARROW_UP;
	}
      XtVaSetValues(_abLogfileSearch, XmNarrowDirection,
		    m_ucLogfileSearchDirection, NULL);

      // Do the search?

      return;
    }
  else if (_tfLogfileSearch == w)
    {
      XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
      if (pCBS->reason == XmCR_ACTIVATE)
	{
	  char *pcTemp;
	  pcTemp = XmTextFieldGetString(w);
	  if (NULL != pcTemp)
	    m_sLogfileSearchString = pcTemp;
	  XtFree(pcTemp);

	  if ( (3 == s_nFile) && (NULL != m_pSubProcessStdIn) )
	    {
	      fprintf(m_pSubProcessStdIn, "%s\n", 
		      m_sLogfileSearchString.string());
	      fflush(m_pSubProcessStdIn);
	      vPutMessage("Input to subshell: " + m_sLogfileSearchString);
	      XmTextFieldSetString(_tfLogfileSearch, "");
	    }
	  else
	    {
	      XmTextDirection hDir;
	      XmTextPosition hPosition, hPosNow, hPosView;
	      hPosNow = XmTextGetInsertionPosition(_txLogfile);
	      if (XmARROW_UP == m_ucLogfileSearchDirection)
		{
		  hDir = XmTEXT_BACKWARD;
		}
	      else
		{
		  hDir = XmTEXT_FORWARD;
		}

	      if (True == XmTextFindString(_txLogfile, hPosNow, 
					   m_sLogfileSearchString.string(),
					   hDir, &hPosition))
		{
		  XmTextSetSelection(_txLogfile, hPosition,
				     hPosition + m_sLogfileSearchString.length(),
				     CurrentTime);
		  
		  hPosView = hPosition + m_sLogfileSearchString.length()
                             + 2 * 80; // have it up about 2 lines
		  XmTextShowPosition(_txLogfile, hPosView);
		  if (XmTEXT_FORWARD == hDir)
		    XmTextSetInsertionPosition(_txLogfile, hPosition+1);
		  else
		    XmTextSetInsertionPosition(_txLogfile, 
					       hPosition-m_sLogfileSearchString.length());
		}
	      else
		{
		  vPutMessage("Text not found: " + m_sLogfileSearchString);
		  XBell(XtDisplay(w), 75);
		}
	    }
	}
      return;
    }
  else if (w == _cslLogfile->wGetListWidget())
    {
      // Do not display header file if a "tail" of a logfile is active.

      if (3 == s_nFile) 
	{
	  _cslLogfile->manage();
	  XtSetSensitive(_pbFilePrint, True);
	  XtManageChild(_frLogfile);
//	  cout << "tail active, but cslLogfile\n";
	  return;
	}
      
      XmListCallbackStruct *pCBS = (XmListCallbackStruct *)callData;
      int      nNum;
      Cstring *psItems;

      psItems = NULL;
      _cslLogfile->vGetSelection(&nNum, &psItems);
      m_sLogfileName = *psItems;
      if (NULL != psItems)
	{
	  delete [] psItems;
	  psItems = NULL;
	}
      if (sGetCWD() != m_sLogfileDir)
	m_sLogfileName = m_sLogfileDir + m_sLogfileName;

      // Read selected file and place into txLogfile.
      
      int nFile, nLength, nStat;
      nFile   = 2;
      nStat   = 0;
      nLength = m_sLogfileName.length();
      (void) dskbor(&nFile, m_sLogfileName.string(), &nLength, &nStat);
      if (0 != nStat)
	{
	  vPutMessage("ERROR opening file " + m_sLogfileName, 1);
	}
      else
	{
	  XtUnmanageChild(_txLogfile);
	  m_poXcursor->vSetWait();
	  XmTextSetSelection(_txLogfile, 0, XmTextGetLastPosition(_txLogfile),
			 CurrentTime);
#if (XmVersion >= 1002)
	  XtVaSetValues(_txLogfile, XmNeditable, True, NULL);
	  XmTextRemove(_txLogfile);
	  XtVaSetValues(_txLogfile, XmNeditable, False, NULL);
#else
	  XmTextRemove(_txLogfile);
#endif
	  m_nLogfileType = 1;
	  while (0 == nStat)
	    {
	      // Read DTP_MCTEMPSIZE bytes at a time ...

	      nLength = DTP_MCTEMPSIZE;
	      (void) dskbr(&nFile, m_acTemp, &nLength, &nStat);      
	      if (0 < nLength)
		{
		  if (0 < nStat)
		    nLength = nStat;
		  m_acTemp[nLength] = '\0';
		  XmTextInsert(_txLogfile, XmTextGetLastPosition(_txLogfile),
			       m_acTemp);
		}
	    }
	  (void) dskbcr(&nFile, &nLength);
	}
      XmTextSetInsertionPosition(_txLogfile, 0);
      XmTextShowPosition(_txLogfile, 0);
      XtManageChild(_txLogfile);
      m_poXcursor->vRestore();
      _cslLogfile->manage();
      XtSetSensitive(_pbFilePrint, True);
      XtManageChild(_frLogfile);
    }
  else if (   (w == _cslHeader->wGetListWidget())
	   || (w == _pbViewHeader) )
    {
      // Do not display header file if a "tail" of a logfile is active.

      if (3 == s_nFile) 
	{
	  _cslLogfile->manage();
	  XtSetSensitive(_pbFilePrint, True);
	  XtManageChild(_frLogfile);
//	  cout << "tail active, but cslHeader\n";
	  return;
	}
      
      // No tail active, so display the header

      m_nLogfileType = 2;
      XtUnmanageChild(_txLogfile);
      m_poXcursor->vSetWait();
      XmTextSetSelection(_txLogfile, 0, XmTextGetLastPosition(_txLogfile),
			 CurrentTime);
#if (XmVersion >= 1002)
      XtVaSetValues(_txLogfile, XmNeditable, True, NULL);
      XmTextRemove(_txLogfile);
      XtVaSetValues(_txLogfile, XmNeditable, False, NULL);
#else
      XmTextRemove(_txLogfile);
#endif
      if (   (NULL == m_poHeader)
	  || (!m_poHeader->bIsAvailable()) )
	{
	  vPutMessage("No header yet!", 1);
	  XmTextSetString(_txLogfile, "No header available yet!\n");
	}
      else
	{
	  XmTextSetString(_txLogfile, m_poHeader->sGet().string());
	}
      XmTextSetInsertionPosition(_txLogfile, 0);
      XmTextShowPosition(_txLogfile, 0);
      XtManageChild(_txLogfile);
      m_poXcursor->vRestore();
      _cslLogfile->manage();
      XtSetSensitive(_pbFilePrint, False);
      XtManageChild(_frLogfile);
    }
  else if (NULL == w)
    {
      // Update the logfile viewer to view a logfile named in 
      // m_sLogFilename in progress
      // This is like the unix 'tail -f' command.  This might have been
      // implemented with the XtAppAddInput call, but is implemented by
      // a call to vLogfileCB(NULL, NULL, NULL) made in ::vWorkProc1 and
      // elsewhere.

      int nLength, nStat;
      m_nLogfileType = 3;
      m_sLogfileName = m_sLogFilename;

      if ( (0 == m_lLogfileSizeShown) && (0 == s_nFile) )
	{
//	  cout << "initialize tail on " << m_sLogFilename << '\n';
	  // Initial the viewing of the logfile

	  XmTextSetSelection(_txLogfile, 0, XmTextGetLastPosition(_txLogfile),
			     CurrentTime);
#if (XmVersion >= 1002)
	  XtVaSetValues(_txLogfile, XmNeditable, True, NULL);
	  XmTextRemove(_txLogfile);
	  XtVaSetValues(_txLogfile, XmNeditable, False, NULL);
#else
	  XmTextRemove(_txLogfile);
#endif
	  XmTextSetInsertionPosition(_txLogfile, 0);
	  _cslLogfile->manage();
	  XtSetSensitive(_pbFilePrint, True);
	  XtManageChild(_frLogfile);

	  s_nFile   = 3;
	  nStat     = 0;
	  nLength   = m_sLogFilename.length();
	  (void) dskbor(&s_nFile, m_sLogFilename.string(), &nLength, &nStat);
	  if (0 != nStat)
	    {
	      vPutMessage("ERROR opening log file: " + m_sLogFilename, 1);
	      XmTextInsert(_txLogfile, 
			       XmTextGetLastPosition(_txLogfile),
			       "ERROR opening log file: ");
	      XmTextInsert(_txLogfile, 
			       XmTextGetLastPosition(_txLogfile),
			       m_sLogFilename.string());
	      XmTextInsert(_txLogfile, 
			       XmTextGetLastPosition(_txLogfile),
			       "!\n");
	      if (!m_bFCDialogRun)
		{
		  XmTextInsert(_txLogfile, 
			       XmTextGetLastPosition(_txLogfile),
			       "Check that the command entered is correct!\n");
		}
	      s_nFile = 0;
	    }

	  // Load logfile into logfile scrolled list

	  if (bFileExists(m_sLogFilename))
	    {
	      _cslLogfile->vDeleteAll();
	      if (_cUIfileFilter->bDoSearch(m_sLogfileMask))
		_cslLogfile->vAddOtherList(_cUIfileFilter->wGetListWidget());
	      if ("" != m_sLogFilename)
		_cslLogfile->vSetSelection(m_sLogFilename, False);
	    }

	  XtUnmanageChild(_pbLogfileDismiss);
	  XtManageChild(_pbLogfileAbort);
	  if (NULL != m_pSubProcessStdIn)
	    {
	      // Use the textfield for input to subshell, not for searches

	      XtUnmanageChild(_lbLogfileSearch);
	      XtUnmanageChild(_abLogfileSearch);
	      XtManageChild(_lbLogfileInput);
	      //XtManageChild(_pbLogfileClear);
	      //XtManageChild(_pbLogfileYes);
	      //XtManageChild(_pbLogfileNo);
	      XtManageChild(_pbLogfileReturn);
	    }
	  m_nLogfileType = 3;
	}
      else if (   (0 < m_lLogfileSize) && (0 <= m_lLogfileSizeShown)
	       && (3 == s_nFile) )
	{
//	  cout << "continue tail on " << m_sLogFilename << '\n';
	  // Show the newly available logfile
	  
	  m_lLogfileSize = lFileGetSize(m_sLogFilename);
	  nStat = 0;
	  while ( (0 == nStat) && (m_lLogfileSizeShown < m_lLogfileSize) )
	    {
	      // Read up to DTP_MCTEMPSIZE bytes at a time ...

//	      cout << "size, sizeshown, s_nFile: " << m_lLogfileSize << ' '
//		<< m_lLogfileSizeShown << ' ' << s_nFile << endl;

	      nLength = min(DTP_MCTEMPSIZE, m_lLogfileSize - m_lLogfileSizeShown);
	      (void) dskbr(&s_nFile, m_acTemp, &nLength, &nStat);      
	      if (0 < nLength)
		{
		  if (0 < nStat)
		    nLength = nStat;
		  m_acTemp[nLength] = '\0';
		  //Sometimes there is a crash in the next statement, deep inside the Xm library
		  XmTextInsert(_txLogfile, 
			       XmTextGetLastPosition(_txLogfile),
			       m_acTemp);
		}
	      m_lLogfileSizeShown += nLength;
	    }
	  XmTextSetInsertionPosition(_txLogfile,
				     XmTextGetLastPosition(_txLogfile));
//+JWP 2008-05-26 added ! in next line because this was changed to SCROLL LOCK
	  if (!XmToggleButtonGetState(_tbLogfileAutoscroll))
	    {
	      XmTextShowPosition(_txLogfile, XmTextGetLastPosition(_txLogfile));
	    }
	}
      else if (0 > m_lLogfileSizeShown)
	{
//	  cout << "close tail on " << m_sLogFilename << '\n';
	  // Close file that is being 'tail'ed, but first make sure
	  // file has been completely read in.

	  m_lLogfileSizeShown = XmTextGetLastPosition(_txLogfile);
	  m_lLogfileSize      = lFileGetSize(m_sLogFilename);
	  if (0 < m_lLogfileSize)
	    vLogfileCB(NULL, NULL, NULL);

	  if (3 == s_nFile)
	    (void) dskbcr(&s_nFile, &nLength);
	  s_nFile = 0;
	  m_lLogfileSizeShown = 0;
	  XtUnmanageChild(_pbLogfileAbort);
	  XtUnmanageChild(_lbLogfileInput);
	  XtUnmanageChild(_pbLogfileClear);
	  XtUnmanageChild(_pbLogfileYes);
	  XtUnmanageChild(_pbLogfileNo);
	  XtUnmanageChild(_pbLogfileReturn);
	  XtManageChild(_pbLogfileDismiss);
	  XtManageChild(_lbLogfileSearch);
	  XtManageChild(_abLogfileSearch);
	  m_nLogfileType = 1;

	  if (NULL != m_pSubProcessStdIn)
	    {
	      pclose(m_pSubProcessStdIn);
	      m_pSubProcessStdIn = NULL;
	    }
	}
    }

    // End user code block <vLogfileCB>
}

void MainWindow::vUnPostHelpCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vUnPostHelp(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vUnPostHelp(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vUnPostHelp>
    // End user code block <vUnPostHelp>
}

void MainWindow::vStrategyCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vStrategyCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vStrategyCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vStrategyCB>
  if (   (w == _pbStrategyPrevious)
      || (w == _pbStrategyPredicted) )
    {
      vPopDialog(w, clientData, callData);
      return;
    }
  else if (w == _tbStrategyPredicted)
    {
      if (XmToggleButtonGetState(w))
	{
	  XtManageChild(_tfStrategyPredicted);
	  XtManageChild(_pbStrategyPredicted);
/*
	  XtManageChild(_lbStrategyResolution);
	  XtManageChild(_tfStrategyResolution1);
	  XtManageChild(_tfStrategyResolution2);
	  XtManageChild(_lbStrategyRot);
	  XtManageChild(_tfStrategyRotStart);
	  XtManageChild(_tfStrategyRotEnd);
*/
	}
      else
	{
	  XtUnmanageChild(_tfStrategyPredicted);
	  XtUnmanageChild(_pbStrategyPredicted);
/*
	  XtUnmanageChild(_lbStrategyResolution);
	  XtUnmanageChild(_tfStrategyResolution1);
	  XtUnmanageChild(_tfStrategyResolution2);
	  XtUnmanageChild(_lbStrategyRot);
	  XtUnmanageChild(_tfStrategyRotStart);
	  XtUnmanageChild(_tfStrategyRotEnd);
*/
	}
    }
  else if (w == _tbStrategyPrevious)
    {
      if (XmToggleButtonGetState(w))
	{
	  XtManageChild(_tfStrategyPrevious);
	  XtManageChild(_pbStrategyPrevious);
	}
      else
	{
	  XtUnmanageChild(_tfStrategyPrevious);
	  XtUnmanageChild(_pbStrategyPrevious);
	}
    }

  int   nStat;
  double dTemp, dTemp1;
  int    nTemp;
  char *pcTemp;

  // Read the Strategy dialog widgets and construct command to run

  m_sStrategyCommand = sTransSymbol("$(dtmultistrategy)") + ' ' + m_sHeaderName;

  pcTemp = XmTextFieldGetString(_tfStrategyRotStart);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    m_tDtstrategyOptions.sRotStart = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfStrategyRotEnd);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sRotEnd = pcTemp;
  XtFree(pcTemp);
  
  if ( (0.0 != dTemp1) || (0.0 != dTemp) )
    {
      // Add -rot command if and only if both not 0
       m_sStrategyCommand = m_sStrategyCommand + " -rot "
                        + m_tDtstrategyOptions.sRotStart + ' '
                        + m_tDtstrategyOptions.sRotEnd;
    }

  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfStrategyResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtstrategyOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  dTemp1 = 0.0;
  pcTemp = XmTextFieldGetString(_tfStrategyResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtstrategyOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  
  if (w != _tfStrategyResolution1)
    vSetResoOther(_tfStrategyResolution2, _tfStrategyResolution1, 
		Cstring("999.0"),
		&m_tDtstrategyOptions.sReso1);
      
  if (dTemp != dTemp1)
    {
      m_sStrategyCommand = m_sStrategyCommand + " -reso " 
	                    + m_tDtstrategyOptions.sReso1 + ' ' 
	                    + m_tDtstrategyOptions.sReso2;
    }

  pcTemp = XmTextFieldGetString(_tfStrategyCompleteness);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sCompletenessMin = pcTemp;
  XtFree(pcTemp);
  
  m_sStrategyCommand = m_sStrategyCommand + " -cmin "
                        + m_tDtstrategyOptions.sCompletenessMin;

  pcTemp = XmTextFieldGetString(_tfStrategyRotRangeMax);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sRotRangeMax = pcTemp;
  XtFree(pcTemp);
  
  m_sStrategyCommand = m_sStrategyCommand + " -rangemax "
                        + m_tDtstrategyOptions.sRotRangeMax;

  // Usurp -coarse for use with redundancy

  pcTemp = XmTextFieldGetString(_tfStrategyRotStepCoarse);
  dTemp = 0.0;
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sRotStepCoarse = pcTemp;
  XtFree(pcTemp);
  
  if ( (0.0 < dTemp) && (0 < m_tDtstrategyOptions.sRotStepCoarse.length()) )
    //    m_sStrategyCommand = m_sStrategyCommand + " -coarse "
    m_sStrategyCommand = m_sStrategyCommand + " -rmin "
                           + m_tDtstrategyOptions.sRotStepCoarse;

/***********************************************************************
  pcTemp = XmTextFieldGetString(_tfStrategyRotStepFine);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sRotStepFine = pcTemp;
  XtFree(pcTemp);

  if (0.0 < dTemp)
    m_sStrategyCommand = m_sStrategyCommand + " -fine "
                           + m_tDtstrategyOptions.sRotStepFine;

***********************************************************************/

  pcTemp = XmTextFieldGetString(_tfStrategyLScale);
  dTemp = 0.0;
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtstrategyOptions.sLScaleFactor = pcTemp;
  XtFree(pcTemp);


  if ( (0.0 < dTemp) && (0 < m_tDtstrategyOptions.sLScaleFactor.length()) )
    {
      //      m_sStrategyCommand = m_sStrategyCommand + " -lscale " 
      m_sStrategyCommand = m_sStrategyCommand + " -scale " 
                          + m_tDtstrategyOptions.sLScaleFactor;
    }

  m_tDtstrategyOptions.bAnom = (bool) XmToggleButtonGetState(_tbStrategyAnom);
  if (m_tDtstrategyOptions.bAnom)
    {
      m_sStrategyCommand = m_sStrategyCommand + " -anom ";
    }

  m_tDtstrategyOptions.bList = (bool) XmToggleButtonGetState(_tbStrategyList);
  if (m_tDtstrategyOptions.bList)
    {
      m_sStrategyCommand = m_sStrategyCommand + " -nocollision ";
    }

  m_tDtstrategyOptions.bPrevious = (bool) XmToggleButtonGetState(_tbStrategyPrevious);

  pcTemp = XmTextFieldGetString(_tfStrategyPrevious);
  m_tDtstrategyOptions.sPreviousFile = pcTemp;
  if ("" == m_tDtstrategyOptions.sPreviousFile)
    m_tDtstrategyOptions.sPreviousFile = ms_sDtNoNe;
  if (   (m_tDtstrategyOptions.bPrevious) 
      && (ms_sDtNoNe != m_tDtstrategyOptions.sPreviousFile) )
    {
      m_sStrategyCommand = m_sStrategyCommand + " -prev " 
	                   + m_tDtstrategyOptions.sPreviousFile;
    }
  XtFree(pcTemp);

  m_tDtstrategyOptions.bPredicted = (bool) XmToggleButtonGetState(_tbStrategyPredicted);

  pcTemp = XmTextFieldGetString(_tfStrategyPredicted);
  m_tDtstrategyOptions.sPredictedFile = pcTemp;
  if ("" == m_tDtstrategyOptions.sPredictedFile)
    m_tDtstrategyOptions.sPredictedFile = ms_sDtNoNe;
  if (   (m_tDtstrategyOptions.bPredicted) 
      && (ms_sDtNoNe != m_tDtstrategyOptions.sPredictedFile) )
    {
      m_sStrategyCommand = m_sStrategyCommand + " -predicted " 
	                   + m_tDtstrategyOptions.sPredictedFile;
    }
  XtFree(pcTemp);

  m_tDtstrategyOptions.bRef = (bool) XmToggleButtonGetState(_tbStrategyRef);
  
  if (m_tDtstrategyOptions.bRef)
    {
      m_sStrategyCommand = m_sStrategyCommand + " -ref " 
	                   + sDtrekGetPrefix() + "dtstrategy.ref";
    }

  XmTextFieldSetString(_tfCommand, m_sStrategyCommand.string());

  if (w == _pbStrategyRun)
    {
      // Run the command in m_sStrategyCommand

      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sStrategyCommand);
    }

    // End user code block <vStrategyCB>
}

void MainWindow::vStrategyTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vStrategyTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vStrategyTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vStrategyTextFieldCB>
  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  if (XmIsTextField(w))
    XmTextShowPosition(w, XmTextGetLastPosition(w));

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vStrategyCB(w, NULL, NULL);

    // End user code block <vStrategyTextFieldCB>
}

void MainWindow::vScaleCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScaleCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScaleCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScaleCB>

//+5-June-2000
//  Updates to use dtscaleaverage instead of dtscalemerge

  Cstring sRejectOption;
  Cstring sRejectDeviationOption;
  Cstring sErrorModelOption;
  Cstring sErrorModelOption1;
  Cstring sOptions;
  Cstring sTemp;

  int    i;
  int    nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;

  if (   (w == _pbScaleUnAvg)
      || (w == _pbScaleMergeFile) )
    {
      vPopDialog(w, clientData, callData);
      return;
    }
  
  nTemp = _cUIom9ScaleAbscor->nGetValue();
  if (0 <= nTemp)
    {
      m_nScaleAbscorMethod = nTemp;
    }

  m_tDtscaleOptions.sAbscorMethod = (Cstring) m_nScaleAbscorMethod;
  // sAbscorRejectSigma

  // Read the Scale dialog widgets and construct command to run
  
  m_sScaleCommand = "";
  sOptions        = "";

  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfScaleSigma);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtscaleOptions.sExcludeSigma = pcTemp;
      if (0.0 < dTemp)
	sOptions = sOptions + " -reject sigma " 
                            + m_tDtscaleOptions.sExcludeSigma;
    }
  XtFree(pcTemp);
  
  //+2009-11-03 JWP
  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfScaleAbscorReject);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtscaleOptions.sAbscorRejectSigma = pcTemp;
      if (0.0 < dTemp)
	sOptions = sOptions + " -batchrestrain " 
	  + m_tDtscaleOptions.sAbscorRejectSigma;
    }
  XtFree(pcTemp);
  
  //-2009-11-03 JWP

  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfScaleReject);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 != nStat)
    {
      m_tDtscaleOptions.sRejectSigma = "0";
    }
  else
    {
      m_tDtscaleOptions.sRejectSigma = pcTemp;
    }
  sRejectOption =   m_tDtscaleOptions.sRejectSigma;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfScaleResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtscaleOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  double dTemp1;
  pcTemp = XmTextFieldGetString(_tfScaleResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtscaleOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  if (w != _tfScaleResolution1)
    vSetResoOther(_tfScaleResolution2, _tfScaleResolution1, 
		Cstring("999.0"),
		&m_tDtscaleOptions.sReso1);
  
  if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
    {
      sOptions = sOptions + " -reso " 
                       + m_tDtscaleOptions.sReso1 + ' ' 
                       + m_tDtscaleOptions.sReso2;
    }

  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfScaleErrorAdd);
  nStat = sscanf(pcTemp, "%lf %lf", &dTemp, &dTemp1);
  sErrorModelOption  = "";
  sErrorModelOption1  = "";
  m_tDtscaleOptions.sErrorAdd = ms_sDtNoNe;
  if (1 <= nStat)
    {
      //      cout << "reading Eadd, dTemp is: " << dTemp << endl;
      m_tDtscaleOptions.sErrorAdd = pcTemp;
      if (0.0 == dTemp)
	{
	  if (m_tDtscaleOptions.sErrorAdd.contains('0'))
	    sErrorModelOption = (Cstring)dTemp;
	}
      else if (0.0 < dTemp)
	{
	  sErrorModelOption = (Cstring)dTemp;
	}
    }
  if (2 == nStat)
    sOptions = sOptions + " -chisq " + (Cstring)dTemp1;
  XtFree(pcTemp);
  
  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfScaleErrorMul);
  sErrorModelOption1 = "";
  m_tDtscaleOptions.sErrorMul = ms_sDtNoNe;
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtscaleOptions.sErrorMul = pcTemp;
      if (0.0 == dTemp)
	{
	  if (m_tDtscaleOptions.sErrorMul.contains('0'))
	    sErrorModelOption1 = m_tDtscaleOptions.sErrorMul;
	}
      else if (0.0 < dTemp)
	{
	  sErrorModelOption1 = m_tDtscaleOptions.sErrorMul;
	}
    }
  XtFree(pcTemp);
  if ("" != sErrorModelOption1)
    sErrorModelOption1 = sErrorModelOption1 + ' ' + sErrorModelOption;

//  sOptions = sOptions + sRejectOption + sErrorModelOption;
//+jwp2011
//  std::cout << "sRejectOption: " << sRejectOption << "\nsErrorModelOption: "
//            << sErrorModelOption << "\nsErrorModelOption1: "
//            << sErrorModelOption1 << std::endl;
//-jwp2011  

//+jwp 22-Feb-2002
// Use the fixed batch field for rejected batches  

  pcTemp = XmTextFieldGetString(_tfScaleFixedBatch);
  sTemp  = pcTemp;
  while (' ' == sTemp.GetAt(0))
    sTemp = sTemp.after(0);
  if (sTemp.contains(' '))
    sTemp = sTemp.before(' ');

  m_tDtscaleOptions.sFixedBatch = sTemp;
  bool bGoodPrefix = TRUE;
  if ( (m_tDtscaleOptions.sFixedBatch != ms_sDtNoNe) 
       && (0 < m_tDtscaleOptions.sFixedBatch.length()) )
    {
      sOptions = sOptions + " -rejectbatch id " 
	                    + m_tDtscaleOptions.sFixedBatch;
    }
/*
  for (i = 0; bGoodPrefix 
              && (i < m_tDtscaleOptions.sFixedBatch.length()); i++)
    {
      bGoodPrefix =    ('0' <= m_tDtscaleOptions.sFixedBatch.GetAt(i))
                    && ('z' >= m_tDtscaleOptions.sFixedBatch.GetAt(i));
    }
  if ( (bGoodPrefix) && (0 < m_tDtscaleOptions.sFixedBatch.length()) )
    {
      sOptions = sOptions + " -fix " 
	                    + m_tDtscaleOptions.sFixedBatch;
    }
*/
//-jwp 22-Feb-2002
  else
    {
      m_tDtscaleOptions.sFixedBatch = ms_sDtNoNe;
    }
  XtFree(pcTemp);

//+JWP 2007-11-01 
// Make sure .bAnom is ALWAYS TRUE!

  m_tDtscaleOptions.bScaleAnom = XmToggleButtonGetState(_tbScaleScaleAnom);
  if (m_tDtscaleOptions.bScaleAnom)
    {
      sOptions = sOptions + " -scaleanom";
      //XmToggleButtonSetState(_tbScaleAnom, False, False);
      // Now ALWAYS ON!
      XmToggleButtonSetState(_tbScaleAnom, True, False);
      if (w == _tbScaleScaleAnom)
	XtSetSensitive(_tbScaleAnom, True);
    }
  else
    {
      if (w == _tbScaleScaleAnom)
	XtSetSensitive(_tbScaleAnom, True);
    }

  XtSetSensitive(_tbScaleAnom, False);
  m_tDtscaleOptions.bAnom = XmToggleButtonGetState(_tbScaleAnom);
  if (m_tDtscaleOptions.bAnom)
    {
      sOptions = sOptions + " -anom";
    }
//-JWP

  nTemp = _cUIom9ScaleUnavgOutput->nGetValue();
  if (0 == nTemp)
    {
      // Normal d*TREK format, do nothing
    }
  else if (1 == nTemp)
    {
      // Normal d*TREK format, but no header

      sOptions = sOptions + " -nounavgheader";
    }
  else if (2 == nTemp)
    {
      // Use -texsan option

      sOptions = sOptions + " -texsan";
    }
  else if (3 == nTemp)
    {
      // Use -texsan2 option

      sOptions = sOptions + " -texsan2";
    }

  else if (4 == nTemp)
    {
      // Use -shelx option

      sOptions = sOptions + " -shelx";
    }

  m_tDtscaleOptions.sUnavgOutputFormat = (Cstring) nTemp;
  
//  m_tDtscaleOptions.bTexsan = XmToggleButtonGetState(_tbScaleTexsan);
//  if (m_tDtscaleOptions.bTexsan)
//    {
//      sOptions = sOptions + " -texsan";
//    }

  m_tDtscaleOptions.bNoHeader = XmToggleButtonGetState(_tbScaleNoHeader);
  if (m_tDtscaleOptions.bNoHeader)
    {
      sOptions = sOptions + " -noheader";
    }

  m_tDtscaleOptions.bUnAvg = XmToggleButtonGetState(_tbScaleUnaverage);
  if (m_tDtscaleOptions.bUnAvg)
    {
      XtManageChild(_tfScaleUnAvg);
      XtManageChild(_pbScaleUnAvg);
//      XtManageChild(_tbScaleTexsan);
      XtManageChild(_cUIom9ScaleUnavgOutput->baseWidget());
      XtManageChild(_lbScaleUnavgOutput);
    }
  else
    {
      XtUnmanageChild(_tfScaleUnAvg);
      XtUnmanageChild(_pbScaleUnAvg);
//      XtUnmanageChild(_tbScaleTexsan);
      XtUnmanageChild(_cUIom9ScaleUnavgOutput->baseWidget());
      XtUnmanageChild(_lbScaleUnavgOutput);
    }

  pcTemp = XmTextFieldGetString(_tfScaleUnAvg);
  m_tDtscaleOptions.sUnavgFile = pcTemp;
  XtFree(pcTemp);
  if (m_tDtscaleOptions.bUnAvg)
    {
      bGoodPrefix = TRUE;
/*
      for (i = 0; bGoodPrefix 
	   && (i < m_tDtscaleOptions.sUnavgFile.length()); i++)
	{
	  bGoodPrefix =    ('0' <= m_tDtscaleOptions.sUnavgFile.GetAt(i))
	                && ('z' >= m_tDtscaleOptions.sUnavgFile.GetAt(i));
	}
*/
      if ( (bGoodPrefix) && (0 < m_tDtscaleOptions.sUnavgFile.length()) )
	{
	  sOptions = sOptions + " -ref " 
                            + m_tDtscaleOptions.sUnavgFile;
	}
    }

  m_tDtscaleOptions.bFixB = XmToggleButtonGetState(_tbScaleFixB);

  pcTemp = XmTextFieldGetString(_tfScaleMergeFile);
  m_tDtscaleOptions.sMergeFile = pcTemp;
  XtFree(pcTemp);

  nTemp= _cUIom9ScaleAbscor->nGetValue();

  Cstring sBatchOptions = "";
  Cstring sBfactOptions = "";
  Cstring sReqabOptions = "";
  
  if (m_tDtscaleOptions.bFixB)
    {
      //      sBfactOptions  = sErrorModelOption1 + sRejectOption
      //                       + " -bfactor";
      sBfactOptions  = " -bfactor";
    }

  if (0 == nTemp)
    {
      // No scaling whatsoever, change nothing
 
     if (m_tDtscaleOptions.bFixB)
	{
	  //	  sBfactOptions  = sErrorModelOption1 + sRejectOption
	  //	    + " -bfactor";
	  sBfactOptions  = " -bfactor";
	}
     else
       {
	 //	  sBfactOptions  = sErrorModelOption1;
	  sBfactOptions  = "";

       }
    }
  else if (1 == nTemp)
    {
      //      sReqabOptions = sErrorModelOption1 + sRejectOption
      //                      + " -reqab spherical 4 3";
      sReqabOptions =  " -reqab spherical 4 3";
    }
  else if (2 == nTemp)
    {
      //      sBatchOptions = sErrorModelOption1 + sRejectOption
      //                      + " -batchscale";
      //      sReqabOptions = sErrorModelOption1 + sRejectOption
      //                      + " -reqab spherical 4 3";
      sBatchOptions = " -batchscale";
      sReqabOptions = " -reqab spherical 4 3";
    }
  else if (4 == nTemp)
    {
      //      sBatchOptions = sErrorModelOption1 + sRejectOption
      //                      + " -batchscale";
      //      sReqabOptions = sErrorModelOption1 + sRejectOption
      //                      + " -reqab spherical 4 3";
      sBatchOptions = " -batchscale";
      sReqabOptions = " -sabsorb";
    }
  else if (5 == nTemp)
    {
      //      sReqabOptions = sErrorModelOption1 + sRejectOption
      //              + " -reqab spherical 3 3";
      sReqabOptions = " -reqab spherical 3 3";
    }
  else if (6 == nTemp)
    {
      // sBatchOptions = sErrorModelOption1 + sRejectOption
      sBatchOptions = " -batchscale";
      //      sBatchOptions = sErrorModelOption1
      //                      + " -batchscale";
    }
  else if (7 == nTemp)
    {
      //sBatchOptions = sErrorModelOption1 + sRejectOption
      // + " -batchscale";
      //sReqabOptions = sErrorModelOption1 + sRejectOption
      //+ " -reqab";
      sBatchOptions = " -batchscale";
      sReqabOptions = " -reqab";
    }
  else if (8 == nTemp)
    {
      //      sReqabOptions = sErrorModelOption1 + sRejectOption
      //                      + " -reqab";
      sReqabOptions = " -reqab";
    }

  m_sScaleCommand = sTransSymbol("$(dtscaleaverage)") + ' '
                    + m_sHeaderName + ' ' + m_sReflnlistName
                    + sOptions
                    + " -errormodel " + sErrorModelOption1
                    + " -reject fraction " + sRejectOption
		    + sBatchOptions + sBfactOptions + sReqabOptions
                    + ' ' + m_tDtscaleOptions.sMergeFile;


  XmTextFieldSetString(_tfCommand, m_sScaleCommand.string());

  if (w == _pbScaleRun)
    {
      // Run the command in m_sScaleCommand

      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sScaleCommand);
    }

    // End user code block <vScaleCB>
}

void MainWindow::vScaleTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScaleTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScaleTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScaleTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  if (XmIsTextField(w))
    XmTextShowPosition(w, XmTextGetLastPosition(w));

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vScaleCB(w, NULL, NULL);

    // End user code block <vScaleTextFieldCB>
}

void MainWindow::vMergeCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vMergeCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vMergeCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vMergeCB>

  int    nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;

  if (w == _pbMergeMergeFile)
    {
      vPopDialog(w, clientData, callData);
      return;
    }

  pcTemp = XmTextFieldGetString(_tfMergeMergeFile);
  m_tDtmergeOptions.sMergeFilename = pcTemp;
  XtFree(pcTemp);

  m_sMergeCommand = sTransSymbol("$(dtreflnmerge)");

  m_sMergeCommand = m_sMergeCommand + ' ' + m_tDtmergeOptions.sReflnlistNames;

  m_sMergeCommand = m_sMergeCommand + ' ' + m_tDtmergeOptions.sMergeFilename;

  m_sMergeCommand = m_sMergeCommand + " -h" + m_sHeaderName;

  XmTextFieldSetString(_tfCommand, m_sMergeCommand.string());

  if (w == _pbMergeRun)
    {
      // Run the command in m_sMergeCommand

      if (bFileExists(m_tDtmergeOptions.sMergeFilename))
	{
	  (void) nFileAppendVersion(m_tDtmergeOptions.sMergeFilename, FALSE);
	}
      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sMergeCommand);
    }

    // End user code block <vMergeCB>
}

void MainWindow::vMergeTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vMergeTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vMergeTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vMergeTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  if (XmIsTextField(w))
    XmTextShowPosition(w, XmTextGetLastPosition(w));

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vMergeCB(w, NULL, NULL);

    // End user code block <vMergeTextFieldCB>
}

void MainWindow::vIntegrateCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vIntegrateCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vIntegrateCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vIntegrateCB>

  int     nStat;
  double  dTemp;
  int     nTemp;
  char   *pcTemp;
  Cstring sTemp;
  int     nProfitType;

  // Read the Integrate dialog widgets and construct command to run

  m_sIntegrateCommand = "";

  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfIntegrateResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  double dTemp1;
  dTemp1 = 0.0;
  pcTemp = XmTextFieldGetString(_tfIntegrateResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  if (w != _tfIntegrateResolution1)
    vSetResoOther(_tfIntegrateResolution2, _tfIntegrateResolution1, 
		Cstring("999.0"),
		&m_tDtintegrateOptions.sReso1);
      
  
  if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
    {
      m_sIntegrateCommand = m_sIntegrateCommand + " -reso " 
	                    + m_tDtintegrateOptions.sReso1 + ' ' 
	                    + m_tDtintegrateOptions.sReso2;
    }

  pcTemp = XmTextFieldGetString(_tfIntegrateWindow1);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtintegrateOptions.a2sWindow[0] = pcTemp;
  XtFree(pcTemp);
  XmTextFieldSetString(_tfCalibrateWindow1, 
		       m_tDtintegrateOptions.a2sWindow[0].string());
  
  pcTemp = XmTextFieldGetString(_tfIntegrateWindow2);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtintegrateOptions.a2sWindow[1] = pcTemp;
  XtFree(pcTemp);
  XmTextFieldSetString(_tfCalibrateWindow2, 
		       m_tDtintegrateOptions.a2sWindow[1].string());
  
  m_sIntegrateCommand = m_sIntegrateCommand + " -window "
                        + m_tDtintegrateOptions.a2sWindow[0] + ' '
                        + m_tDtintegrateOptions.a2sWindow[1];

  pcTemp = XmTextFieldGetString(_tfIntegratePadding);
  dTemp  = 1.0;
  dTemp1 = 0.0;
  sTemp = Cstring(pcTemp);
  if (sTemp.contains(','))
    {
      nStat = sscanf(pcTemp, "%d,%lf,%lf", &nTemp, &dTemp, &dTemp1);
      if (3 == nStat)
	{
	  // Write back without commas
	  sTemp = Cstring(nTemp) + ' ' + Cstring(dTemp,0,2)
                  + ' ' + Cstring(dTemp1,0,2); 
	  XmTextFieldSetString(_tfIntegratePadding,
			       sTemp.string());
	}
    }
  else
    nStat = sscanf(pcTemp, "%d %lf %lf", &nTemp, &dTemp, &dTemp1);
  if (1 <= nStat)
    {
      m_tDtintegrateOptions.sPad3D = sTemp;
      m_sIntegrateCommand = m_sIntegrateCommand + " -pad "
	+ Cstring(nTemp);
    } 
  XtFree(pcTemp);
  if (2 <= nStat)
    {
      if ( (0.0 >= dTemp) && (0.0 >= dTemp1) )
	{
	  vPutMessage("ERROR illegal -mosaicitymodel values!", 1);
	}
      else
	{
	  m_sIntegrateCommand = m_sIntegrateCommand + " -mosaicitymodel "
	    + Cstring(dTemp, 5,3) + " " + Cstring(dTemp1, 5,3);
	}
    }

  //+2009-11-03 JWP
  // The dialog has been changed a little bit.  
  // The -profit, -display, and -nopurge command line options are no longer supported 
  // by the dialog.
  // The images per batch and images per scale batch are now in different textfields

  int i;
  i = atoi(m_tDtintegrateOptions.a2sProfSize[0].string());
  pcTemp = XmTextFieldGetString(_tfIntegrateProfSize1);
  nStat = sscanf(pcTemp, "%d", &i);
  if (1 == nStat)
    m_tDtintegrateOptions.a2sProfSize[0] = i;
  XtFree(pcTemp);

  //+ 2009-11-03 JWP Now _tfIntegrateProfSize is unmanaged (hidden) and used
  //                 for -profit option 
  dTemp1 = 0.0;
  pcTemp = XmTextFieldGetString(_tfIntegrateProfSize2);
  nStat = sscanf(pcTemp, "%lf %lf", &dTemp, &dTemp1);
  if (2 == nStat)
    m_tDtintegrateOptions.a2sProfSize[1] = pcTemp;
  XtFree(pcTemp);

  if (   (0 >= dTemp)
      || (0 >= dTemp1) )
    {
      // No profile-fitting

      m_sIntegrateCommand = m_sIntegrateCommand + " -noprofit";
      nProfitType = 0;
    }
  else
    {
      m_sIntegrateCommand = m_sIntegrateCommand + " -profit " 
	//Not after 2009-11-03                          + m_tDtintegrateOptions.a2sProfSize[0] + ' ' 
                          + m_tDtintegrateOptions.a2sProfSize[1];
    }
  //- 2009-11-03 JWP 

/*
  dTemp = 0.0;
  pcTemp = XmTextFieldGetString(_tfIntegrateMinPeakRadius);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      if (0.0 <= dTemp)
	{
	  m_tDtintegrateOptions.sMinPeakRadius = pcTemp;
	  m_sIntegrateCommand = m_sIntegrateCommand + " -minpeakrad " 
	                        + m_tDtintegrateOptions.sMinPeakRadius;
	}
    }
  XtFree(pcTemp);
*/

  // Change the way this is done

  i = atoi(m_tDtintegrateOptions.sBatchNum);
  pcTemp = XmTextFieldGetString(_tfIntegrateBatchNum);
  nStat = sscanf(pcTemp, "%d", &i);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sBatchNum = i;
      m_sIntegrateCommand = m_sIntegrateCommand + " -batch " 
	+ m_tDtintegrateOptions.sBatchNum + ' '
	//Not after 2009-11-03    + m_tDtintegrateOptions.a2sProfSize[1];
        + m_tDtintegrateOptions.a2sProfSize[0];
    }
  XtFree(pcTemp);

  /* 2009-11-03 +JWP
  pcTemp = XmTextFieldGetString(_tfIntegrateBatchNum);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sBatchNum = pcTemp;
      if (0 < nTemp)
	m_sIntegrateCommand = m_sIntegrateCommand + " -batch " 
	                      + m_tDtintegrateOptions.sBatchNum;
    }
  XtFree(pcTemp);
  */

  pcTemp = XmTextFieldGetString(_tfIntegrateBatchPrefix);
  m_tDtintegrateOptions.sBatchPrefix = pcTemp;
  XtFree(pcTemp);

  bool bGoodPrefix = TRUE;
  bool bAllDigits  = TRUE;
  char cTemp;

  for (i = 0; bGoodPrefix 
              && (i < m_tDtintegrateOptions.sBatchPrefix.length()); i++)
    {
       cTemp = m_tDtintegrateOptions.sBatchPrefix.GetAt(i);
      bGoodPrefix =    ('0' <= cTemp) && ('z' >= cTemp);
      bAllDigits =     ('0' <= cTemp) && ('9' >= cTemp) && bAllDigits;
     }
  if ( 0 >= m_tDtintegrateOptions.sBatchPrefix.length())
    {
      bGoodPrefix = TRUE;
      bAllDigits  = TRUE;
    }
  else if (bGoodPrefix)
    {
      m_sIntegrateCommand = m_sIntegrateCommand + " -batchprefix " 
	                    + m_tDtintegrateOptions.sBatchPrefix;
    }
  else
    {
      m_tDtintegrateOptions.sBatchPrefix = ms_sDtNoNe;  // Magic!
      bAllDigits = FALSE;
    }
  if ( (    (w == _pbIntegrateRun) 
	 || (w == _tfIntegrateBatchPrefix) ) && !bAllDigits)
    {
      vPutMessage("WARNING! Batch prefix is not all digits!\n"
                  "  This may lead to later difficulties with\n"
                  "  absorption correction.  It is recommended that\n"
                  "  batch prefixes be small positive integers.\n",
		  1);
    }

  pcTemp = XmTextFieldGetString(_tfIntegrateDump);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sDumpRefln = pcTemp;
      if (0 < nTemp)
	m_sIntegrateCommand = m_sIntegrateCommand + " -dump " 
                              + m_tDtintegrateOptions.sDumpRefln;
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfIntegrateWait);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      m_tDtintegrateOptions.sWait = pcTemp;
      if (0 < nTemp)
	m_sIntegrateCommand = m_sIntegrateCommand + " -wait " 
                              + m_tDtintegrateOptions.sWait;
    }
  XtFree(pcTemp);

  //+ 2009-11-03 JWP  Display is now used for -differentscan 
  // Make sure "radio" button behavior is enforced
  if ( (w == _tbIntegrateNopurge) && XmToggleButtonGetState(_tbIntegrateNopurge) )
    XmToggleButtonSetState(_tbIntegrateDisplay, False, False);	  
  if ( (w == _tbIntegrateDisplay) && XmToggleButtonGetState(_tbIntegrateDisplay) )
    XmToggleButtonSetState(_tbIntegrateNopurge, False, False);	  

  m_tDtintegrateOptions.bDisplay = XmToggleButtonGetState(_tbIntegrateDisplay);
  if (m_tDtintegrateOptions.bDisplay)
    {
      m_sIntegrateCommand = m_sIntegrateCommand + " -differentscan";
    }
  
  //+ 2009-11-03 JWP  No purge is now used for -differentdet 
  if (XtIsSensitive(_tbIntegrateNopurge))
    {
      m_tDtintegrateOptions.bNopurge = XmToggleButtonGetState(_tbIntegrateNopurge);
      if (m_tDtintegrateOptions.bNopurge)
	{
	  m_sIntegrateCommand = m_sIntegrateCommand + " -differentdet";
	}
    }
  
  pcTemp = XmTextFieldGetString(_tfIntegrateSeqStart);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtintegrateOptions.a2sSeqNum[0] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIntegrateSeqEnd);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtintegrateOptions.a2sSeqNum[1] = pcTemp;
  XtFree(pcTemp);
  
  nTemp =  _cUIom9IntegratePrerefine->nGetValue();
  m_tDtintegrateOptions.sPrerefine    = Cstring(nTemp);
  if (0 == nTemp)
    {
      m_sIntegrateCommand = m_sIntegrateCommand + " -noprerefine";
    }
  else if (7 == nTemp )
    {
	  m_sIntegrateCommand = m_sIntegrateCommand + " -prefind -8 -prerefine 2";
    }
  else if (8 == nTemp )
    {
	  m_sIntegrateCommand = m_sIntegrateCommand + " -prefind -4 -prerefine 2";
    }
  else
    {
      if (4 <= nTemp)
	{      
	  nTemp = nTemp - 2;
	  m_sIntegrateCommand = m_sIntegrateCommand + " -prefind "
	    + (Cstring)nTemp;
	}
      m_sIntegrateCommand = m_sIntegrateCommand + " -prerefine "
                            + (Cstring)nTemp;

    }
  //+2009-11-03 JWP
  m_sIntegrateCommand = m_sIntegrateCommand + " -display";
  //-2009-11-03 JWP

  sTemp = sGetEnv("DTP_INTEGRATE_EXTRA");
  if ("" != sTemp)
    m_sIntegrateCommand = m_sIntegrateCommand + ' ' + sTemp;

//+jwp 24-July-1997
  m_tDtintegrateOptions.bSpecial  = (bool) _cUIom9IntegrateSpecial->nGetValue();
  m_tDtintegrateOptions.bSpecial1 = XmToggleButtonGetState(_tbIntegrateSpecial1);
  m_tDtintegrateOptions.bSpecial2 = XmToggleButtonGetState(_tbIntegrateSpecial2);
  m_tDtintegrateOptions.bSpecial3 = XmToggleButtonGetState(_tbIntegrateSpecial3);
  m_tDtintegrateOptions.bNopurge  = XmToggleButtonGetState(_tbIntegrateNopurge);

  static int nsFirstTime = 0;
  if (   (w == _cUIom9IntegrateSpecial->baseWidget())
      || (w == _tbIntegrateSpecial1)
      || (w == _tbIntegrateSpecial2)
      || (w == _tbIntegrateSpecial3)
      || (w == _tbIntegrateSpecial4)
      || (0 == nsFirstTime) )
    {
      XmString sxTemp;
      nsFirstTime = 1;
      if (0 != _cUIom9IntegrateSpecial->nGetValue())
	{
	  // Special is ON
//+2010-02-04 JWP
// Never manage 1-3 
// XtManageChild(_tbIntegrateSpecial1);
// XtManageChild(_tbIntegrateSpecial2);
// XtManageChild(_tbIntegrateSpecial3);
//
// And the state of Special4 is always ON at first
	  XmToggleButtonSetState(_tbIntegrateSpecial4, True, False);
//-2010-02-04 JWP
	  XtManageChild(_tbIntegrateSpecial4);
	  XtUnmanageChild(_tfIntegrateSeqStart);
	  XtUnmanageChild(_tfIntegrateSeqEnd);

	  // Clear the list

	  _cslImages->vDeleteAll();

	  int nWNum;
	  Widget a4w[4];
	  a4w[0] = _tbIntegrateSpecial1;
	  a4w[1] = _tbIntegrateSpecial2;
	  a4w[2] = _tbIntegrateSpecial3;
	  a4w[3] = _tbIntegrateSpecial4;
	  
	  for (nWNum = 0; nWNum < 4; nWNum++)
	    {
	      if (XmToggleButtonGetState(a4w[nWNum]))
		{
		  // Add to the list the matches

		  XtVaGetValues(a4w[nWNum], XmNlabelString, &sxTemp, NULL);
		  XmStringGetLtoR(sxTemp,
#if (XmVersion >= 1002)
				  XmFONTLIST_DEFAULT_TAG,
#else
				  XmSTRING_DEFAULT_CHARSET,
#endif
				  &pcTemp);
		  sTemp     = pcTemp;
		  XtFree(pcTemp);
		  if (   (_cUIfileFilter->bDoSearch(m_sImageDir + sTemp))
		      && (0 < _cUIfileFilter->nGetItemCount()) )
		    {
		      m_poXcursor->vSetWait();		      
		      _cslImages->vAddOtherList(_cUIfileFilter->wGetListWidget(), sTemp);
		      m_poXcursor->vRestore();
		    }
		  else
		    {
		      sTemp = "No image files which match " + sTemp + " found!";
		      vPutMessage(sTemp.string(), 1);
		      XmToggleButtonSetState(a4w[nWNum], False, False);
		    }
		}
	    } // next nWNum

	  // Select ALL images in the list
	  // TODO: Select ALL only if w==_cUIom9IntegrateSpecial
	  //       otherwise work on the selection

	  _cslImages->vSetSelectionAll(False);
	}
      else
	{
	  // Special is OFF

	  XtUnmanageChild(_tbIntegrateSpecial1);
	  XtUnmanageChild(_tbIntegrateSpecial2);
	  XtUnmanageChild(_tbIntegrateSpecial3);
	  XtUnmanageChild(_tbIntegrateSpecial4);
	  XtManageChild(_tfIntegrateSeqStart);
	  XtManageChild(_tfIntegrateSeqEnd);

	  // Restore list to ?
	  _cslImages->vDeleteAll();
	  if (NULL != m_poScan)
	    {
	      sTemp = m_poScan->sGetTemplate();
	      if (_cUIfileFilter->bDoSearch(sTemp))
		{
		  _cslImages->vAddOtherList(_cUIfileFilter->wGetListWidget(),
					    m_poScan->sGetTemplate());
		}
	    }
	}
    }

//-jwp 24-July-1997

  if (0 != _cUIom9IntegrateSpecial->nGetValue())
    {
      // Allow for the SPECIAL processing option

      if (w != _pbIntegrateRun)
	{
	  m_sIntegrateCommand = sDtrekGetPrefix() + "dtintspecial # " + m_sIntegrateCommand;
	  XmTextFieldSetString(_tfCommand, m_sIntegrateCommand.string());
	}
    }
  else
    {
      m_sIntegrateCommand = sTransSymbol("$(dtintegrate)") + ' ' 
                          + m_sHeaderName 
                          + " -seq "
                          + m_tDtintegrateOptions.a2sSeqNum[0] + ' '
                          + m_tDtintegrateOptions.a2sSeqNum[1] + ' '
                          + m_sIntegrateCommand;
      XmTextFieldSetString(_tfCommand, m_sIntegrateCommand.string());
    }

  if (w == _pbIntegrateRun)
    {
      nTemp = 0;
      if (m_tDtintegrateOptions.bSpecial)
	{
	  // Allow for the SPECIAL processing option

	  nTemp = nIntegrateSpecial(&m_sIntegrateCommand);
	  XmTextFieldSetString(_tfCommand, m_sIntegrateCommand.string());
	}

      if (0 == nTemp)
	{
	  // Run the command in m_sIntegrateCommand

	  m_bFCDialogRun = TRUE;
	  vCommandExecute(m_sIntegrateCommand);
	}
    }
    // End user code block <vIntegrateCB>
}

void MainWindow::vIntegrateTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vIntegrateTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vIntegrateTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vIntegrateTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vIntegrateCB(w, NULL, NULL);

    // End user code block <vIntegrateTextFieldCB>
}

void MainWindow::vOrientTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vOrientTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vOrientTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vOrientTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vOrientCB(w, NULL, NULL);
    // End user code block <vOrientTextFieldCB>
}

void MainWindow::vOrientCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vOrientCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vOrientCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vOrientCB>

  char  *pcTemp;
  double dTemp;
  int    nStat;

  if (   (w == _cUIomOrientLab1->baseWidget())
      || (w == _cUIomOrientLab2->baseWidget())
      || (w == _cUIomOrientCrystal1->baseWidget())
      || (w == _cUIomOrientCrystal2->baseWidget()))
    {
      m_tDtorientOptions.bRot = FALSE;
    }
  else if (   (w == _tfOrientRot)
	   || (w == _cUIomOrientLab3->baseWidget()))
    {
      m_tDtorientOptions.bRot = TRUE;
    }

  m_sOrientCommand = sTransSymbol("$(dtorient)") + ' ' + m_sHeaderName;

  m_tDtorientOptions.sCrystal1 = (Cstring) _cUIomOrientCrystal1->pcGetLabel();
  m_tDtorientOptions.sCrystal2 = (Cstring) _cUIomOrientCrystal2->pcGetLabel();
  m_tDtorientOptions.sLab1     = (Cstring) _cUIomOrientLab1->pcGetLabel();
  m_tDtorientOptions.sLab2     = (Cstring) _cUIomOrientLab2->pcGetLabel();
  m_tDtorientOptions.sLab3     = (Cstring) _cUIomOrientLab3->pcGetLabel();

  if (0 <= m_tDtorientOptions.sLab3.find(' '))
    m_tDtorientOptions.sLab3     = (Cstring) '"' + m_tDtorientOptions.sLab3 + '"';

  pcTemp = XmTextFieldGetString(_tfOrientRot);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtorientOptions.sRot = pcTemp;
  XtFree(pcTemp);

  if (m_tDtorientOptions.bRot)
    {
      m_sOrientCommand = m_sOrientCommand + " -rot " + m_tDtorientOptions.sRot
                                          + ' ' + m_tDtorientOptions.sLab3;
    }
  else
    {
      m_sOrientCommand = m_sOrientCommand 
	+ ' ' + '"' + m_tDtorientOptions.sCrystal1 + "||"
	+ m_tDtorientOptions.sLab1 + '"' + ' ' + '"'
	+ m_tDtorientOptions.sCrystal2 + "||"
	+ m_tDtorientOptions.sLab2 + '"';
    }

  XmTextFieldSetString(_tfCommand, m_sOrientCommand.string());

  if (w == _pbOrientRun)
    {
      // Run the command in m_sOrientCommand

      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sOrientCommand, 1);
    }

    // End user code block <vOrientCB>
}

void MainWindow::vPredictTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPredictTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPredictTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPredictTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vPredictCB(w, NULL, NULL);
    // End user code block <vPredictTextFieldCB>
}

void MainWindow::vPredictCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPredictCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPredictCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPredictCB>

  int   nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;

  // Read the Predict dialog widgets and construct command to run

  m_sPredictCommand = sTransSymbol("$(dtpredict)") + ' ' + m_sHeaderName;

  if (   (w == _tfPredictRotStart)
      || (w == _tfPredictRotEnd) )
    {
      XtSetSensitive(_lbPredictSeq, False);
      XtSetSensitive(_lbPredictRot, True);
      m_tDtpredictOptions.bSeqOrRot = TRUE;
    }
  else if (   (w == _tfPredictSeqStart)
	   || (w == _tfPredictSeqEnd) )
    {
      XtSetSensitive(_lbPredictRot, False);
      XtSetSensitive(_lbPredictSeq, True);
      m_tDtpredictOptions.bSeqOrRot = FALSE;
    }

  pcTemp = XmTextFieldGetString(_tfPredictSeqStart);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtpredictOptions.a2sSeqNum[0] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfPredictSeqEnd);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtpredictOptions.a2sSeqNum[1] = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfPredictRotStart);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtpredictOptions.a2sRotRange[0] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfPredictRotEnd);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtpredictOptions.a2sRotRange[1] = pcTemp;
  XtFree(pcTemp);
      
  if (!m_tDtpredictOptions.bSeqOrRot)
    {
      m_sPredictCommand = m_sPredictCommand + " -seq "
                          + m_tDtpredictOptions.a2sSeqNum[0] + ' '
                          + m_tDtpredictOptions.a2sSeqNum[1];
      if (m_tDtpredictOptions.a2sSeqNum[0] == m_tDtpredictOptions.a2sSeqNum[1])
	{
	  // Single image prediction, so try to do overlap test, too.
	  float a3fTemp[3];
/***** +jwp
	  nStat = m_poHeader->nGetValue(D_K_DtfindSpotSize, 3, a3fTemp);
	  
	  if (0 == nStat)
	    {
	      vPutMessage("Overlap spot size from " D_K_DtfindSpotSize 
			  " keyword in header.");
	    }
	  else
	    {
	      a3fTemp[0] = 2.0 * atof(m_tDtintegrateOptions.sMinPeakRadius);
	      a3fTemp[1] = a3fTemp[0];
	      vPutMessage("Overlap spot size from Integrate minimum peak radius.");
	    }
	  if ( (0.0 < a3fTemp[0]) && (0.0 < a3fTemp[1]) )
	    {
	      m_sPredictCommand += " -overlap " + Cstring(a3fTemp[0], 1)
                                 + ' ' + Cstring(a3fTemp[1], 1) + " -5";
	    }
	  else
	    {
	      vPutMessage("No overlap checking because no valid spot size info.");
	    }
	}
      else
	{
	  vPutMessage("No overlap checking because more than one image selected.");
	}
**********************/
	  nStat = 1;
	  if (NULL != m_poHeader)
	    nStat = m_poHeader->nGetValue("DA_EllipsoidA00", 3, a3fTemp);
	  if (0 == nStat)
	    {
	      vPutMessage("Overlap spot size from ellipsoid info in header.");
	      m_sPredictCommand += " -overlap";
	    }
	  else
	    {
	      vPutMessage("No overlap checking because no valid spot size info.");
	    }
	}
      else
	{
	  vPutMessage("No overlap checking because more than one image selected.");
	}
    }
  else if (m_tDtpredictOptions.bSeqOrRot)
    {
      m_sPredictCommand = m_sPredictCommand + " -rot "
                          + m_tDtpredictOptions.a2sRotRange[0] + ' '
                          + m_tDtpredictOptions.a2sRotRange[1];
    }
  
  pcTemp = XmTextFieldGetString(_tfPredictResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtpredictOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  double dTemp1;
  pcTemp = XmTextFieldGetString(_tfPredictResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtpredictOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  
  if (w != _tfPredictResolution1)
    vSetResoOther(_tfPredictResolution2, _tfPredictResolution1, 
		Cstring("999.0"),
		&m_tDtpredictOptions.sReso1);
      

  if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
    {
      m_sPredictCommand = m_sPredictCommand + " -reso " 
                          + m_tDtpredictOptions.sReso1 + ' ' 
                          + m_tDtpredictOptions.sReso2;
    }

  pcTemp = XmTextFieldGetString(_tfPredictMosaicity);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
//      m_tDtpredictOptions.sMosaicity = pcTemp;
      m_tDtpredictOptions.sMosaicity = Cstring(dTemp);
    }
  XtFree(pcTemp);
  m_sPredictCommand = m_sPredictCommand + " -mosaicity "
                                        + m_tDtpredictOptions.sMosaicity;

  m_tDtpredictOptions.bList = XmToggleButtonGetState(_tbPredictList);
  if (m_tDtpredictOptions.bList)
    {
      m_sPredictCommand = m_sPredictCommand + " -list";
    }

  m_tDtpredictOptions.bNonunf = XmToggleButtonGetState(_tbPredictNonunf);
  if (m_tDtpredictOptions.bNonunf)
    {
      m_sPredictCommand = m_sPredictCommand + " -nonunf";
    }
      
  m_tDtpredictOptions.bDisplay = XmToggleButtonGetState(_tbPredictDisplay);
  if (m_tDtpredictOptions.bDisplay)
    {
      m_sPredictCommand = m_sPredictCommand + " -display";
    }

  XmTextFieldSetString(_tfCommand, m_sPredictCommand.string());

  if (w == _pbPredictRun)
    {
      // Run the command in m_sPredictCommand

      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sPredictCommand);
    }
    // End user code block <vPredictCB>
}

void MainWindow::vRefineCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vRefineCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vRefineCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vRefineCB>

  // NOTE: This routine is called pseudo-recursively!

  int    i;
  int    nStat;
  double dTemp, dTemp1;
  int    nTemp;
  char  *pcTemp;
  Cstring sTemp;
  Cstring sReflns;

  static int nsFirstTime = 0;

  // Read the Refine dialog widgets and construct command to run

  if (w == _txRefineMacro)
    {
      pcTemp = XmTextGetString(_txRefineMacro);
      sTemp = (Cstring) pcTemp;
      XtFree(pcTemp);
      if ( (0 < m_nRefineMacro) && (DTP_MAX_REFINE_MACROS > m_nRefineMacro) )
	{
	  m_tDtrefineOptions.sRefineMacro[m_nRefineMacro] = sTemp;
	  if (sTemp.contains("-name "))
	    {
	      Cstring sName;
	      sName = sTemp.after("-name ");
	      _cUIom9RefineMacros->vSetButtonLabel(m_nRefineMacro,
						   sName.string());
	    }
	}
    }

  if ( (w == _cUIom9RefineMacros->baseWidget()) || (0 == nsFirstTime) )
    {
      //m_nRefineMacro = (int) clientData;
      m_nRefineMacro = (intptr_t) clientData;
      m_tDtrefineOptions.sRefineMacroNum = (Cstring) m_nRefineMacro;
      if (0 == m_nRefineMacro)
	{
	  XtManageChild(_foRefine);
	  XtUnmanageChild(_swRefineMacro);
	  XtUnmanageChild(_foRefineMacro);
	}
      else if (DTP_MAX_REFINE_MACROS > m_nRefineMacro)
	{
	  XtManageChild(_swRefineMacro);
	  XtManageChild(_foRefineMacro);
	  XtUnmanageChild(_foRefine);
	  XmTextSetString(_txRefineMacro,
		  m_tDtrefineOptions.sRefineMacro[m_nRefineMacro].string());
	}
    }

  bool bState = False;
  if (0 == m_nRefineMacro)
    {
      // Dialog specifies refinement scheme

      if (XmIsToggleButton(w))
	{
	  XmToggleButtonCallbackStruct *pCBS 
	    = (XmToggleButtonCallbackStruct*)callData;
	  bState = pCBS->set;
	}
      if (w == _tbRefineCrystalLengths)
	{
	  XmToggleButtonSetState(_tbRefineCrystalAstar, bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalBstar, bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalCstar, bState, False);
	  if (bState)
	    XmToggleButtonSetState(_tbRefineSourceWavelength, False, False);
	}
      else if (   (w == _tbRefineCrystalAstar)
	       || (w == _tbRefineCrystalBstar)
	       || (w == _tbRefineCrystalCstar) )
	{
	  if (bState)
	    XmToggleButtonSetState(_tbRefineSourceWavelength, False, False);
	}
      else if (w == _tbRefineCrystalAngles)
	{
	  XmToggleButtonSetState(_tbRefineCrystalAlphastar, bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalBetastar,  bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalGammastar, bState, False);
	}
      else if (w == _tbRefineCrystalRots)
	{
	  XmToggleButtonSetState(_tbRefineCrystalRot1, bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalRot2, bState, False);
	  XmToggleButtonSetState(_tbRefineCrystalRot3, bState, False);
	}
      else if (w == _tbRefineCrystalCell)
	{
	  XmToggleButtonSetState(_tbRefineCrystalLengths, bState, True);
	  XmToggleButtonSetState(_tbRefineCrystalAngles,  bState, True);
	  if (bState)
	    XmToggleButtonSetState(_tbRefineSourceWavelength, False, False);
	}
      else if (w == _tbRefineCrystalAll)
	{
	  XmToggleButtonSetState(_tbRefineCrystalCell, bState, True);
	  XmToggleButtonSetState(_tbRefineCrystalRots, bState, True);
	  XmToggleButtonSetState(_tbRefineCrystalMosaicity, bState, False);
	}
      else if (w == _tbRefineDetAll)
	{
	  XmToggleButtonSetState(_tbRefineDetTrans, bState, True);
	  XmToggleButtonSetState(_tbRefineDetRots,  bState, True);
	}
      else if (w == _tbRefineDetTrans)
	{
	  XmToggleButtonSetState(_tbRefineDetTrans1, bState, False);
	  XmToggleButtonSetState(_tbRefineDetTrans2, bState, False);
	  XmToggleButtonSetState(_tbRefineDetTrans3, bState, False);
	}
      else if (w == _tbRefineDetRots)
	{
	  XmToggleButtonSetState(_tbRefineDetRot1, bState, False);
	  XmToggleButtonSetState(_tbRefineDetRot2, bState, False);
	  XmToggleButtonSetState(_tbRefineDetRot3, bState, False);
	}
      else if (w == _tbRefineSourceRots)
	{
	  XmToggleButtonSetState(_tbRefineSourceRot1, bState, False);
	  XmToggleButtonSetState(_tbRefineSourceRot2, bState, False);
	}
      else if (w == _tbRefineSourceWavelength)
	{
	  // Cannot refine wavelength along with any cell lengths
	  
	  if (bState)
	    {
	      XmToggleButtonSetState(_tbRefineCrystalAstar, False, False);
	      XmToggleButtonSetState(_tbRefineCrystalBstar, False, False);
	      XmToggleButtonSetState(_tbRefineCrystalCstar, False, False);
	    }
	}
      
      // Look at all toggle button settings and set 'all' buttons
      
      XmToggleButtonSetState(_tbRefineCrystalLengths, 
			     (   XmToggleButtonGetState(_tbRefineCrystalAstar)
			      && XmToggleButtonGetState(_tbRefineCrystalBstar)
			      && XmToggleButtonGetState(_tbRefineCrystalCstar)),
			     False);
      XmToggleButtonSetState(_tbRefineCrystalAngles, 
			     (   XmToggleButtonGetState(_tbRefineCrystalAlphastar)
			      && XmToggleButtonGetState(_tbRefineCrystalBetastar)
			      && XmToggleButtonGetState(_tbRefineCrystalGammastar)),
			     False);
      XmToggleButtonSetState(_tbRefineCrystalCell,
			     (   XmToggleButtonGetState(_tbRefineCrystalLengths)
			      && XmToggleButtonGetState(_tbRefineCrystalAngles)),
			     False);
      XmToggleButtonSetState(_tbRefineCrystalRots, 
			     (   XmToggleButtonGetState(_tbRefineCrystalRot1)
			      && XmToggleButtonGetState(_tbRefineCrystalRot2)
			      && XmToggleButtonGetState(_tbRefineCrystalRot3)),
			     False);
      XmToggleButtonSetState(_tbRefineCrystalAll,
			     (   XmToggleButtonGetState(_tbRefineCrystalCell)
			      && XmToggleButtonGetState(_tbRefineCrystalRots)
			      && XmToggleButtonGetState(_tbRefineCrystalMosaicity)),
			     False);
      
      XmToggleButtonSetState(_tbRefineDetTrans,
			     (   XmToggleButtonGetState(_tbRefineDetTrans1)
			      && XmToggleButtonGetState(_tbRefineDetTrans2)
			      && XmToggleButtonGetState(_tbRefineDetTrans3)),
			     False);
      XmToggleButtonSetState(_tbRefineDetRots,
			     (   XmToggleButtonGetState(_tbRefineDetRot1)
			      && XmToggleButtonGetState(_tbRefineDetRot2)
			      && XmToggleButtonGetState(_tbRefineDetRot3)),
			     False);
      XmToggleButtonSetState(_tbRefineDetAll,
			     (   XmToggleButtonGetState(_tbRefineDetTrans)
			      && XmToggleButtonGetState(_tbRefineDetRots)),
			     False);
      
      XmToggleButtonSetState(_tbRefineSourceRots,
			     (   XmToggleButtonGetState(_tbRefineSourceRot1)
			      && XmToggleButtonGetState(_tbRefineSourceRot2)),
			     False);
      if (   XmToggleButtonGetState(_tbRefineCrystalAstar)
	  || XmToggleButtonGetState(_tbRefineCrystalBstar)
	  || XmToggleButtonGetState(_tbRefineCrystalCstar)
	  )
	XmToggleButtonSetState(_tbRefineSourceWavelength, False, False);
    }

  // Figure out if user wants a reflnlist or images seqnums

  if (w == _cUIom9RefineRefln->baseWidget())
    {
      if (1 == _cUIom9RefineRefln->nGetValue())
	{
	  // Check scrolled list for
	}
    }

  int nWords = 0;
  Cstring asWords[100];
  int     nNum;
  Cstring *psItems = NULL;
  bool    bGetImages = FALSE;

  if (   (w == _cUIom9RefineRefln->baseWidget())
      && (1 == _cUIom9RefineRefln->nGetValue()) )
    {
      // Switched from reflnlist to image sequence

      _cslImages->vGetSelection(&nNum, &psItems);      
      if (0 >= nNum)
	{
	  // No images selected, so use the old sRefineSeq unless empty

	  bGetImages = ("" == m_tDtrefineOptions.sRefineSeq);
	}
      else
	{
	  if (NULL != psItems)
	    {
	      delete [] psItems;
	      psItems = NULL;
	    }
	}
    }

  if (   (w == _cslImages->baseWidget()) 
      || bGetImages || (0 == nsFirstTime) )
    {
      // Get the seqnum's from the list

      _cslImages->vGetSelection(&nNum, &psItems);      
/*
      cout << "vRef scr, nNum: " << nNum << endl;
      for (int jj = 0; jj < nNum; jj++)
	cout << ">>>" << psItems[jj] << "<<<\n" << flush;
*/
      if (0 == nNum)
	{
	  // No images selected, so this can't be valid, 
	  // so select the FIRST one in the list

	  _cslImages->vSetSelection(1, False);
	  _cslImages->vGetSelection(&nNum, &psItems);

	  if (0 == nNum)
	    {
	      // Still no selection

	      vPutMessage("INFO: No image(s) selected, using selected "
			  "reflnlist filename.", 1);
	      m_tDtrefineOptions.sRefineRefln = (Cstring)0;
	    }
	}
      if ("" == m_tDtrefineOptions.sRefineSeq)
	m_tDtrefineOptions.sRefineSeq = '1';
      if (0 == nNum) 
	{
	  // This has already been taken care of
	}
      else if (" " == psItems[0])
	{
	  // Selection is bogus

	  vPutMessage("INFO: No image(s) selected, using selected "
		      "reflnlist filename.", 1);

	  m_tDtrefineOptions.sRefineRefln = (Cstring)0;
	}
      else if (NULL != m_poScan)
	{
	  int nTemp;
	  // Use 1st image in scan, may not be first image in list!
	  m_tDtrefineOptions.sRefineSeq = m_poScan->nGetSeqNum(0);
	  //m_tDtrefineOptions.sRefineSeq = m_poScan->nGetSeqNum(psItems[0]);
	  for (i = 1; i < nNum; i++)
	    {
	      nTemp   = m_poScan->nGetSeqNum(psItems[i]);
	      m_tDtrefineOptions.sRefineSeq += Cstring(',') + Cstring(nTemp);
//	      cout << "Image file #" << i << ": " << psItems[i] << endl;
	    }
	  m_tDtrefineOptions.sRefineRefln = (Cstring)1;
//	  cout << "sRefineSeq: >>>" 
//               << m_tDtrefineOptions.sRefineSeq << "<<<\n" << flush;
	}
    }
  if (NULL != psItems)
    {
      delete [] psItems;
      psItems = NULL;
    }

  if ( (1 == _cUIom9RefineRefln->nGetValue()) && (NULL != m_poScan) )
    {
      // Build -seq commands from m_tDtrefineOptions.sRefineSeq 

      int nWords = 0;
      Cstring asWords[100];
      nWords = split(m_tDtrefineOptions.sRefineSeq, asWords, 100, ",");
      sReflns = "";
      if (w != _cslImages->baseWidget())
	{
	  XmListDeselectAllItems(_cslImages->wGetListWidget());
	  // Setting selections only works in MULTIPLE_SELECT mode
	  XtVaSetValues(_cslImages->wGetListWidget(), XmNselectionPolicy,
			XmMULTIPLE_SELECT, NULL);
	}
      for (i = 0; i < nWords; i++)
	{
	  sReflns = sReflns + " -seq " + asWords[i];

	  if (w != _cslImages->baseWidget())
	    {
	      // Try to make image list selection match

	      m_poScan->vSetSeqNum(atoi(asWords[i].string()));
	      if (0 == m_poScan->nGetImageName(&asWords[i]))
		{
		 // cout << "imagename>>" << asWords[i] << "<<\n" << flush;
		  Cstring sBase;
		  sBase = sFileGetBasename(asWords[i]);
		  _cslImages->vSetSelection(sBase, False, True);
		}
	    }
	}
      if (w != _cslImages->baseWidget())
	{
	  XtVaSetValues(_cslImages->wGetListWidget(), XmNselectionPolicy,
			XmEXTENDED_SELECT, NULL);
	}

      m_tDtrefineOptions.sRefineRefln = (Cstring)1;
      //XtManageChild(_tbRefineTestMosaicity);
    }
  else // if (0 == _cUIom9RefineRefln->nGetValue())
    {
      // User wants a reflnlist instead of images seqnum's

      //cout << "Reflnlist\n";
      sReflns = m_sReflnlistName;
      m_tDtrefineOptions.sRefineRefln = (Cstring)0;
      XtUnmanageChild(_tbRefineTestMosaicity);
    }

  // Build command line 

  m_sRefineCommand = sTransSymbol("$(dtrefine)") + ' ' + m_sHeaderName 
                                                 + ' ' + sReflns;
  if (0 == m_nRefineMacro)
    {
      // Interactive macro

      if ( XtIsManaged(_tbRefineTestMosaicity)
	  && XmToggleButtonGetState(_tbRefineTestMosaicity))
	{
	  // 
	  m_sRefineCommand = m_sRefineCommand + " -testmosaicity";
	}
      else 
	{
	  if (XmToggleButtonGetState(_tbRefineCrystalAll))
	    {
	      m_sRefineCommand = m_sRefineCommand + " +CrysAll";
	      m_tDtrefineOptions.a15bCrystal[0]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[1]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[2]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[3]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[4]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[5]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[6]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[7]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[8]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[9]  = TRUE;
	      m_tDtrefineOptions.a15bCrystal[10] = TRUE;
	      m_tDtrefineOptions.a15bCrystal[11] = TRUE;
	      m_tDtrefineOptions.a15bCrystal[12] = TRUE;
	      m_tDtrefineOptions.a15bCrystal[13] = TRUE;
	      m_tDtrefineOptions.a15bCrystal[14] = TRUE;
	    }
	  else 
	    {
	      m_tDtrefineOptions.a15bCrystal[14] = FALSE;
	      if  (XmToggleButtonGetState(_tbRefineCrystalCell))
		{
		  m_sRefineCommand = m_sRefineCommand + " +CrysCell";
		  m_tDtrefineOptions.a15bCrystal[13] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[0] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[1] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[2] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[3] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[4] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[5] = TRUE;
		}
	      else
		{
		  m_tDtrefineOptions.a15bCrystal[13] = FALSE;
		  if (XmToggleButtonGetState(_tbRefineCrystalAngles))
		    {
		      m_sRefineCommand = m_sRefineCommand + " +CrysAngles";
		      m_tDtrefineOptions.a15bCrystal[12] = TRUE;
		      m_tDtrefineOptions.a15bCrystal[3]  = TRUE;
		      m_tDtrefineOptions.a15bCrystal[4]  = TRUE;
		      m_tDtrefineOptions.a15bCrystal[5]  = TRUE;
		    }
		  else
		    {
		      m_tDtrefineOptions.a15bCrystal[12] = FALSE;
		      m_tDtrefineOptions.a15bCrystal[3] 
			= XmToggleButtonGetState(_tbRefineCrystalAlphastar);
		      if (m_tDtrefineOptions.a15bCrystal[3])
			{
			  m_sRefineCommand = m_sRefineCommand + " +CrysAlps";
			}
		      m_tDtrefineOptions.a15bCrystal[4] 
			= XmToggleButtonGetState(_tbRefineCrystalBetastar);
		      if (m_tDtrefineOptions.a15bCrystal[4])
			{
			  m_sRefineCommand = m_sRefineCommand + " +CrysBets";
			}
		      m_tDtrefineOptions.a15bCrystal[5] 
			= XmToggleButtonGetState(_tbRefineCrystalGammastar);
		      if (m_tDtrefineOptions.a15bCrystal[5])
			{
			  m_sRefineCommand = m_sRefineCommand + " +CrysGams";
			}
		    }
		  if (XmToggleButtonGetState(_tbRefineCrystalLengths))
		    {
		      m_sRefineCommand = m_sRefineCommand + " +CrysLengths";
		      m_tDtrefineOptions.a15bCrystal[11] = TRUE;
		      m_tDtrefineOptions.a15bCrystal[0]  = TRUE;
		      m_tDtrefineOptions.a15bCrystal[1]  = TRUE;
		      m_tDtrefineOptions.a15bCrystal[2]  = TRUE;
		    }
		  else
		    {
		      m_tDtrefineOptions.a15bCrystal[11] = FALSE;
		      m_tDtrefineOptions.a15bCrystal[0] 
			= XmToggleButtonGetState(_tbRefineCrystalAstar);
		      if (m_tDtrefineOptions.a15bCrystal[0])
			m_sRefineCommand = m_sRefineCommand + " +CrysAstar";
		      m_tDtrefineOptions.a15bCrystal[1] 
			= XmToggleButtonGetState(_tbRefineCrystalBstar);
		      if (m_tDtrefineOptions.a15bCrystal[1])
			m_sRefineCommand = m_sRefineCommand + " +CrysBstar";
		      m_tDtrefineOptions.a15bCrystal[2] 
			= XmToggleButtonGetState(_tbRefineCrystalCstar);
		      if (m_tDtrefineOptions.a15bCrystal[2])
			m_sRefineCommand = m_sRefineCommand + " +CrysCstar";
		    }
		}
	      if (XmToggleButtonGetState(_tbRefineCrystalRots))
		{
		  m_sRefineCommand = m_sRefineCommand + " +CrysRot";
		  m_tDtrefineOptions.a15bCrystal[10] = TRUE;
		  m_tDtrefineOptions.a15bCrystal[6]  = TRUE;
		  m_tDtrefineOptions.a15bCrystal[7]  = TRUE;
		  m_tDtrefineOptions.a15bCrystal[8]  = TRUE;
		}
	      else 
		{
		  m_tDtrefineOptions.a15bCrystal[10] = FALSE;
		  m_tDtrefineOptions.a15bCrystal[6] 
		    = XmToggleButtonGetState(_tbRefineCrystalRot1);
		  if (m_tDtrefineOptions.a15bCrystal[6])
		    m_sRefineCommand = m_sRefineCommand + " +CrysRot1";
		  
		  m_tDtrefineOptions.a15bCrystal[7] 
		    = XmToggleButtonGetState(_tbRefineCrystalRot2);
		  if (m_tDtrefineOptions.a15bCrystal[7])
		    m_sRefineCommand = m_sRefineCommand + " +CrysRot2";
		  
		  m_tDtrefineOptions.a15bCrystal[8]
		    = XmToggleButtonGetState(_tbRefineCrystalRot3);
		  if (m_tDtrefineOptions.a15bCrystal[8])
		    m_sRefineCommand = m_sRefineCommand + " +CrysRot3";
		}
	  
	      m_tDtrefineOptions.a15bCrystal[9]
		= XmToggleButtonGetState(_tbRefineCrystalMosaicity);
	      if (m_tDtrefineOptions.a15bCrystal[9])
		m_sRefineCommand = m_sRefineCommand + " +CrysMosaicity";
	    }
      
	  if (XmToggleButtonGetState(_tbRefineDetAll))
	    {
	      m_sRefineCommand = m_sRefineCommand + " +DetAll";
	      m_tDtrefineOptions.a9bDetector[0] = TRUE;
	      m_tDtrefineOptions.a9bDetector[1] = TRUE;
	      m_tDtrefineOptions.a9bDetector[2] = TRUE;
	      m_tDtrefineOptions.a9bDetector[3] = TRUE;
	      m_tDtrefineOptions.a9bDetector[4] = TRUE;
	      m_tDtrefineOptions.a9bDetector[5] = TRUE;
	      m_tDtrefineOptions.a9bDetector[6] = TRUE;
	      m_tDtrefineOptions.a9bDetector[7] = TRUE;
	      m_tDtrefineOptions.a9bDetector[8] = TRUE;
	    }
	  else
	    {
	      m_tDtrefineOptions.a9bDetector[8] = FALSE;
	      if (XmToggleButtonGetState(_tbRefineDetTrans))
		{
		  m_sRefineCommand = m_sRefineCommand + " +DetTrans";
		  m_tDtrefineOptions.a9bDetector[6] = TRUE;
		  m_tDtrefineOptions.a9bDetector[0] = TRUE;
		  m_tDtrefineOptions.a9bDetector[1] = TRUE;
		  m_tDtrefineOptions.a9bDetector[2] = TRUE;
		}
	      else
		{
		  m_tDtrefineOptions.a9bDetector[6] = FALSE;
		  m_tDtrefineOptions.a9bDetector[0] 
		    = XmToggleButtonGetState(_tbRefineDetTrans1);
		  if (m_tDtrefineOptions.a9bDetector[0])
		    m_sRefineCommand = m_sRefineCommand + " +DetTrans1";
		  m_tDtrefineOptions.a9bDetector[1] 
		    = XmToggleButtonGetState(_tbRefineDetTrans2);
		  if (m_tDtrefineOptions.a9bDetector[1])
		    m_sRefineCommand = m_sRefineCommand + " +DetTrans2";
		  m_tDtrefineOptions.a9bDetector[2] 
		    = XmToggleButtonGetState(_tbRefineDetTrans3);
		  if (m_tDtrefineOptions.a9bDetector[2])
		    m_sRefineCommand = m_sRefineCommand + " +DetTrans3";
		}
	      if (XmToggleButtonGetState(_tbRefineDetRots))
		{
		  m_sRefineCommand = m_sRefineCommand + " +DetRot";
		  m_tDtrefineOptions.a9bDetector[7] = TRUE;
		  m_tDtrefineOptions.a9bDetector[3] = TRUE;
		  m_tDtrefineOptions.a9bDetector[4] = TRUE;
		  m_tDtrefineOptions.a9bDetector[5] = TRUE;
		}
	      else
		{
		  m_tDtrefineOptions.a9bDetector[7] = FALSE;
		  m_tDtrefineOptions.a9bDetector[3] 
		    = XmToggleButtonGetState(_tbRefineDetRot1);
		  if (m_tDtrefineOptions.a9bDetector[3])
		    m_sRefineCommand = m_sRefineCommand + " +DetRot1";
		  m_tDtrefineOptions.a9bDetector[4] 
		    = XmToggleButtonGetState(_tbRefineDetRot2);
		  if (m_tDtrefineOptions.a9bDetector[4])
		    m_sRefineCommand = m_sRefineCommand + " +DetRot2";
		  m_tDtrefineOptions.a9bDetector[5] 
		    = XmToggleButtonGetState(_tbRefineDetRot3);
		  if (m_tDtrefineOptions.a9bDetector[5])
		    m_sRefineCommand = m_sRefineCommand + " +DetRot3";
		}
	    }
	  if (XmToggleButtonGetState(_tbRefineSourceRots))
	    {
	      m_sRefineCommand = m_sRefineCommand + " +SourceRot";
	      m_tDtrefineOptions.a4bSource[2] = TRUE; 
	      m_tDtrefineOptions.a4bSource[0] = TRUE; 
	      m_tDtrefineOptions.a4bSource[1] = TRUE; 
	    }
	  else
	    {
	      m_tDtrefineOptions.a4bSource[2] = FALSE; 
	      m_tDtrefineOptions.a4bSource[0] 
		= XmToggleButtonGetState(_tbRefineSourceRot1);
	      if (m_tDtrefineOptions.a4bSource[0])
		m_sRefineCommand = m_sRefineCommand + " +SourceRot1";
	      m_tDtrefineOptions.a4bSource[1] 
		= XmToggleButtonGetState(_tbRefineSourceRot2);
	      if (m_tDtrefineOptions.a4bSource[1])
		m_sRefineCommand = m_sRefineCommand + " +SourceRot2";
	    }
	  m_tDtrefineOptions.a4bSource[3] 
	    = XmToggleButtonGetState(_tbRefineSourceWavelength);
	  if (m_tDtrefineOptions.a4bSource[3])
	    {
	      m_sRefineCommand = m_sRefineCommand + " +SourceWave";
	    }
	}

      pcTemp = XmTextFieldGetString(_tfRefineSigma);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.sSigma = pcTemp;
	  if (0.0 < dTemp)
	    {
	      m_sRefineCommand = m_sRefineCommand + " -sigma "
		+ m_tDtrefineOptions.sSigma;
	    }
	}
      XtFree(pcTemp);
  
      pcTemp = XmTextFieldGetString(_tfRefineResolution1);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.sReso1 = pcTemp;
	}
      XtFree(pcTemp);
      
      pcTemp = XmTextFieldGetString(_tfRefineResolution2);
      nStat = sscanf(pcTemp, "%lf", &dTemp1);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.sReso2 = pcTemp;
	}
      XtFree(pcTemp);
      if (w != _tfRefineResolution1)
	vSetResoOther(_tfRefineResolution2, _tfRefineResolution1, 
		Cstring("999.0"),
		&m_tDtrefineOptions.sReso1);
      
      if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
	{
	  m_sRefineCommand = m_sRefineCommand + " -reso " 
	                             + m_tDtrefineOptions.sReso1 + ' ' 
                                     + m_tDtrefineOptions.sReso2;
	}

      pcTemp = XmTextFieldGetString(_tfRefineReject1);
      nStat = sscanf(pcTemp, "%lf", &dTemp1);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.a3sReject[0] = pcTemp;
	}
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfRefineReject2);
      nStat = sscanf(pcTemp, "%lf", &dTemp1);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.a3sReject[1] = pcTemp;
	}
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfRefineReject3);
      nStat = sscanf(pcTemp, "%lf", &dTemp1);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.a3sReject[2] = pcTemp;
	}
      XtFree(pcTemp);
  
      m_sRefineCommand = m_sRefineCommand + " -rej " 
	                 + m_tDtrefineOptions.a3sReject[0]  + ' ' 
                         + m_tDtrefineOptions.a3sReject[1]  + ' ' 
		         + m_tDtrefineOptions.a3sReject[2];
 
      pcTemp = XmTextFieldGetString(_tfRefineCycles);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.sCycles = pcTemp;
	}
      XtFree(pcTemp);
      m_sRefineCommand = m_sRefineCommand + " -cycles "  
                         + m_tDtrefineOptions.sCycles;

      pcTemp = XmTextFieldGetString(_tfRefineRelWeight);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	{
	  m_tDtrefineOptions.sRelWeight = pcTemp;
	}
      XtFree(pcTemp);

      //      m_sRefineCommand = m_sRefineCommand + " -weight "
      //	                 + m_tDtrefineOptions.sRelWeight;
    }
  else if (DTP_MAX_REFINE_MACROS > m_nRefineMacro)
    {
      // Convert all newlines to spaces

      sTemp = m_tDtrefineOptions.sRefineMacro[m_nRefineMacro];
      sTemp = sTemp.before("-name ");
      for (i = 0; i < sTemp.length(); i++)
	if ('\n' == sTemp.GetAt(i)) sTemp.SetAt(i, ' ');

      m_sRefineCommand = m_sRefineCommand + ' ' + sTemp;
    }

  if (50 >= atoi(m_tDtrefineOptions.sCycles))
    {
      m_sRefineCommand = m_sRefineCommand + " -verbose 0 -go -go -go -go -verbose 1";
    }

  m_tDtrefineOptions.bDisplay
    = XmToggleButtonGetState(_tbRefineDisplay);
  if (m_tDtrefineOptions.bDisplay)
    m_sRefineCommand = m_sRefineCommand + " -display";

  m_tDtrefineOptions.bPrompt
    = XmToggleButtonGetState(_tbRefinePrompt);
  if (m_tDtrefineOptions.bPrompt)
    m_sRefineCommand = m_sRefineCommand + " -prompt";

  sTemp = sGetEnv("DTP_REFINE_EXTRA");
  if ("" != sTemp)
    m_sRefineCommand = m_sRefineCommand + ' ' + sTemp;
  
  if (!m_sRefineCommand.contains("-testmosaicity"))
    m_sRefineCommand = m_sRefineCommand + " -go";
  
  XmTextFieldSetString(_tfCommand, m_sRefineCommand.string());


  if (w == _pbRefineRun)
    {
      // Run the command in m_sRefineCommand

      m_bFCDialogRun = TRUE;
      if (m_tDtrefineOptions.bPrompt)
	vCommandExecute(m_sRefineCommand, 1);
      else
	vCommandExecute(m_sRefineCommand);

      // Turn off -testmosaicity if it was on for the command and in automode

      if (m_sRefineCommand.contains("-testmosaicity"))
	XmToggleButtonSetState(_tbRefineTestMosaicity, False, False);
    }
  nsFirstTime = 1;

    // End user code block <vRefineCB>
}

void MainWindow::vRefineTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vRefineTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vRefineTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vRefineTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vRefineCB(w, NULL, NULL);
    // End user code block <vRefineTextFieldCB>
}

void MainWindow::vIndexCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vIndexCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vIndexCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vIndexCB>

  int   nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;

  m_sIndexCommand = sTransSymbol("$(dtindex)") + ' ' + m_sHeaderName 
                                               + ' ' + m_sReflnlistName;

  // Read the index dialog widgets and construct command to run

  m_tDtindexOptions.bAdvanced = XmToggleButtonGetState(_tbIndexAdvanced);

  if (w == _tbIndexAdvanced)
    {
      if (m_tDtindexOptions.bAdvanced)
	{
	  XtManageChild(_lbIndexMethod);
	  XtManageChild(_omIndexMethod->baseWidget());
	  XtManageChild(_tbIndexList);
	  XtManageChild(_tbIndexDiffs);
	  XtManageChild(_lbIndexMaxDiffs);
	  XtManageChild(_lbIndexGrid);
	  XtManageChild(_tbIndexKnown);
	  XtManageChild(_tfIndexGrid);
	  XtManageChild(_tfIndexMaxDiffs);
	}
      else
	{
	  XtUnmanageChild(_lbIndexMethod);
	  XtUnmanageChild(_omIndexMethod->baseWidget());
	  XtUnmanageChild(_tbIndexList);
	  XtUnmanageChild(_tbIndexDiffs);
	  XtUnmanageChild(_lbIndexMaxDiffs);
	  XtUnmanageChild(_lbIndexGrid);
	  XtUnmanageChild(_tbIndexKnown);
	  XtUnmanageChild(_tfIndexGrid);
	  XtUnmanageChild(_tfIndexMaxDiffs);
	  if (XtIsManaged(_lbIndexErrorLength))
	    {
	      XtUnmanageChild(_lbIndexErrorLength);
	      XtUnmanageChild(_tfIndexErrorLength1);
	      XtUnmanageChild(_tfIndexErrorLength2);
	      XtUnmanageChild(_tfIndexErrorLength3);
	      XtUnmanageChild(_lbIndexErrorAngle);
	      XtUnmanageChild(_tfIndexErrorAngle1);
	      XtUnmanageChild(_tfIndexErrorAngle2);
	      XtUnmanageChild(_tfIndexErrorAngle3);
	    }
	}
    }

  pcTemp = XmTextFieldGetString(_tfIndexSpacegroup);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sSpacegroup = pcTemp;
      if (0 < nTemp)
	{
	  m_sIndexCommand = m_sIndexCommand + " -spacegroup "
	                    + m_tDtindexOptions.sSpacegroup;
	}
    }
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexMaxCell);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sMaxCell = pcTemp;
      if (0.0 < dTemp)
	{
	  m_sIndexCommand = m_sIndexCommand + " -maxcell "
	                    + m_tDtindexOptions.sMaxCell;
	}
    }
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexMaxResid);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sMaxResid = pcTemp;
      if (0.0 < dTemp)
	{
	  m_sIndexCommand = m_sIndexCommand + " -maxresid "
	                    + m_tDtindexOptions.sMaxResid;
	}
    }

  pcTemp = XmTextFieldGetString(_tfIndexSigma);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sSigma = pcTemp;
      if (0.0 < dTemp)
	{
	  m_sIndexCommand = m_sIndexCommand + " -sigma "
	                    + m_tDtindexOptions.sSigma;
	}
    }
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  double dTemp1;
  pcTemp = XmTextFieldGetString(_tfIndexResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtindexOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  if (w != _tfIndexResolution1)
    vSetResoOther(_tfIndexResolution2, _tfIndexResolution1, 
		Cstring("999.0"),
		&m_tDtindexOptions.sReso1);

  if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
    {
      m_sIndexCommand = m_sIndexCommand + " -reso " 
                       + m_tDtindexOptions.sReso1 + ' ' 
                       + m_tDtindexOptions.sReso2;
    }

  m_tDtindexOptions.bPrompt = XmToggleButtonGetState(_tbIndexPrompt);
  if (m_tDtindexOptions.bPrompt)
    {
      m_sIndexCommand = m_sIndexCommand + " -prompt";
    }

  m_tDtindexOptions.bList    = XmToggleButtonGetState(_tbIndexList);
  m_tDtindexOptions.bDiffs = XmToggleButtonGetState(_tbIndexDiffs);
  m_tDtindexOptions.bKnown   = XmToggleButtonGetState(_tbIndexKnown);

  pcTemp = XmTextFieldGetString(_tfIndexErrorLength1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[0] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexErrorLength2);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[1] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexErrorLength3);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[2] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexErrorAngle1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[3] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexErrorAngle2);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[4] = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfIndexErrorAngle3);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtindexOptions.a6sErrors[5] = pcTemp;
  XtFree(pcTemp);
  
  Cstring sAdvanced = "";

  m_nIndexMethod = _omIndexMethod->nGetValue();
  m_tDtindexOptions.sMethod = (Cstring)m_nIndexMethod;
  if (0 == m_nIndexMethod)
    {
      sAdvanced = " -fourier";
    }
  else if (1 == m_nIndexMethod)
    {
      sAdvanced = " -dps";
    }
  else if (2 == m_nIndexMethod)
    {
      sAdvanced = " -nofourier";
    }
      
  pcTemp = XmTextFieldGetString(_tfIndexMaxDiffs);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sMaxDiffs = pcTemp;
      if (0 < nTemp)
	{
	  sAdvanced = sAdvanced + " -num "
	                        + m_tDtindexOptions.sMaxDiffs;
	}
    }
  XtFree(pcTemp);

  if (m_tDtindexOptions.bDiffs)
    {
      sAdvanced = sAdvanced + " -diffs";
    }
  else
    {
      sAdvanced = sAdvanced + " -nodiffs";
    }

  pcTemp = XmTextFieldGetString(_tfIndexGrid);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtindexOptions.sGrid = pcTemp;
      if (0.0 < dTemp)
	{
	  sAdvanced = sAdvanced + " -grid "
		                + m_tDtindexOptions.sGrid;
	}
    }
  XtFree(pcTemp);

  if (m_tDtindexOptions.bList)
    {
      sAdvanced = sAdvanced + " -list";
      sAdvanced = sAdvanced + " -nobeamcheck";
    }
  if (m_tDtindexOptions.bKnown)
    {
      sAdvanced = sAdvanced + " -known";
      if (m_tDtindexOptions.bAdvanced)
	{
	  XtManageChild(_lbIndexErrorLength);
	  XtManageChild(_tfIndexErrorLength1);
	  XtManageChild(_tfIndexErrorLength2);
	  XtManageChild(_tfIndexErrorLength3);
	  XtManageChild(_lbIndexErrorAngle);
	  XtManageChild(_tfIndexErrorAngle1);
	  XtManageChild(_tfIndexErrorAngle2);
	  XtManageChild(_tfIndexErrorAngle3);
	}
      sAdvanced = sAdvanced + " -errors " 
	                    + m_tDtindexOptions.a6sErrors[0] + ' ' 
                            + m_tDtindexOptions.a6sErrors[1] + ' ' 
                            + m_tDtindexOptions.a6sErrors[2] + ' ' 
                            + m_tDtindexOptions.a6sErrors[3] + ' ' 
                            + m_tDtindexOptions.a6sErrors[4] + ' ' 
                            + m_tDtindexOptions.a6sErrors[5];
    }
  else
    {
      XtUnmanageChild(_lbIndexErrorLength);
      XtUnmanageChild(_tfIndexErrorLength1);
      XtUnmanageChild(_tfIndexErrorLength2);
      XtUnmanageChild(_tfIndexErrorLength3);
      XtUnmanageChild(_lbIndexErrorAngle);
      XtUnmanageChild(_tfIndexErrorAngle1);
      XtUnmanageChild(_tfIndexErrorAngle2);
      XtUnmanageChild(_tfIndexErrorAngle3);
    }

  if (m_tDtindexOptions.bAdvanced)
    {
      m_sIndexCommand += sAdvanced;
    }

  XmTextFieldSetString(_tfCommand, m_sIndexCommand.string());

  if (w == _pbIndexRun)
    {
      // Run the command in m_sIndexCommand

      m_bFCDialogRun = TRUE;
      if (m_tDtindexOptions.bPrompt)
	vCommandExecute(m_sIndexCommand, 1);
      else
	vCommandExecute(m_sIndexCommand);
    }

    // End user code block <vIndexCB>
}

void MainWindow::vIndexTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vIndexTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vIndexTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vIndexTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vIndexCB(w, NULL, NULL);
    // End user code block <vIndexTextFieldCB>
}

void MainWindow::vFindTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vFindTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vFindTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFindTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vFindCB(w, NULL, NULL);

    // End user code block <vFindTextFieldCB>
}

void MainWindow::vFindCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vFindCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vFindCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFindCB>

  int   nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;
  static int nsFirstTime = 0;

  m_sFindCommand = sTransSymbol("$(dtfind)") + ' ' + m_sHeaderName;

  // Read the find dialog widgets and construct command to run

  if (w == _cslImages->baseWidget())
    {
      int *pnNumItem;
      pnNumItem = (int *)  clientData;
      Cstring *psItems;
      psItems = (Cstring *) callData;

      // Determine if any of the images are non-contiguous 
      // and set up appropriate -seq

      Crotation      oRotationPrev;
      Cimage_header *poHeader;
      Crotation     *poRotation;
      int nTemp;
      int nSaveVerbose;

      m_tDtfindOptions.sSeqOptions = "";
      m_poXcursor->vSetWait();
      nSaveVerbose = Cimage_header::nGetVerbose();
      poHeader   = new Cimage_header (m_sImageDir + psItems[0]);
      Cimage_header::vSetVerbose(0);
      if (!poHeader->bIsAvailable())
	{
	  Cimage_header::vSetVerbose(nSaveVerbose);
	  delete poHeader;
	  m_poXcursor->vRestore();
	  return;
	}
      poRotation = new Crotation (*poHeader);
      delete poHeader;
      if (!poRotation->bIsAvailable())
	{
	  delete poRotation;
	  poRotation = new Crotation(m_poScan, 
				     m_poScan->nGetSeqNum(psItems[0]));
	}
      nTemp = m_poScan->nGetSeqNum(psItems[0]);
      if (-9999 < nTemp)
	m_a2nSeqNum[0] = nTemp;
      m_tDtfindOptions.a2sSeqNum[0] = (Cstring) m_a2nSeqNum[0];
      m_a2nSeqNum[1]   = m_a2nSeqNum[0];
      m_tDtfindOptions.a2sSeqNum[1] = (Cstring) m_a2nSeqNum[1];

      oRotationPrev = *poRotation;
      int i;
      for (i = 1; i < *pnNumItem; i++)
	{
//	  cout << "Image file #" << i << ": " << psItems[i] << endl;
	  poHeader   = new Cimage_header (m_sImageDir + psItems[i]);
	  if (!poHeader->bIsAvailable())
	    {
	      Cimage_header::vSetVerbose(nSaveVerbose);
	      delete poHeader;
	      return;
	    }
	  delete poRotation;
	  poRotation = new Crotation (*poHeader);
	  delete poHeader;
	  if (!poRotation->bIsAvailable())
	    {
	      delete poRotation;
	      poRotation = new Crotation(m_poScan, 
					 m_poScan->nGetSeqNum(psItems[i]));
	    }

	  if (0.0001 > ABS(poRotation->fGetRotStart() - oRotationPrev.fGetRotEnd()))
	    {
	      nTemp = m_poScan->nGetSeqNum(psItems[i]);
//	      cout << "End for " << psItems[i] << " is " << nTemp << endl;
	      if (-9999 < nTemp)
		m_a2nSeqNum[1] = nTemp;
	    }
	  else
	    {
	      // Non-contiguous sequence info so ...
	      
	      m_tDtfindOptions.sSeqOptions += " -seq "
                                             + (Cstring) m_a2nSeqNum[0] + ' '
			                     + (Cstring) m_a2nSeqNum[1];
	      nTemp = m_poScan->nGetSeqNum(psItems[i]);
//	      cout << "Start for " << psItems[i] << " is " << nTemp << endl;
	      if (-9999 < nTemp)
		m_a2nSeqNum[0] = nTemp;
	      m_a2nSeqNum[1]   = m_a2nSeqNum[0];
	    }
	  oRotationPrev = *poRotation;
	}
      delete poRotation;
      m_tDtfindOptions.sSeqOptions += " -seq "
	                              + (Cstring) m_a2nSeqNum[0] + ' '
			              + (Cstring) m_a2nSeqNum[1];
      m_poXcursor->vRestore();
      m_tDtfindOptions.a2sSeqNum[1] = (Cstring) m_a2nSeqNum[1];
      Cimage_header::vSetVerbose(nSaveVerbose);
    }
  else if (   (w == _tfFindSeqStart) || (w == _tfFindSeqEnd)
	   || ("" == m_tDtfindOptions.sSeqOptions) )
    {
      int nSeqStart, nSeqEnd;
      m_tDtfindOptions.sSeqOptions = "";
      pcTemp = XmTextFieldGetString(_tfFindSeqStart);
      nStat = sscanf(pcTemp, "%d", &nSeqStart);
      if (1 == nStat)
	m_tDtfindOptions.a2sSeqNum[0] = pcTemp;
      XtFree(pcTemp);
  
      pcTemp = XmTextFieldGetString(_tfFindSeqEnd);
      nStat = sscanf(pcTemp, "%d", &nSeqEnd);
      if (1 == nStat)
	m_tDtfindOptions.a2sSeqNum[1] = pcTemp;
      XtFree(pcTemp);
//+2011-07-19 JWP
      if (0 <= nSeqEnd)
	{
	  m_tDtfindOptions.sSeqOptions += " -seq "
	                              + m_tDtfindOptions.a2sSeqNum[0] + ' '
			              + m_tDtfindOptions.a2sSeqNum[1];
	}
      else
	{
	  // New option if the value of a2sSeqNum[1] is negative
	  // The idea is to replace '-seq ...' with multiple '-seq ... -seq ... '
	  // where 8 images are selected relatively evenly spaced from SeqNum[0] to SeqNum[1]

	  nSeqEnd = -nSeqEnd;
	  //	  m_tDtfindOptions.sSeqOptions += " -seq " 
	  //                          + m_tDtfindOptions.a2sSeqNum[0] + ' '
	  //                          + m_tDtfindOptions.a2sSeqNum[0];

	  nTemp = ( (nSeqEnd - nSeqStart)+1) / 7;
	  if (1 > nTemp) nTemp = 1;
	  int i;
	  for (i = nSeqStart; i < nSeqEnd-nTemp; i += nTemp)  
	    {
		 m_tDtfindOptions.sSeqOptions += " -seq " 
		 + Cstring(i) + ' ' + Cstring(i);
	    }
	  m_tDtfindOptions.sSeqOptions += " -seq " 
	    + Cstring(nSeqEnd) + ' ' + Cstring(nSeqEnd);
	}
//-2011-07-19 JWP
    }
  if ( (_tbFindMore == w) ||   (0 == nsFirstTime) )
    {
      m_tDtfindOptions.bShowMore = XmToggleButtonGetState(w);
      if (m_tDtfindOptions.bShowMore)
	{
	  XtManageChild(_lbFindDump);
	  XtManageChild(_lbFindCircle);
	  XtManageChild(_lbFindRect);
	  XtManageChild(_lbFindBackRect);
	  XtManageChild(_tfFindRect1);
	  XtManageChild(_tfFindRect2);
	  XtManageChild(_tfFindRect3);
	  XtManageChild(_tfFindRect4);
	  XtManageChild(_tfFindCircle1);
	  XtManageChild(_tfFindCircle2);
	  XtManageChild(_tfFindCircle3);
	  XtManageChild(_tfFindCircle4);
	  XtManageChild(_tfFindBackRect1);
	  XtManageChild(_tfFindBackRect2);
	  XtManageChild(_tfFindDump);
	  XtManageChild(_tbFind3D);
	}
      else
	{
	  XtUnmanageChild(_lbFindDump);
	  XtUnmanageChild(_lbFindCircle);
	  XtUnmanageChild(_lbFindRect);
	  XtUnmanageChild(_lbFindBackRect);
	  XtUnmanageChild(_tfFindRect1);
	  XtUnmanageChild(_tfFindRect2);
	  XtUnmanageChild(_tfFindRect3);
	  XtUnmanageChild(_tfFindRect4);
	  XtUnmanageChild(_tfFindCircle1);
	  XtUnmanageChild(_tfFindCircle2);
	  XtUnmanageChild(_tfFindCircle3);
	  XtUnmanageChild(_tfFindCircle4);
	  XtUnmanageChild(_tfFindBackRect1);
	  XtUnmanageChild(_tfFindBackRect2);
	  XtUnmanageChild(_tfFindDump);
	  XtUnmanageChild(_tbFind3D);
	}
    }

  m_sFindCommand = m_sFindCommand + m_tDtfindOptions.sSeqOptions;

  pcTemp = XmTextFieldGetString(_tfFindSigma);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtfindOptions.sSigma = pcTemp;
  XtFree(pcTemp);
  
  m_sFindCommand = m_sFindCommand + " -sigma " + m_tDtfindOptions.sSigma;

  pcTemp = XmTextFieldGetString(_tfFindMin);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtfindOptions.sMinimum = pcTemp;
  XtFree(pcTemp);
  
  m_sFindCommand = m_sFindCommand + " -min " + m_tDtfindOptions.sMinimum;

  pcTemp = XmTextFieldGetString(_tfFindResolution1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtfindOptions.sReso1 = pcTemp;
    }
  XtFree(pcTemp);
  
  double dTemp1;
  pcTemp = XmTextFieldGetString(_tfFindResolution2);
  nStat = sscanf(pcTemp, "%lf", &dTemp1);
  if (1 == nStat)
    {
      m_tDtfindOptions.sReso2 = pcTemp;
    }
  XtFree(pcTemp);
  if (w != _tfFindResolution1)
    vSetResoOther(_tfFindResolution2, _tfFindResolution1, 
		  Cstring("999.0"),
		  &m_tDtfindOptions.sReso1);

  if ( (dTemp != dTemp1) && (0.0 < dTemp) && (0.0 < dTemp1) )
    {
      m_sFindCommand = m_sFindCommand + " -reso " 
                       + m_tDtfindOptions.sReso1 + ' ' 
                       + m_tDtfindOptions.sReso2;
    }

  pcTemp = XmTextFieldGetString(_tfFindFilter);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.sPeakFilter = pcTemp;
  XtFree(pcTemp);
  
  m_sFindCommand = m_sFindCommand  + " -filter " + m_tDtfindOptions.sPeakFilter;

  pcTemp = XmTextFieldGetString(_tfFindWindow1);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.a2sWindow[0] = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfFindWindow2);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.a2sWindow[1] = pcTemp;
  XtFree(pcTemp);
  
  
  m_sFindCommand = m_sFindCommand  + " -window "
                   + m_tDtfindOptions.a2sWindow[0] + ' '
                   + m_tDtfindOptions.a2sWindow[1];

/**** -pad is obsolete
  pcTemp = XmTextFieldGetString(_tfFindPadding);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.sPad3D = pcTemp;
  XtFree(pcTemp);
  
  m_sFindCommand = m_sFindCommand  + " -pad " + m_tDtfindOptions.sPad3D;
*****/

  pcTemp = XmTextFieldGetString(_tfFindBackRect1);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.a2sBackRect[0] = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfFindBackRect2);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtfindOptions.a2sBackRect[1] = pcTemp;
  XtFree(pcTemp);

  Cstring sZero;
  sZero = "0";
  
  int nLen = m_sFindCommand.length();
  if ( (m_tDtfindOptions.bShowMore) || (0 == nsFirstTime) )
    {
      nsFirstTime = 1;

      m_tDtfindOptions.b3Dsearch = XmToggleButtonGetState(_tbFind3D);
      if (m_tDtfindOptions.b3Dsearch)
	{
	  m_sFindCommand = m_sFindCommand + " -3D";
	}
      
      if (   (sZero != m_tDtfindOptions.a2sBackRect[0])
	  && (sZero != m_tDtfindOptions.a2sBackRect[1]) )
	m_sFindCommand = m_sFindCommand + " -brect " 
                     + m_tDtfindOptions.a2sBackRect[0] + ' ' 
                     + m_tDtfindOptions.a2sBackRect[1];

      pcTemp = XmTextFieldGetString(_tfFindCircle1);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sCircle[0] = pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfFindCircle2);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sCircle[1] = pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfFindCircle3);
      nStat = sscanf(pcTemp, "%lf", &dTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sCircle[2] = pcTemp;
      XtFree(pcTemp);

      double dTemp1;
      pcTemp = XmTextFieldGetString(_tfFindCircle4);
      nStat = sscanf(pcTemp, "%lf", &dTemp1);
      if (1 == nStat)
	m_tDtfindOptions.a4sCircle[3] = pcTemp;
      XtFree(pcTemp);

      if (dTemp < dTemp1)
	m_sFindCommand = m_sFindCommand + " -circle " 
                        + m_tDtfindOptions.a4sCircle[0] + ' ' 
                        + m_tDtfindOptions.a4sCircle[1] + ' ' 
                        + m_tDtfindOptions.a4sCircle[2] + ' ' 
                        + m_tDtfindOptions.a4sCircle[3];

      pcTemp = XmTextFieldGetString(_tfFindRect1);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sRect[0] = pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfFindRect2);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sRect[1] = pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfFindRect3);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sRect[2] = pcTemp;
      XtFree(pcTemp);

      pcTemp = XmTextFieldGetString(_tfFindRect4);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_tDtfindOptions.a4sRect[3] = pcTemp;
      XtFree(pcTemp);

      if (   (sZero != m_tDtfindOptions.a4sRect[0])
	  && (sZero != m_tDtfindOptions.a4sRect[1])
	  && (sZero != m_tDtfindOptions.a4sRect[2])
	  && (sZero != m_tDtfindOptions.a4sRect[3]) )
	m_sFindCommand = m_sFindCommand + " -rect " 
                        + m_tDtfindOptions.a4sRect[0] + ' ' 
                        + m_tDtfindOptions.a4sRect[1] + ' ' 
                        + m_tDtfindOptions.a4sRect[2] + ' ' 
                        + m_tDtfindOptions.a4sRect[3];

      pcTemp = XmTextFieldGetString(_tfFindDump);
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_tDtfindOptions.sDumpRefln = pcTemp;
      XtFree(pcTemp);

      if (0 < nTemp)
	m_sFindCommand = m_sFindCommand + " -dump " + m_tDtfindOptions.sDumpRefln;
      if (!m_tDtfindOptions.bShowMore)
	{
	  // Got here because nsFirstTime=0,
	  // so remove commands from m_sFindCommand

	  m_sFindCommand = m_sFindCommand.before(nLen);
	}
    }

  m_tDtfindOptions.bDisplay = XmToggleButtonGetState(_tbFindDisplay);
  if (m_tDtfindOptions.bDisplay)
    {
      m_sFindCommand = m_sFindCommand + " -display";
    }
  
  // Always add the -out option

  m_sFindCommand += " -out " + sDtrekGetPrefix() + "dtfind.head";
  XmTextFieldSetString(_tfCommand, m_sFindCommand.string());

  if (w == _pbFindRun)
    {
      // Run the command in m_sFindCommand

      m_bFCDialogRun = TRUE;
      vCommandExecute(m_sFindCommand);
    }
    // End user code block <vFindCB>
}

void MainWindow::vCalibrateCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vCalibrateCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vCalibrateCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vCalibrateCB>
  int   nStat;
  double dTemp;
  int    nTemp;
  char *pcTemp;
  Cstring sTemp;      
  float   fDetDist, fDetTheta;

  if (   (w == _pbCalibrateTemplate)
      || (w == _pbCalibrateSpatialInterp)
      || (w == _pbCalibrateNonunfNonunf)
      || (w == _pbCalibrateNonunfDark) )
    {
      vPopDialog(w, clientData, callData);
      return;
    }

  if (w == _tfCalibratedTREKPrefix)
    {
      // (un)setenv DTREK_PREFIX immediately (don't wait for _pbCalibrateRun)

      pcTemp = XmTextFieldGetString(_tfCalibratedTREKPrefix);
      sTemp = Cstring(pcTemp);
      XtFree(pcTemp);
      
      Cstring sBase, sBase1;

      pcTemp = XmTextFieldGetString(_tfMergeMergeFile);
      sBase = Cstring(pcTemp);
      XtFree(pcTemp);
      sBase = sFileGetBasename(sBase);
      sBase1 = sBase;
      nTemp = sBase.find(sDtrekGetPrefix());
      if (0 == nTemp)
	{
	  // Found old prefix at beginning of m_sMergeMergeName so strip it off
	  sBase = sBase.after(sDtrekGetPrefix());
	}
      sBase  = sTemp + sBase;
      if (sBase != sBase1)
	{
	  XmTextFieldSetString(_tfMergeMergeFile, sBase.string());
	  vPutMessage("INFO: setting Merge menu Merged ref file to "
                      + sBase);
	  vMergeCB(_tfMergeMergeFile, NULL, NULL);	  
	}
	  
      pcTemp = XmTextFieldGetString(_tfScaleUnAvg);
      sBase = Cstring(pcTemp);
      XtFree(pcTemp);
      sBase = sFileGetBasename(sBase);
      sBase1 = sBase;
      nTemp = sBase.find(sDtrekGetPrefix());
      if (0 == nTemp)
	{
	  // Found old prefix at beginning of m_sScaleMergeUnavgName
	  sBase = sBase.after(sDtrekGetPrefix());
	}
      sBase = sTemp + sBase;
      //      cout << ">>new>>" << sTemp << "<<<\n";

      if (sBase != sBase1)
	{
	  //      cout << "Not equal>>>>" << sBase << "<<<<>>>>" << sBase1 << "<<<<<\n";
	  XmTextFieldSetString(_tfScaleUnAvg, sBase.string());
	  vPutMessage("INFO: setting Scale/Average menu scaled/unaverage ref file to "
                      + sBase);
	  vScaleCB(_tfScaleUnAvg, NULL, NULL);	  
	}
      else
	{
	  //      cout << "YES equal>>>>" << sBase << "<<<<>>>>" << sBase1 << "<<<<<\n";
	}

      pcTemp = XmTextFieldGetString(_tfScaleMergeFile);
      sBase = Cstring(pcTemp);
      XtFree(pcTemp);
      sBase = sFileGetBasename(sBase);
      sBase1 = sBase;
      nTemp = sBase.find(sDtrekGetPrefix());
      if (0 == nTemp)
	{
	  // Found old prefix at beginning of m_sScaleMergeName so strip it off
	  sBase = sBase.after(sDtrekGetPrefix());
	}
      sBase  = sTemp + sBase;
      if (sBase != sBase1)
	{
	  XmTextFieldSetString(_tfScaleMergeFile, sBase.string());
	  vPutMessage("INFO: setting Scale/Average menu scaled/averaged ref file to "
                      + sBase);
	  vScaleCB(_tfScaleMergeFile, NULL, NULL);	  
	}
	  
      // If sTemp is blanks, then make it null.
      nStat = nPutEnv("DTREK_PREFIX", sTemp);
    }
  sTemp = sDtrekGetPrefix();
  XmTextFieldSetString(_tfCalibratedTREKPrefix, sTemp.string());
  sTemp = Cstring("Write ") + sTemp + "dtprocess.head";
  vSetLabel(_pbCalibrateRun, sTemp.string(), NULL);

  pcTemp = XmTextFieldGetString(_tfCalibrateWindow1);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sWindow1 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateWindow2);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sWindow2 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateTemplate);
  m_tDtcalibrateOptions.sTemplate = pcTemp;
  XtFree(pcTemp);

  if (w == _tfCalibrateTemplate)
    {
      // Re-filter image list with new template

      _cslImages->vDeleteAll();
      if (_cUIfileFilter->bDoSearch(m_tDtcalibrateOptions.sTemplate))
	{
	  _cslImages->vAddOtherList(_cUIfileFilter->wGetListWidget(),
				    m_tDtcalibrateOptions.sTemplate);
	}
    }

  pcTemp = XmTextFieldGetString(_tfCalibrateNonunfNonunf);
  m_tDtcalibrateOptions.sNonunfNonunf = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateNonunfDark);
  m_tDtcalibrateOptions.sNonunfDark = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateSpatialInterp);
  m_tDtcalibrateOptions.sSpatialInterp = pcTemp;
  XtFree(pcTemp);

  if (m_tDtcalibrateOptions.sSpatialInterp.contains(".p4p"))
    {
      // Do nothing special
    }
  else if (m_tDtcalibrateOptions.sSpatialInterp.contains(".P4P"))
    {
      // Do nothing special
    }
  else if (m_tDtcalibrateOptions.sSpatialInterp.contains(".SPIN"))
    {
      // Do nothing special
    }
  else if (m_tDtcalibrateOptions.sSpatialInterp.contains(".spin"))
    {
      // Do nothing special
    }
  else if (m_tDtcalibrateOptions.sSpatialInterp.contains('.'))
    {
      int i;
      int j;
      for (i = m_tDtcalibrateOptions.sSpatialInterp.length()-1; i >= 0; i--)
	{
	  j = m_tDtcalibrateOptions.sSpatialInterp.GetAt(i);

	  if ('.' == j)
	    {
	      m_tDtcalibrateOptions.sSpatialInterp
		= m_tDtcalibrateOptions.sSpatialInterp.before(i);
	      XmTextFieldSetString(_tfCalibrateSpatialInterp, 
				   m_tDtcalibrateOptions.sSpatialInterp.string());
	      i = -1;
	    }
	  else if ( ('/' == j) || (']' == j) || (':' == j))
	    {
	      i = -1;
	    }
	}
    }

  pcTemp = XmTextFieldGetString(_tfCalibrateSpatialSimple1);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sSpatialSimple1 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateSpatialSimple2);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sSpatialSimple2 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateDetDist);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
#define DTCAL_BOGUS_VALUE -999.0
  if (1 == nStat)
    {
      m_tDtcalibrateOptions.sDetDist = pcTemp;
      fDetDist = dTemp;
    }
  else
    {
      fDetDist = DTCAL_BOGUS_VALUE;
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateDetTheta);
  nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    {
      m_tDtcalibrateOptions.sDetTheta = pcTemp;
      fDetTheta = dTemp;
    }
  else
    {
      fDetTheta = DTCAL_BOGUS_VALUE;
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateDirBeam1);
  sTemp = pcTemp;
  sTemp.downcase();
  if (sTemp.contains("mm"))
    {
      // Do the conversion from mm to pixels
      sTemp = sTemp.before("mm");
      dTemp = atof(sTemp.string());
      dTemp = dTemp / atof(m_tDtcalibrateOptions.sSpatialSimple1.string());
      sTemp = Cstring(dTemp, 0, 1);
      XmTextFieldSetString(_tfCalibrateDirBeam1, sTemp.string());
      strcpy(pcTemp, sTemp.string());
      nStat = sscanf(sTemp.string(), "%lf", &dTemp);
    }
  else
    nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sDirBeam1 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateDirBeam2);
  sTemp = pcTemp;
  sTemp.downcase();
  if (sTemp.contains("mm"))
    {
      // Do the conversion from mm to pixels
      sTemp = sTemp.before("mm");
      dTemp = atof(sTemp.string());
      dTemp = dTemp / atof(m_tDtcalibrateOptions.sSpatialSimple2.string());
      sTemp = Cstring(dTemp, 0, 1);
      XmTextFieldSetString(_tfCalibrateDirBeam2, sTemp.string());
      strcpy(pcTemp, sTemp.string());
      nStat = sscanf(sTemp.string(), "%lf", &dTemp);
    }
  else
    nStat = sscanf(pcTemp, "%lf", &dTemp);
  if (1 == nStat)
    m_tDtcalibrateOptions.sDirBeam2 = pcTemp;
  XtFree(pcTemp);
  
  pcTemp = XmTextFieldGetString(_tfCalibrateSpacegroup);
  m_tDtcalibrateOptions.sSpacegroup = pcTemp;
  XtFree(pcTemp);

  m_tDtcalibrateOptions.sSpatialType = (Cstring)_cUIomCalibrateSpatial->pcGetLabel();
  m_tDtcalibrateOptions.sNonunfType = (Cstring)_cUIomCalibrateNonunf->pcGetLabel();

  pcTemp = XmTextFieldGetString(_tfCalibrateResolution1);
  m_tDtcalibrateOptions.sReso1 = pcTemp;
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(_tfCalibrateResolution2);
  m_tDtcalibrateOptions.sReso2 = pcTemp;
  XtFree(pcTemp);
  if (w != _tfCalibrateResolution1)
    vSetResoOther(_tfCalibrateResolution2, _tfCalibrateResolution1, 
		Cstring("999.0"),
		&m_tDtcalibrateOptions.sReso1);

  m_sCalibrateCommand = "";
  XmTextFieldSetString(_tfCommand, m_sCalibrateCommand.string());

  if (w == _pbCalibrateRun)
    {
      // Update the header

      Cstring sPrefix = "";
      Cstring sTemp;
      int     nSpatialType;
      int     nNonunfType;

      (void) m_poHeader->nGetValue(Cdetector::ms_sDetectorNames, 1,
				   &sPrefix);
      
      nSpatialType = _cUIomCalibrateSpatial->nGetValue();
      if (0 == nSpatialType)
	{
	  (void) m_poHeader->nReplaceValue(sPrefix + 
					   Cspatial::ms_sSpatialDistortionType,
					   Cspatial::ms_sSpatialTypeSimple);
	  (void) m_poHeader->nReplaceValue(sPrefix + 
					   Cspatial::ms_sSpatialDistortionInfo,
					   m_tDtcalibrateOptions.sDirBeam1 + ' '
					   + m_tDtcalibrateOptions.sDirBeam2 + ' ' 
					   + m_tDtcalibrateOptions.sSpatialSimple1 + ' ' 
					   + m_tDtcalibrateOptions.sSpatialSimple2);
	}
      else if (1 == nSpatialType)
	{
	  (void) m_poHeader->nReplaceValue(sPrefix + 
					   Cspatial::ms_sSpatialDistortionType,
					   Cspatial::ms_sSpatialTypeInterp);
	  (void) m_poHeader->nReplaceValue(sPrefix + 
					   Cspatial::ms_sSpatialDistortionInfo,
					   m_tDtcalibrateOptions.sSpatialInterp);
	}

      (void) m_poHeader->nReplaceValue(sPrefix+Cspatial::ms_sSpatialBeamPosn,
				       m_tDtcalibrateOptions.sDirBeam1 + ' '
				       + m_tDtcalibrateOptions.sDirBeam2);

      nNonunfType = _cUIomCalibrateNonunf->nGetValue();
      if (0 == nNonunfType)
	{
	  (void) m_poHeader->nReplaceValue(sPrefix+Cnonunf::ms_sNonunfType,
					   Cnonunf::ms_sNonunfStateNone);
	}
      else if (1 == nNonunfType)
	{
	  (void) m_poHeader->nReplaceValue(sPrefix+Cnonunf::ms_sNonunfType,
					   Cnonunf::ms_sNonunfStateSimpleMask);
	  (void) m_poHeader->nReplaceValue(sPrefix+Cnonunf::ms_sNonunfInfo,
				       m_tDtcalibrateOptions.sNonunfNonunf);
	  
	}
      else if (3 == nNonunfType)
	{
	  (void) m_poHeader->nReplaceValue(sPrefix+Cnonunf::ms_sNonunfType,
					   Cnonunf::ms_sNonunfStateDarkNonunf);
	  (void) m_poHeader->nReplaceValue(sPrefix+Cnonunf::ms_sNonunfInfo,
				       m_tDtcalibrateOptions.sNonunfNonunf + ' '
				       + m_tDtcalibrateOptions.sNonunfDark);
	  
	}
      
      // Copy the spacegroup number set here into the Index menu

      XmTextFieldSetString(_tfIndexSpacegroup,
			   m_tDtcalibrateOptions.sSpacegroup.string());

      m_tDtindexOptions.sSpacegroup  = m_tDtcalibrateOptions.sSpacegroup;
      vPutMessage("INFO: setting Index menu Spacegroup number to "
		  + m_tDtcalibrateOptions.sSpacegroup);

      // Copy User chooses index toggle button to the Index menu

      XmToggleButtonSetState(_tbIndexPrompt, 
			     XmToggleButtonGetState(_tbCalibrateIndexPrompt), 
			     True);

      // Copy window size to both Find and Integrate window size

      XmTextFieldSetString(_tfFindWindow1,
			   m_tDtcalibrateOptions.sWindow1.string());
      XmTextFieldSetString(_tfFindWindow2,
			   m_tDtcalibrateOptions.sWindow2.string());
      XmTextFieldSetString(_tfIntegrateWindow1,
			   m_tDtcalibrateOptions.sWindow1.string());
      XmTextFieldSetString(_tfIntegrateWindow2,
			   m_tDtcalibrateOptions.sWindow2.string());

      // Copy master resolution set here to other menus (except Strategy!?)

      double dTemp1;
      dTemp1 = 0.0;
      nStat = sscanf(m_tDtcalibrateOptions.sReso1.string(), "%lf", &dTemp1);
      if (1 == nStat)
	{
	  dTemp = 0.0;
	  nStat = sscanf(m_tDtcalibrateOptions.sReso2.string(), "%lf", &dTemp);
	}
      if ( (1 == nStat) && (0.0 != dTemp) && (0.0 != dTemp1) )
	{
	  vPutMessage("INFO: setting resolution limits in other menus!");

	  XmTextFieldSetString(_tfIndexResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtindexOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfIndexResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtindexOptions.sReso2 = m_tDtcalibrateOptions.sReso2;

	  XmTextFieldSetString(_tfFindResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtfindOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfFindResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtfindOptions.sReso2 = m_tDtcalibrateOptions.sReso2;

	  XmTextFieldSetString(_tfRefineResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtrefineOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfRefineResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtrefineOptions.sReso2 = m_tDtcalibrateOptions.sReso2;

	  XmTextFieldSetString(_tfPredictResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtpredictOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfPredictResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtpredictOptions.sReso2 = m_tDtcalibrateOptions.sReso2;

	  XmTextFieldSetString(_tfIntegrateResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtintegrateOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfIntegrateResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtintegrateOptions.sReso2 = m_tDtcalibrateOptions.sReso2;

	  XmTextFieldSetString(_tfScaleResolution1,
			       m_tDtcalibrateOptions.sReso1.string());
	  m_tDtscaleOptions.sReso1 = m_tDtcalibrateOptions.sReso1;
	  XmTextFieldSetString(_tfScaleResolution2,
			       m_tDtcalibrateOptions.sReso2.string());
	  m_tDtscaleOptions.sReso2 = m_tDtcalibrateOptions.sReso2;
	}

      // Replace detector distance and swing angle in the header

      float a6fDet[6];
      nTemp = m_poHeader->nGetValue(sPrefix+Cgoniometer::ms_sGonioValues, 6,
				    a6fDet);
      if (0 == nTemp)
	{
	  if (DTCAL_BOGUS_VALUE != fDetTheta) 
	    a6fDet[1] = fDetTheta;
	  if (DTCAL_BOGUS_VALUE != fDetDist)
	    a6fDet[5] = fDetDist;
	  (void) m_poHeader->nReplaceValue(sPrefix+Cgoniometer::ms_sGonioValues,
					   6, a6fDet, 3);
	}
	  
      // Replace scan template in the header

      (void) m_poHeader->nReplaceValue(Cscan::ms_sScanTemplate, 
				       m_tDtcalibrateOptions.sTemplate);

      // Set the find sequence to search to be the first image in the
      // images list.  Set the integrate menu to all images in the images
      // list.
      
      Cstring *psItems;
      int      nNum;
      psItems  = NULL;

      _cslImages->vGetSelection(&nNum, &psItems);
      if (0 == nNum)
	{
	  // If none selected, then check name selected in header list

	  Cstring *psItemsH;
	  int      nNumH;
	  psItemsH = NULL;
	  _cslHeader->vGetSelection(&nNumH, &psItemsH);
	  
	  if (0 < nNumH)
	    {
	      // Try to set the selection to the one in the header list

	      _cslImages->vSetSelection(psItemsH[0], False);
	      if (NULL != psItemsH)
		{
		  delete [] psItemsH;
		  psItemsH = NULL;
		}
	      _cslImages->vGetSelection(&nNum, &psItems);
	      if (0 == nNum)
		{
		  // Still no selection, so set it to first image

		  _cslImages->vSetSelection(1, False);
		  _cslImages->vGetSelection(&nNum, &psItems);
		}
	    }
	  else
	    {
	      // None selected in the header list and images list, so try
	      // to use first one in images list

	      _cslImages->vSetSelection(1, False);
	      _cslImages->vGetSelection(&nNum, &psItems);
	    }
	}
      if ( (0 < nNum) && (NULL != m_poScan) )
	{
	  // Get the sequence number from the image filename and place in
	  // Find, Refine and Predict menus

	  if (m_poScan->bIsAvailable())
	    {
	      Cstring sSeqNum;
	      //	      nNum  = m_poScan->nGetSeqNum(psItems[0]);
	      //	      cout << "Initial start is: " << nNum << endl;
	      nNum  = m_poScan->nGetSeqNum(0);
	      //	      cout << "Actual start is: " << nNum << endl;
	      float fRotInc = 0.5;
	      fRotInc = m_poScan->m_poRotation->fGetIncrement();
	      sSeqNum = (Cstring) nNum;
	      XmTextFieldSetString(_tfFindSeqStart, sSeqNum.string());
	      XmTextFieldSetString(_tfIntegrateSeqStart, sSeqNum.string());
	      XmTextFieldSetString(_tfPredictSeqStart, sSeqNum.string());
	      XmTextFieldSetString(_tfPredictSeqEnd, sSeqNum.string());
	      if (  ("FALSE" == sGetEnv("DTREK_MACROXTAL"))
		    || XmToggleButtonGetState(_tbCalibrateModeSmall))
		{
		  // Small molecule, set Find sequence end to be 50 images 
		  // further along.
		  
		  if (NULL != psItems)
		    {
		      delete [] psItems;
		      psItems = NULL;
		    }
		  Widget wList;
		  wList = _cslImages->wGetListWidget();
		  int nToUse;
		  XtVaGetValues(wList, XmNitemCount, &nToUse, NULL);
		  if (50 < nToUse) nToUse = 50;
		  int i;
		  _cslImages->vSetSelectPolicy(XmMULTIPLE_SELECT);
		  for (i = 1; i <= nToUse; i++)
		    _cslImages->vSetSelection(i, False, True);

		  _cslImages->vGetSelection(&nNum, &psItems);
		  if (0 < nNum)
		    nToUse = m_poScan->nGetSeqNum(psItems[nNum-1]);
		  if (0 < nToUse)
		    {
		      sSeqNum = (Cstring) nToUse;
		    }
		  XmTextFieldSetString(_tfFindSeqEnd, sSeqNum.string());
		  
		  if (fRotInc < 0.6)
		    {
		      // Fine slice small molecule
		      XmTextFieldSetString(_tfIntegratePadding, "2,1,0");
		      XmTextFieldSetString(_tfIntegrateProfSize2, "20 20");// Hidden -profit
		      XmTextFieldSetString(_tfIntegrateProfSize1, "20");   // Refine batch
		      XmTextFieldSetString(_tfIntegrateBatchNum, "5");     // Scale batch
		      _cUIom9IntegratePrerefine->vSetValue(2);
		    }
		  else if (fRotInc >= 2.0)
		    {
		      // Wide slice small molecule
		      XmTextFieldSetString(_tfIntegratePadding, "0,1,0.5");
		      XmTextFieldSetString(_tfIntegrateProfSize2, "20 10"); // Hidden -profit
		      XmTextFieldSetString(_tfIntegrateProfSize1, "10");    // Refine batch
		      XmTextFieldSetString(_tfIntegrateBatchNum, "1");      // Scale batch
		      _cUIom9IntegratePrerefine->vSetValue(4);
		    }
		  else
		    {
		      // Moderate slice small molecule
		      XmTextFieldSetString(_tfIntegratePadding, "1,1,0");
		      XmTextFieldSetString(_tfIntegrateProfSize2, "20 7"); // Hidden -profit stuff
		      XmTextFieldSetString(_tfIntegrateProfSize1, "15");   // Refine batch
		      XmTextFieldSetString(_tfIntegrateBatchNum,  "4");     // Scale batch
		      _cUIom9IntegratePrerefine->vSetValue(4);
		    }
//+2009-12-08
// Use the special small molecule refinement macro
		  m_nRefineMacro = 7;
		  _cUIom9RefineMacros->vSetValue(m_nRefineMacro);
		  vRefineCB(_cUIom9RefineMacros->baseWidget(), 
			    (XtPointer)m_nRefineMacro,
			    NULL);
//-2009-12-08
		  // Set prerefine option in Integrate menu to be 7
		  //    -prefind -8 -prerefine 2
		  // Set Special scans, select last toggle button?

		  _cUIom9IntegratePrerefine->vSetValue(7);
		  vPutMessage("INFO: setting Integrate menu Prerefine option to -prefind -8 -prerefine 2");

		  m_tDtintegrateOptions.bSpecial  = True;
		  _cUIom9IntegrateSpecial->vSetValue((int)m_tDtintegrateOptions.bSpecial);

		  m_tDtintegrateOptions.bSpecial4 = True;
		  XmToggleButtonSetState(_tbIntegrateSpecial4,
					 m_tDtintegrateOptions.bSpecial4, False);
	  
		  // Remember Nopurge is used for differentdet now!

		  m_tDtintegrateOptions.bNopurge = True;
		  XmToggleButtonSetState(_tbIntegrateNopurge, m_tDtintegrateOptions.bNopurge, True);

		  // **TODO: In Integrate menu, set specials scans and
		  //                          last togglebutton?
		  // TODO: In Find, do we want 3D search as +default?
		  //                Box size?
		}
	      else
		{
		  // Macromolecule or Protein 
		  XmTextFieldSetString(_tfIntegrateProfSize2, "50 7"); // Hidden -profit stuff
		  XmTextFieldSetString(_tfFindSeqEnd, sSeqNum.string());
		}
	      vFindCB(_tfFindSeqStart, NULL, NULL);

	      // Need to call vRefineCB here, since below the image selection
	      // is called with selection 0

	      vRefineCB(_cslImages->baseWidget(), (XtPointer)&nNum, 
			(XtPointer)psItems);

	      vPredictCB(_tfPredictSeqStart, NULL, NULL);

	      // Also set Integrate menu seq start and end to be all images

	      // XmTextFieldSetString(_tfIntegrateSeqStart, sSeqNum.string());

	      if (NULL != psItems)
		{
		  delete [] psItems;
		  psItems = NULL;
		}

	      // Select last image in the images list

	      _cslImages->vSetSelection(0, False);
	      _cslImages->vGetSelection(&nNum, &psItems);
	      if (0 < nNum)
		{
		  nNum  = m_poScan->nGetSeqNum(psItems[0]);
		  if (-99999 >= nNum) nNum =9999;
		  sSeqNum = (Cstring) nNum;
		  XmTextFieldSetString(_tfIntegrateSeqEnd, sSeqNum.string());
		}
	    }
	}
      if (NULL != psItems)
	{
	  delete [] psItems;
	  psItems = NULL;
	}

      // Run the command in m_sCalibrateCommand

      m_bFCDialogRun = TRUE;
      m_poXcursor->vSetWait();

      (void) nUpdateHeader(m_poHeader);
      sTemp = sDtrekGetPrefix() + "dtprocess.head";
      m_poHeader->nWrite(sTemp);

      if (NULL != m_poXprop)
	{
	  // Update any dtdisplay that might be running
	  // cout << "Header is " << sTemp << endl;
	  m_poXprop->hSetProperty("DTDISPLAY_REFLN_UPDATE",
				  " Header: " + sGetCWD() + sTemp);
	}

      // Re-filter header list ...

      m_sHeaderDir  = sGetCWD();
      m_sHeaderMask = m_sHeaderDir + "*.head";

      _cslHeader->vDeleteAll();
      if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
	_cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());

      sTemp = sFileGetBasename(sTemp);
      _cslHeader->vSetSelection(sTemp, False);

      // vCommandDone will call nLoadHeader()

      vCommandDone();
    }

    // End user code block <vCalibrateCB>
}

void MainWindow::vCalibrateTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vCalibrateTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vCalibrateTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vCalibrateTextFieldCB>

  char    *pcTemp;
  Cstring sText;
  Cstring sFormat;

  if (XmIsTextField(w))
    XmTextShowPosition(w, XmTextGetLastPosition(w));

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;
  if (pCBS->reason == XmCR_ACTIVATE)
    {
      XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
      pcTemp = XmTextFieldGetString(w);
      if (NULL != pcTemp)
	sText = pcTemp;
      XtFree(pcTemp);

      int    i;
      int    nStat;
      int    nDecimal;
      double dNumber;

      // See how many decimal places there are and use to build format string
  
      nDecimal     = sText.find('.');
      if (0 > nDecimal)
	{
	  nDecimal = 0;
	}
      else
	{
	  nDecimal = sText.length() - nDecimal - 1;
	  if (0 > nDecimal) nDecimal = 0;
	}
      sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
      
      nStat = sscanf(sText.string(), "%lf", &dNumber);
      if (1 != nStat)
	nStat = 1;
      else
	nStat = 0;
    }

  vCalibrateCB(w, NULL, NULL);

    // End user code block <vCalibrateTextFieldCB>
}

void MainWindow::vCommandCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vCommandCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vCommandCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vCommandCB>
  char *pcTemp;
  Cstring sTemp;
  pcTemp = XmTextFieldGetString(_tfCommand);
  sTemp = pcTemp;
  m_bFCDialogRun = FALSE;
  vCommandExecute(sTemp, 1);  // Run in window with input allowed
  XtFree(pcTemp);

    // End user code block <vCommandCB>
}

void MainWindow::vDAExposeCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vDAExposeCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vDAExposeCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vDAExposeCB>

  XmDrawingAreaCallbackStruct *cbs =
    (XmDrawingAreaCallbackStruct *) callData;

  XEvent *pXevent = cbs->event;

  if (cbs->reason == XmCR_EXPOSE)
    {
      Display *dpy = pXevent->xany.display;
      
      XExposeEvent *pXexpose = (XExposeEvent *)cbs->event;

//      vDrawInFlowChart(_daFlowchart);
      XCopyArea (dpy, m_hPixmap, pXevent->xany.window, m_hGC, 
		 pXexpose->x, pXexpose->y, 
		 pXexpose->width, pXexpose->height, 
		 pXexpose->x, pXexpose->y);
    }
    // End user code block <vDAExposeCB>
}

void MainWindow::vFlowChartCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vFlowChartCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vFlowChartCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFlowChartCB>
  int i;
  for (i = 0; i < DTP_DLG_MAXBUTTONS-1; i++)
    {
      if (*m_pwpbFlowChart[i] == w)
	break;
    }
  if (DTP_DLG_MAXBUTTONS <= i)
    {
      vPutMessage("ERROR in vFlowChartCB!", 1);
    }

  // Unmanage the current dialog

  XtUnmanageChild(m_wFCActive);
  vLogfileCB(_pbLogfileDismiss, NULL, NULL);

  // Save the particulars of the new dialog

  m_wFCActive    = *(m_pwfrMain[i]);         // The dialog frame to manage
  m_pbDialogRun  = *(m_pwpbDialogRun[i]);    // The dialog "run" button
  m_nFCActive    = i;

  // See if a header file is selected

  Cstring *psItems;
  int      nNum;

  psItems = NULL;
  _cslHeader->vGetSelection(&nNum, &psItems);

  if (1 != nNum)
    {
      // No header selected, so make dialog insensitive

      XtSetSensitive(m_wFCActive, False);
      vPutMessage("You must select a header file first!");
      vPopDialog(_pbFileHeader, NULL, NULL);
    }
  else
    {
      m_sHeaderName = *psItems;
      if (sGetCWD() != m_sHeaderDir)
	m_sHeaderName = m_sHeaderDir + m_sHeaderName;
//      vPutMessage((Cstring)"Header is " + m_sHeaderName);
      XtSetSensitive(m_wFCActive, True);
    }

  if (NULL != psItems)
    {
      delete [] psItems;
      psItems = NULL;
    }

  if (   (w == _pbIndex)
      || (w == _pbScale)
      || (w == _pbMerge)
     )
    {
      _cslImages->unmanage();
      _cslReflnlist->manage();
      
      // See if a reflnlist is selected
      Cstring *psItems;
      int      nNum;
      psItems = NULL;
      _cslReflnlist->vGetSelection(&nNum, &psItems);
      if (1 > nNum)
	{
	  // No reflnlist selected, so make dialog insensitive

//	  XtSetSensitive(m_wFCActive, False);
	  vPutMessage("You must select a reflnlist first!");
	  vPopDialog(_pbFileReflnlist, NULL, NULL);
	}
      if (NULL != psItems)
	{
	  delete [] psItems;
	  psItems = NULL;
	}
    }
  else if (w == _pbRefine) 
    {
      Cstring *psItems;
      int      nNum;
      psItems = NULL;

      if (1 == _cUIom9RefineRefln->nGetValue())
	{
	  _cslReflnlist->unmanage();
	  _cslImages->manage();
	}
      else
	{
	  _cslImages->unmanage();
	  _cslReflnlist->manage();
      
	  // See if a reflnlist is selected

	  _cslReflnlist->vGetSelection(&nNum, &psItems);
	  if (1 > nNum)
	    {
	      // No reflnlist selected, so make dialog insensitive

//	  XtSetSensitive(m_wFCActive, False);
	      vPutMessage("You must select a reflnlist first!");
	      vPopDialog(_pbFileReflnlist, NULL, NULL);
	    }
	}
      if (NULL != psItems)
	{
	  delete [] psItems;
	  psItems = NULL;
	}
    }
  else if (   (w == _pbFind)
	   || (w == _pbIntegrate) 
	   || (w == _pbCalibrate) 
	   || (w == _pbPredict) )
    {
      _cslReflnlist->unmanage();
      _cslImages->manage();
    }
  else if (w == _pbStrategy)
    {
      _cslImages->unmanage();
      _cslReflnlist->manage();
    }
  else if (w == _pbOrient)
    {
      _cslReflnlist->unmanage();
      _cslImages->unmanage();
    }
	   

  // Manage the new dialog

  XtManageChild(m_wFCActive);

  // Update the flow chart to reflect the selection of the new dialog

  vUpdateFlowChart(w);

    // End user code block <vFlowChartCB>
}

// Begin user code block <tail>


int
MainWindow::nIntegrateSpecial(Cstring *psOptions)
{
  // Construct a special dtintegrate command script

  int nStat;

  Cimage_header oHeaderUpdated;
  Cimage_header *poHeader   = NULL;
  Cscan         *poScan     = NULL;
  Crotation     *poRotation = NULL;
  Crotation      oRotationPrev;

/*
   1. Use m_sHeader as the starting point
   1a. Create "dtintspecial" script
   2. Get all image filenames from the images list
   3. Loop through each image:
      1.  Get header of the image
      2.  Check header for changes
      3.  If inconsistent ..
*/

  Cstring  sTemp;
  Cstring  sCommand;
  Cstring  sBaseCurr;
  Cstring  sBasePrev;
  Cstring  sDetName;
  Cstring  sHeaderFile;
  Cstring  sPrefix;
  Cstring  sLargestScan;
  Cstring  sLargestPrefix;
  Cstring  sIntegrateMergeRef;
  Cstring  sProfitMergeRef;
  Cstring  sBigMessage;
  Cstring  sNewScanStartEnd;
  Cstring  sNewScanDetGonio;
  Cstring *psItems = NULL;
  int      nNum;
  int      nMaxImages = 0;
  int      nNumImages = 0;

  //vPutMessage("nIntegrateSpecial called!");

  // Get the selected images

  _cslImages->vGetSelection(&nNum, &psItems);
  if ( (0 >= nNum) && (0 == _cUIomMode->nGetValue()) )
    {
      // Not in auto-mode and no images selected
      vPutMessage("No images selected for special integration!", 1);
      return (-1);
    }
  else if (0 >= nNum)
    {
      // In some kind of auto-mode and no images selected, so try to select ALL image
      _cslImages->vSetSelectionAll(False);
      _cslImages->vGetSelection(&nNum, &psItems);
    }
  if (0 >= nNum)
    {
      // Still no images selected
      vPutMessage("No images selected for special integration!", 1);
      return (-1);
    }

  m_poXcursor->vSetWait();
  XmUpdateDisplay(_mbProgress);

  sTemp = sDtrekGetPrefix() + "dtintspecial";
  ofstream oOut(sTemp);
  oOut << "#!/bin/csh -f\n";  
  nDoSystemCommand("chmod a+x " + sTemp);

  int   i, j;
  int   nSeqStart = -9999;
  int   nSeqEnd;
  int   nSaveVerbose;
  int   nBatchNum = 1;
  int   nNumGonioValues;
  float a10fDetGonioRefined[10];
  float a10fDetGonio[10];
  float fDiff;

  // Suppress mundane Cimage_header:: messages

  nSaveVerbose = Cimage_header::nGetVerbose();
  Cimage_header::vSetVerbose(0);

  //+2011-08-17 JWP 
  // Template stuff
  Cstring sScanTemplatePrevEnv = "";
  //-2011-08-17 JWP 

  // Starting header is found in m_poHeader
  // Get the first image header

  bool bNewScan    = TRUE;
  bool bWriteScan  = FALSE;
  bool bPrevScan   = FALSE;

  oHeaderUpdated = *m_poHeader;

  nStat = m_poHeader->nGetValue(Cscan::ms_sScanTemplate, &sTemp);
  int nNumQuestionMarks = 0;

  for (i = 0; i < sTemp.length(); i++)
    if ('?' == sTemp.GetAt(i)) nNumQuestionMarks++;

  //+2011-08-17
  // Just in case one exists, save it, put the new one, restore later
  sScanTemplatePrevEnv = sGetEnv(Cscan::ms_sScanTemplate);
  if ("" != sScanTemplatePrevEnv) cout << "Restore to : " << sScanTemplatePrevEnv << endl;
  // Use the new one always
  (void) nPutEnv(Cscan::ms_sScanTemplate, sTemp);
  //-2011-08-17

  sBigMessage  = "The following scans with scan template " + sTemp + " have been scripted:\n";
  sBigMessage += " Start  End  DetSwing DetDist";

  // Get detector name used as prefix; Get refined detector position

  (void) m_poHeader->nGetValue(Cdetector::ms_sDetectorNames, &sDetName);
  (void) m_poHeader->nGetValue(sDetName + Cgoniometer::ms_sGonioNumValues,
			       &nNumGonioValues);
  (void) m_poHeader->nGetValue(sDetName + Cgoniometer::ms_sGonioValues, 
			       nNumGonioValues, a10fDetGonioRefined);
  sBasePrev = "";
  i         = 0;
  nStat     = 0;
  XtUnmanageChild(XmMessageBoxGetChild(_mbProgress, XmDIALOG_CANCEL_BUTTON));
  vPostError(_mbProgress, (XtPointer)"...dtintspecial...", (XtPointer)1);
  int nSeqPrev = -9999;
  int nSeqCurr = -9998;

  while ( (i < nNum) && (0 == nStat) )
    {
      if (0 == ((i+1) % 50) )
	{
	  sTemp = "... dtintspecial examining header " + (Cstring) (i+1)
	          + " of " + (Cstring) nNum;
	  vPutMessage(sTemp.string());
	  vPostError(_mbProgress, (XtPointer)sTemp.string(), (XtPointer)1);
	}

      // Read the next header 

      //cout << "working on " << psItems[i] << endl;
      poHeader = new Cimage_header(m_sImageDir + psItems[i]);
      if (!poHeader->bIsAvailable())
	{
	  nStat = -2;
	}

      // Decide whether bNewScan is TRUE
      
      // TODO: bug in next line because comes back with default 3 ?s and not 4!
      
      sBaseCurr = sBuildScanTemplate(psItems[i], nNumQuestionMarks);
      sBaseCurr = sFileGetBasename(sBaseCurr);
      sBaseCurr = sBaseCurr.before('?');

      // Strip off '.' if it is the last character in the string

      if ('.' == sBaseCurr.GetAt(sBaseCurr.length()-1))
	sBaseCurr = sBaseCurr.before((int)sBaseCurr.length()-1);

      //++JWP
      // cout << "basecurr: " << sBaseCurr << "  baseprev: " << sBasePrev << endl;
      bNewScan  = (sBasePrev != sBaseCurr);
      //++JWP
      ////      if (bNewScan) cout << "NewScan: basecurr: " << sBaseCurr << "  baseprev: " << sBasePrev << endl;

      // If there is a previous scan, 
      //   check if this image is in or out of sequence

      if (!bNewScan && bPrevScan)
	{
	  // Is this image a continuation of previous scan?

	  poRotation = new Crotation(*poHeader);
	  if (!poRotation->bIsAvailable())
	    {
	      delete poRotation;
	      poRotation = new Crotation(m_poScan,
					 m_poScan->nGetSeqNum(psItems[i]));
	    }
	  //	  cout << "Curr rot start: " << poRotation->fGetRotStart() << endl;
	  //	  cout << "Prev rot end:   " << oRotationPrev.fGetRotEnd() << endl;
//+JWP 2011-02-28
//m_poScan has 5 ?s
	  nSeqCurr = m_poScan->nGetSeqNum(psItems[i]);
	  if (nSeqCurr != (nSeqPrev+1))
	    {
	      // If sequence number changes by more than 1, it is a new scan
	      // This will help catch a new scan (with an offset seq num) 
              // that continues from where the previous scan stopped.
	      bNewScan = TRUE;
	      //+JWP
	      // cout << "NewScan SeqCurr != SeqPrev+1: " 
	      //      << nSeqCurr << "  " << nSeqPrev << endl;
	    }
//-JWP 2011-02-28
	  else if (0.0001 > ABS(poRotation->fGetRotStart() - oRotationPrev.fGetRotEnd()))
	    {
	      // Yes, continuation, so adjust nSeqEnd

	      nNumImages++;
	      j = poScan->nGetSeqNum(psItems[i]);
	      if (-9999 < j)
		nSeqEnd = j;
	      oRotationPrev = *poRotation;
	      //	      cout << "in seq: " << nSeqEnd << endl;
	    }
	  else
	    {
	      // No, not a continuation, so be sure to flag start new scan

	      bNewScan = TRUE;
	    }
	  delete poRotation;
	}

      if (bNewScan)
	{
	  if (bPrevScan)
	    {
	      // Finish writing out the previous scan before starting new scan
	      sNewScanStartEnd   = (Cstring)nSeqStart + ' ' + (Cstring)nSeqEnd;
	      sBigMessage += "\n  " + sNewScanStartEnd + "  " + sNewScanDetGonio;
	      sCommand   = sCommand + " -seq " + sNewScanStartEnd;

//+28-Jan-2004 add -prefind 2 as default for dtintspecial jobs
//+2009-12-08 JWP change so only add -prefind if it does not already occur
	      if (!sCommand.contains("-prefind"))
		sCommand = sCommand+ " -prefind -8";
//-2009-12-08 JWP 
//-28-Jan-2004
	      oOut << '\n' << sCommand << '\n';
	      bPrevScan  = FALSE;
	      if (nNumImages > nMaxImages)
		{
		  nMaxImages          = nNumImages;
		  sLargestScan        = sHeaderFile;
		  sLargestPrefix      = sPrefix;
		}
	      sIntegrateMergeRef += (Cstring)' ' + sDtrekGetPrefix() 
                                                 + sPrefix + "dtintegrate.ref";
	      sProfitMergeRef    += (Cstring)' ' + sDtrekGetPrefix() 
                                                 + sPrefix + "dtprofit.ref";
	    }

	  // Initialize commands for new scan

	  bNewScan   = FALSE;
	  
	  // Copy SCAN_ info from this image's header to the updated header,
	  // But modify the SCAN_TEMPLATE for any directory changes.

	  (void) oHeaderUpdated.nCopyMask(*poHeader, Cscan::ms_sScanPrefix + '*');

	  (void) oHeaderUpdated.nGetValue(Cscan::ms_sScanTemplate, &sTemp);
	  // The template may not have the same number of ?'s as the previous template
	  // which is probably a bug ....
	  // Let us try a workaround: we will set an environment variable temporarily
	  
 
	  sTemp = sFileGetBasename(sTemp);
	  (void) oHeaderUpdated.nReplaceValue(Cscan::ms_sScanTemplate, 
					      m_sImageDir + sTemp);
	  
	  //cout << "New ScanTemplate: " << m_sImageDir << sTemp << "<<<<\n\n";

	  // Copy rotation info from image header to updated header

	  (void) oHeaderUpdated.nCopyMask(*poHeader, Crotation::ms_sRotation + '*');

	  // Copy crystal gonio values from image header to updated header

	  oHeaderUpdated.nCopyMask(*poHeader, Ccrystal::ms_sCrystalPrefix +
				              Cgoniometer::ms_sGonioValues);

	  // Modify detector GONIO_VALUES to reflect refined and current
	  // detector position!

	  (void) poHeader->nGetValue(sDetName + Cgoniometer::ms_sGonioValues, 
				     nNumGonioValues, a10fDetGonio);

	  for (j = 0; j < nNumGonioValues; j++)
	    {
	      fDiff = ABS(a10fDetGonio[j] - a10fDetGonioRefined[j]);
	      if (   (fDiff < ABS(0.05 * a10fDetGonio[j]))  // Diff is small
		  || (  (0.0 == a10fDetGonio[j]) && (0.9 > fDiff) ) )
		{
		  a10fDetGonio[j] = a10fDetGonioRefined[j];
		}
	    }
	  (void) oHeaderUpdated.nReplaceValue(sDetName 
					      + Cgoniometer::ms_sGonioValues, 
					      nNumGonioValues, a10fDetGonio);

	  sNewScanDetGonio = Cstring(a10fDetGonio[1], 8, 1) + ' ' + Cstring(a10fDetGonio[5], 7, 1);

	  // Copy source wavelength from image header to updated header

	  oHeaderUpdated.nCopyMask(*poHeader, Csource::ms_sSourcePrefix
				   + Cwavelength::ms_sWavelength);

	  // Write out header to use with the dtintegrate command

	  sHeaderFile  = sDtrekGetPrefix() + sBaseCurr + (Cstring)nBatchNum + ".head";
	  sPrefix      = sBaseCurr + (Cstring)nBatchNum + '_';
	  nStat    = oHeaderUpdated.nWrite(sHeaderFile);

	  oOut << "\nsetenv DTREK_PREFIX " << sDtrekGetPrefix() + sPrefix;
	  sCommand = sTransSymbol("$(dtintegrate)") + ' '
	             + sHeaderFile
                     + *psOptions + " -batchprefix " + (Cstring) nBatchNum;
	  nBatchNum++;
	  nNumImages = 1;

	  // Get scan sequence info

	  if (NULL != poScan) delete poScan;

	  poScan     = new Cscan(oHeaderUpdated);
	  poRotation = new Crotation(*poHeader);
	  if (!poScan->bIsAvailable() || !poRotation->bIsAvailable())
	    {
	      vPutMessage("No scan or rotation info available!", 1);
	      nStat = -4;
	    }
	  oRotationPrev = *poRotation;
	  delete poRotation;

	  j = poScan->nGetSeqNum(psItems[i]);
	  if (-9999 < j)
	    nSeqStart = j;
	  //	  cout << "New seq: " << nSeqStart << endl;
	  nSeqEnd   = nSeqStart;
	  bPrevScan = TRUE;      
	  sBasePrev = sBaseCurr;
//+JWP 2011-02-28
	  nSeqCurr =  nSeqStart; // Important to set first scan sequence number;
//+JWP 2011-02-28
	}
      nSeqPrev = nSeqCurr;
      delete poHeader;
      i++;
    } // end of while

  XtUnmanageChild(_mbProgress);
  XtManageChild(XmMessageBoxGetChild(_mbProgress, XmDIALOG_CANCEL_BUTTON));

  // Be sure to write out any previous scan that was started

  if (bPrevScan)
    {
      bPrevScan = FALSE;
      sNewScanStartEnd   = (Cstring)nSeqStart + ' ' + (Cstring)nSeqEnd;
      sBigMessage += "\n  " + sNewScanStartEnd + "  " + sNewScanDetGonio + '\n';
      sCommand   = sCommand + " -seq " + sNewScanStartEnd;

//+28-Jan-2004 add -prefind 2 as default for dtintspecial jobs
//+2009-12-08 JWP change so only add -prefind if it does not already occur
      if (!sCommand.contains("-prefind"))
	sCommand = sCommand+ " -prefind -8";
//-2009-12-08 JWP 
//-28-Jan-2004

      // Add dtprofit command only if profile-fitting done

      // if (!psOptions->contains("-noprofit"))
      //    sCommand = sCommand + " && "
      //    + sTransSymbol("$(dtprofit)")
      //    + " -kabsch -kmin 0";
      oOut << '\n' << sCommand << '\n';

      if (nNumImages > nMaxImages)
	{
	  nMaxImages          = nNumImages;
	  sLargestScan        = sHeaderFile;
	  sLargestPrefix      = sPrefix;
	}
      sIntegrateMergeRef += (Cstring)' ' + sDtrekGetPrefix() + sPrefix + "dtintegrate.ref";
      sProfitMergeRef    += (Cstring)' ' + sDtrekGetPrefix() + sPrefix + "dtprofit.ref";
    }

  // Perform some things at the end:
  // 1. Refine on largest scan
  // 2. Merge *dtintegrate.ref files
  // 3. Merge *dtprofit.ref files
  // 4. Run dtscalemerge in default mode?

  // 1. Refine on largest scan

//+JWP 2010-04-23
  // Change sLargestScan to be the name of the largest *dtintegrate.head file produced
  // Use our standard prefix
  sTemp = sLargestScan.before(".head");
  sLargestScan = sTemp + "_dtintegrate.head";
//-JWP 2010-04-23
  oHeaderUpdated.nGetValue((Cstring)D_K_DtrefineOptions, &sTemp);
  if ("" == sDtrekGetPrefix())
    oOut << "\nunsetenv DTREK_PREFIX\n";
  else
    oOut << "\nsetenv DTREK_PREFIX " << sDtrekGetPrefix() << '\n';

  oOut << sTransSymbol("$(dtrefine)") << ' ' << sLargestScan << ' ' 
       << sDtrekGetPrefix() + sLargestPrefix << "dtintegrate.ref " << sTemp;
  
  // 2. Merge *dtintegrate.ref files

  sTemp = sDtrekGetPrefix() + "dtintegrate.ref";
  if (bFileExists(sTemp))
    {
      (void) nFileAppendVersion(sTemp, FALSE);
    }

  oOut << '\n' << sTransSymbol("$(dtreflnmerge)") << ' ' 
       << sIntegrateMergeRef << ' ' << sTemp;

  // 3. Merge *dtprofit.ref files (only if profile-fitting done!)

  if (!psOptions->contains("-noprofit"))  
    {
      sTemp = sDtrekGetPrefix() + "dtprofit.ref";
      if (bFileExists(sTemp))
	{
	  (void) nFileAppendVersion(sTemp, FALSE);
	}

      oOut << '\n' << sTransSymbol("$(dtreflnmerge)") << ' ' 
	<< sProfitMergeRef << ' ' << sTemp;
    }

//+JWP 2010-04-23
  // 5. Assume dtrefine worked, so use that *dtrefine.head 

  //NO:   // 5. Copy that ${DTREK_PREFIX}dtrefine.head to ${DTREK_PREFIX}dtintegrate.head

  //sTemp = sDtrekGetPrefix() + "dtintegrate.head";
  sTemp = sDtrekGetPrefix() +  "dtrefine.head";

  if (bFileExists(sTemp))
    {
      (void) nFileAppendVersion(sTemp, FALSE);
    }
  // I guess if dtrefine fails, then the file will not exist, so no real problem

  oOut << "\ncp " << sTemp << ' ' << sDtrekGetPrefix() + "dtintegrate.head" << '\n';

//-JWP 2010-04-23

  // Close the ofstream, clean-up and return

  oOut.close();
  delete [] psItems;
  if (NULL != poScan) delete poScan;

  m_poXcursor->vRestore();
  *psOptions = sDtrekGetPrefix() + "dtintspecial " + *psOptions;
  Cimage_header::vSetVerbose(nSaveVerbose);
  sBigMessage += "\n\nYou may dismiss this message without affecting the script.\n";
  vPutMessage(sBigMessage.string());
  vPostError(_mbError, (XtPointer)sBigMessage.string(), NULL);
  //+2011-08-17
  // Restore any previous scan template, note if "", then it is unsetenv
  (void) nPutEnv(Cscan::ms_sScanTemplate, sScanTemplatePrevEnv);
  //-2011-08-17
  return (nStat);
}

void
MainWindow::vFileFilterCBCallback(XtPointer pObj,         // Pointer to object 
				  Widget wListWidget, int nPosition, 
				  XtPointer callData)
{
  MainWindow *obj = (MainWindow *)pObj;
  obj->vFileFilterCB(pObj, wListWidget, nPosition, callData);
}

void
MainWindow::vFileFilterCB(XtPointer pObj,           // Pointer to object 
			  Widget wListWidget, int nPosition, XtPointer callData)
{
  XmFileSelectionBoxCallbackStruct *pCBS
    = (XmFileSelectionBoxCallbackStruct *) callData;
  char *pcTemp;
  Cstring sMask;
  Cstring sDir;
  Cstring sName;
  Cstring sBasename;
  Cstring sNameSpecial;

  // Need to save header mask & directory

  XmStringGetLtoR(pCBS->value,
#if (XmVersion >= 1002)
		  XmFONTLIST_DEFAULT_TAG,
#else
		  XmSTRING_DEFAULT_CHARSET,
#endif
		  &pcTemp);
  sName     = pcTemp;
  sBasename = sFileGetBasename(sName);
  sDir      = sFileGetDirectory(sName);
  XtFree(pcTemp);

  if (sGetCWD() == sDir)
    {
      sNameSpecial = sBasename;
    }
  else
    {
      sNameSpecial = sName;
    }
  XmStringGetLtoR(pCBS->mask,
#if (XmVersion >= 1002)
		  XmFONTLIST_DEFAULT_TAG,
#else
		  XmSTRING_DEFAULT_CHARSET,
#endif
		  &pcTemp);
  sMask = pcTemp;
  XtFree(pcTemp);

  if (   (m_wpbFilterButton == _pbFileTemplate)
      || (m_wpbFilterButton == _pbCalibrateTemplate) )
    {
      // If the mask contains ?, but does not have * 

      if (sName.contains('?'))
	{
	  // Name contains ?, so sName IS the template, not sMask

	  sMask = sName;
	}
      else if (sMask.contains('*'))
	{
	  // sMask contains *, so try to convert selected file to a template

	  sMask = sBuildScanTemplate(sName);
	  sName = sMask;
/*
	  int i, j;
	  int nTemp = 0;
	  for (i = sName.length()-1; (i >= 0) && (nTemp < 3); i--)
	    {
	      j = sName.GetAt(i);

	      // Change (up to) last 3 digits in sName to ?s

	      if (   ('0' <= j) && ('9' >= j) )
		{
		  sName.SetAt(i, '?');
		  nTemp++;
		}
	      else if ( ('/' == j) || (':' == j) || (']' == j) )
		{
		  i = -1;  // Stop reverse scanning
		}
	    }
	  sMask = sName;
*/
	}
      if (    sMask.contains('?')     // Mask contains ? 
	  && !sMask.contains('*') )  //  but does not have *
	{
	  m_tDtcalibrateOptions.sTemplate = sMask;
	  XmTextFieldSetString(_tfCalibrateTemplate, sMask.string());
	}

      if (m_wpbFilterButton == _pbCalibrateTemplate)
	vCalibrateCB(_tfCalibrateTemplate, NULL, NULL);
      else
	{
	  // Update the image file list widget

	  _cslImages->vDeleteAll();
	  _cslImages->vAddOtherList(wListWidget, m_poScan->sGetTemplate());
	  _cslImages->vSetSelection(nPosition);
	}
      m_sImageMask = sMask;
      m_sImageDir  = sFileGetDirectory(sMask);
    }
  else if (m_wpbFilterButton == _pbFileHeader)
    {
      // Re-filter ...

      _cslHeader->vDeleteAll();
      m_sHeaderDir = sFileGetDirectory(sMask);
      if (_cUIfileFilter->bDoSearch(sMask))
	_cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
      if ("" != sName)
	{
	  sName = sFileGetBasename(sName);
	  _cslHeader->vSetSelection(sName, True);
	}
    }
  else if (m_wpbFilterButton == _pbFileReflnlist)
    {
      _cslReflnlist->vDeleteAll();
      _cslReflnlist->vAddOtherList(wListWidget);
      m_sReflnlistDir  = sDir;
      m_sReflnlistMask = sMask;
      _cslReflnlist->vSetSelection(nPosition, True);
    }
  else if (   (m_wpbFilterButton == _pbFileLogfile)
	   || (m_wpbFilterButton == _pbViewLogfile) )
    {
      _cslLogfile->vDeleteAll();
      _cslLogfile->vAddOtherList(wListWidget);
      m_sLogfileDir  = sDir;
      m_sLogfileMask = sMask;
      _cslLogfile->vSetSelection(nPosition, True);
    }
  else if (m_wpbFilterButton == _pbFileOpen)
    {
      (void) nLoadHeader(sName, TRUE);
    }
  else if (m_wpbFilterButton == _pbFileSaveAs)
    {
      (void) nUpdateHeader(m_poHeader);
      m_poHeader->nWrite(sName);

      // Re-filter ...

      _cslHeader->vDeleteAll();
      if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
	_cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
      if ("" != sName)
	{
	  sName = sFileGetBasename(sName);
	  _cslHeader->vSetSelection(sName, True);
	}
    }
  else if (m_wpbFilterButton == _pbFileCD)
    {
      if (0 == nSetCWD(sDir))
	{
	  vPutMessage("Requested: " + sDir);
	  vPutMessage("Current working directory changed to " + sGetCWD());

	  // Set fileselectiondialog masks to use new CWD

	  m_sReflnlistMask = sGetCWD() + sFileGetBasename(m_sReflnlistMask);
	  m_sLogfileMask   = sGetCWD() + sFileGetBasename(m_sLogfileMask);
	  m_sHeaderMask    = sGetCWD() + sFileGetBasename(m_sHeaderMask);
	  m_sImageMask     = sGetCWD() + sFileGetBasename(m_sImageMask);
	}
      else
	{
	  vPutMessage("ERROR changing directory to " + sDir, 1);
	}
    }
  else if (m_wpbFilterButton == _pbFileMkdir)
    {
      if (0 == nFileCreateDirectory(sName))
	{
	  vPutMessage("Created: " + sName);
	  (void) nSetCWD(sName);

	  vPutMessage("Current working directory changed to " + sGetCWD());

	  // Set fileselectiondialog masks to use new CWD

	  m_sReflnlistMask = sGetCWD() + sFileGetBasename(m_sReflnlistMask);
	  m_sLogfileMask   = sGetCWD() + sFileGetBasename(m_sLogfileMask);
	  m_sHeaderMask    = sGetCWD() + sFileGetBasename(m_sHeaderMask);
//	  m_sImageMask     = sGetCWD() + sFileGetBasename(m_sImageMask);
	}
      else
	{
	  vPutMessage("ERROR creating directory " + sDir, 1);
	}
    }
  else if (m_wpbFilterButton == _pbCalibrateSpatialInterp)
    {
      m_sCalibrateSpatialDir  = sDir;
      m_sCalibrateSpatialName = sName;
      m_sCalibrateSpatialMask = sMask;
      XmTextFieldSetString(_tfCalibrateSpatialInterp, sNameSpecial.string());
      vCalibrateCB(_tfCalibrateSpatialInterp, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbCalibrateNonunfNonunf)
    {
      m_sCalibrateNonunfDir  = sDir;
      m_sCalibrateNonunfName = sName;
      m_sCalibrateNonunfMask = sMask;
      XmTextFieldSetString(_tfCalibrateNonunfNonunf, sNameSpecial.string());
      vCalibrateCB(_tfCalibrateNonunfNonunf, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbCalibrateNonunfDark)
    {
      m_sCalibrateDarkDir  = sDir;
      m_sCalibrateDarkName = sName;
      m_sCalibrateDarkMask = sMask;
      XmTextFieldSetString(_tfCalibrateNonunfDark, sNameSpecial.string());
      vCalibrateCB(_tfCalibrateNonunfDark, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbStrategyPredicted)
    {
      m_sStrategyPredictDir  = sDir;
      m_sStrategyPredictName = sName;
      m_sStrategyPredictMask = sMask;
      XmTextFieldSetString(_tfStrategyPredicted, sNameSpecial.string());
      vStrategyCB(_tfStrategyPredicted, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbStrategyPrevious)
    {
      m_sStrategyPreviousDir  = sDir;
      m_sStrategyPreviousName = sName;
      m_sStrategyPreviousMask = sMask;
      XmTextFieldSetString(_tfStrategyPrevious, sNameSpecial.string());
      vStrategyCB(_tfStrategyPrevious, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbMergeMergeFile)
    {
      m_sMergeMergeDir  = sDir;
      m_sMergeMergeName = sName;
      m_sMergeMergeMask = sMask;
      XmTextFieldSetString(_tfMergeMergeFile, sNameSpecial.string());
      vMergeCB(_tfMergeMergeFile, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbScaleMergeFile)
    {
      m_sScaleMergeDir  = sDir;
      m_sScaleMergeName = sName;
      m_sScaleMergeMask = sMask;
      XmTextFieldSetString(_tfScaleMergeFile, sNameSpecial.string());
      vScaleCB(_tfScaleMergeFile, NULL, NULL);
    }
  else if (m_wpbFilterButton == _pbScaleUnAvg)
    {
      m_sScaleUnavgDir  = sDir;
      m_sScaleUnavgName = sName;
      m_sScaleUnavgMask = sMask;
      XmTextFieldSetString(_tfScaleUnAvg, sNameSpecial.string());
      vScaleCB(_tfScaleUnAvg, NULL, NULL);
    }
}

void
MainWindow::vScrolledListCBCallback(XtPointer pObj,      // Pointer to object 
				  Widget wListWidget,
				  XtPointer callData)
{
  MainWindow *obj = (MainWindow *)pObj;
  obj->vScrolledListCB(pObj, wListWidget, callData);
}

void
MainWindow::vScrolledListCB(XtPointer pObj,           // Pointer to object 
			  Widget wListWidget, XtPointer callData)
{
//  vPutMessage("MainWindow scrolledlist callback called!");

  XmListCallbackStruct *pCBS = (XmListCallbackStruct *)callData;
  if (XmCR_SINGLE_SELECT == pCBS->reason)
    {
      if (wListWidget == _cslHeader->wGetListWidget())
	{
	  if (0 >= pCBS->item_position)
	    {
	      // No item selected

	      XtSetSensitive(m_wFCActive, False);
	    }
	  else
	    {
	      // We have selected a new header in the header list widget

	      m_poXcursor->vSetWait();

	      // Find out which header file is selected and try to determine
	      // the scan template from it

	      XtSetSensitive(m_wFCActive, True);

	      int      nStat;
	      Cstring  sTemp;

	      int      nNum;
	      Cstring *psItems;

	      psItems = NULL;
	      _cslHeader->vGetSelection(&nNum, &psItems);
	      m_sHeaderName = *psItems;
	      if (NULL != psItems)
		{
		  delete [] psItems;
		  psItems = NULL;
		}
	      if (sGetCWD() != m_sHeaderDir)
		m_sHeaderName = m_sHeaderDir + m_sHeaderName;

	      // Read image header of selected file
      
//	      cout << "Before nLoadHeader in Header scrolled list callback.\n";
	      nStat = nLoadHeader(m_sHeaderName);
	      if (0 != nStat)
		{
		  // WARNING

		  vPutMessage("WARNING with header file: " + m_sHeaderName
			      + ", probably missing some keywords.\n", 1);
		}
	      else
		{
		  // Update any header selection in the dialog

		  (this->*m_prvDialogCB)(m_wFCActive, NULL, NULL);

		  if (NULL != m_poScan)
		    delete m_poScan;
		  m_poScan = new Cscan(*m_poHeader);
		  vPutMessage("Scan template is: " + m_poScan->sGetTemplate());
		  sTemp = m_poScan->sGetTemplate();

		  Widget wListSearchWidget;
		  wListSearchWidget = _cUIfileFilter->wGetListWidget();
		  _cslImages->vDeleteAll();
		  if (_cUIfileFilter->bDoSearch(sTemp))
		    {
		      _cslImages->vAddOtherList(wListSearchWidget,
						m_poScan->sGetTemplate());
		      m_sImageDir  = sFileGetDirectory(sTemp);
		      m_sImageMask = sTemp;
		      XmUpdateDisplay(wListWidget);
		    }

		  // Check how many files are in the list

		  nStat = _cUIfileFilter->nGetItemCount();
		  if (0 >= nStat)
		    {
		      nStat = 0;
		      vPutMessage("No images match scan template!", 1);
		    }
		}
	      m_poXcursor->vRestore();

	      if ( (2 == m_nLogfileType) && XtIsManaged(_frLogfile) )
		{
		  // Load header file only
		  // if log file viewer is showing a header already and 
		  // is managed

		  vLogfileCB(_cslHeader->wGetListWidget(), NULL, NULL);
		}
	    }
	}
      else if (wListWidget == _cslReflnlist->wGetListWidget())
	{
	  // Get reflnlist file

	  int      nNum;
	  Cstring *psItems;

	  psItems = NULL;
	  _cslReflnlist->vGetSelection(&nNum, &psItems);
	  
	  if (0 < nNum)
	    {
	      if (   (m_wFCActive == _frIndex)
		  || (m_wFCActive == _frRefine)
		  || (m_wFCActive == _frScale)
		  || (m_wFCActive == _frMerge)
                 )
		{
		  XtSetSensitive(m_wFCActive, True);
		}
	      m_sReflnlistName = *psItems;
	      if (sGetCWD() != m_sReflnlistDir)
		m_sReflnlistName = m_sReflnlistDir + m_sReflnlistName;
	      (this->*m_prvDialogCB)(m_wFCActive, NULL, NULL);
	    }
	  if (NULL != psItems)
	    {
	      delete [] psItems;
	      psItems = NULL;
	    }
	}
      else if (wListWidget == _cslLogfile->wGetListWidget())
	{
	  vLogfileCB(wListWidget, callData, NULL);
	}
    }
  else if (XmCR_EXTENDED_SELECT == pCBS->reason)
    {
      int       i;
      Cstring *psItems;
      int      nNum;
      psItems = NULL;
      if (wListWidget == _cslImages->wGetListWidget())
	{
	  _cslImages->vGetSelection(&nNum, &psItems);
      
	  // Figure out selected start and ending sequence number

	  if (0 < nNum)
	    {
	      m_sImageName = psItems[0];
	      if (sGetCWD() != m_sImageDir)
		m_sImageName = m_sImageDir + m_sImageName;
	    }
	  if ( (0 < nNum) && (DTP_DLG_CALIBRATE == m_nFCActive) )
	    {
	      XmListDeselectAllItems(_cslHeader->wGetListWidget());
//	      cout << "before calling nLoadHeader() in Image vScrolledListCB\n";
	      (void) nLoadHeader(m_sImageName);
	    }

	  if ( (0 < nNum) && (NULL != m_poScan) )
	    {
	      if (m_poScan->bIsAvailable())
		{
		  int nTemp;
		  nTemp = m_poScan->nGetSeqNum(psItems[0]);
		  if (-9999 < nTemp)
		    m_a2nSeqNum[0] = nTemp;
		  nTemp = m_poScan->nGetSeqNum(psItems[nNum-1]);
		  if (-9999 < nTemp)
		    m_a2nSeqNum[1] = nTemp;
		  Cstring sSeqStart, sSeqEnd;
		  sSeqStart = (Cstring) m_a2nSeqNum[0];
		  sSeqEnd   = (Cstring) m_a2nSeqNum[1];

		  if (DTP_DLG_FIND == m_nFCActive)
		    {
		      XmTextFieldSetString(_tfFindSeqStart, sSeqStart.string());
		      XmTextFieldSetString(_tfFindSeqEnd, sSeqEnd.string());
		      if (1 < nNum)
			vFindCB(_cslImages->baseWidget(), (XtPointer) &nNum, (XtPointer)psItems);
		      else
			vFindCB(_tfFindSeqEnd, NULL, NULL);
		    }
		  else if (DTP_DLG_PREDICT == m_nFCActive)
		    {
		      XmTextFieldSetString(_tfPredictSeqStart, sSeqStart.string());
		      XmTextFieldSetString(_tfPredictSeqEnd, sSeqEnd.string());
		      vPredictCB(_tfPredictSeqEnd, NULL, NULL);
		    }
		  else if (DTP_DLG_REFINE == m_nFCActive)
		    {
/*
		      cout << "vScr, nNum, psItems: " << nNum << endl;
		      for (int jj = 0; jj < nNum; jj++)
			cout << ">>>" << psItems[jj] << "<<<\n" << flush;
*/

		      vRefineCB(_cslImages->baseWidget(), (XtPointer)&nNum, 
				                          (XtPointer)psItems);
		    }
		  else if (DTP_DLG_INTEGRATE == m_nFCActive)
		    {
		      XmTextFieldSetString(_tfIntegrateSeqStart, sSeqStart.string());
		      XmTextFieldSetString(_tfIntegrateSeqEnd, sSeqEnd.string());
//+JWP 24-Jul-1997
//-JWP 24-Jul-1997
		      vIntegrateCB(_tfIntegrateSeqEnd, NULL, NULL);
		    }
		  else if (DTP_DLG_SCALE == m_nFCActive)
		    vScaleCB(_tfScaleSigma, NULL, NULL);
		}
	    }
	}
      else if (wListWidget == _cslReflnlist->wGetListWidget())
	{
	  _cslReflnlist->vGetSelection(&nNum, &psItems);
	  m_tDtmergeOptions.sReflnlistNames = "";
	  Cstring sTemp;
	  sTemp = ' ';
	  if (sGetCWD() != m_sReflnlistDir)
	    sTemp = sTemp + m_sReflnlistDir;
	  if (0 < nNum)
	    XtSetSensitive(_frMerge, True);
	  for (i = 0; i < nNum; i++)
	    {
	      m_tDtmergeOptions.sReflnlistNames = m_tDtmergeOptions.sReflnlistNames
		                                  + sTemp + psItems[i];
	      vMergeCB(_tfMergeMergeFile, NULL, NULL);
	    }
	}
      if (NULL != psItems)
	{
	  delete [] psItems;
	  psItems = NULL;
	}
    }
}

void
MainWindow::vWorkProc1(XtPointer clientData, XtIntervalId* pId)
{
  MainWindow *poThis = (MainWindow *)clientData;
  static int s_nFlag = 0;

  // Perform display updates only every second or so
  // This routine is static, so you cannot use member variables in here
  // without using the 'this' pointer, too.  Thus we pass in the this
  // pointer as clientData.


//  poThis->vPutMessage("Work proc called!");

  Widget w;
  w = poThis->_mbProgress;

  // if (0 == nKillProcess(PID, 0)) // this would show sub
  if (bFileExists(sDtrekGetPrefix() + ms_sLockFile) || (0 == s_nFlag))
    {
      // s_nFlag makes sure this if branch is entered at least once.

      // Check size of log file, if the file does not exist, the size will be <0

      poThis->m_lLogfileSize = lFileGetSize(poThis->m_sLogFilename);
      if (   (0 < poThis->m_lLogfileSize)
	  && (poThis->m_lLogfileSize > poThis->m_lLogfileSizeShown) )
	{
	  // More of the log file is available so add it to the logfile viewer
	  // TODO

	  s_nFlag = 1;
	  poThis->vLogfileCB(NULL, NULL, NULL);
	}
      else if (0 > poThis->m_lLogfileSize)
	{
	  // Error getting logfile size
	  poThis->vPutMessage("ERROR getting log file size!", 1);
	  s_nFlag = 1;
	}

      // Devices still active so re-add timeout
      
      poThis->m_hIntervalId = XtAppAddTimeOut(poThis->m_hAppContext,
					      (unsigned long)800,
					      vWorkProc1, (XtPointer)poThis);

//      XmUpdateDisplay(poThis->_mbProgress);
    }
  else
    {
      // Lock file gone, so command must be done

      s_nFlag = 0;
      poThis->vCommandDone();
    }
}

void
MainWindow::vPutMessage(const char *pcMessage, const int nFlag)
{
  if (NULL != pcMessage)
    {
      Cstring sTemp;
      sTemp = pcMessage;
      XmTextInsert(_txOutput, XmTextGetLastPosition(_txOutput), sTemp.string());
      XmTextInsert(_txOutput, XmTextGetLastPosition(_txOutput), "\r\n");
      XmTextShowPosition(_txOutput, XmTextGetLastPosition(_txOutput));

    }
  // In addition, pop-up a message box if nFlag requests it!
   
//  if ( (0 != nFlag) && (NULL == m_poRemote) )
  if (0 != nFlag)
    {
      // Kill the timer if it is active, so we have a chance to click OK...
      
#ifdef MSVC
      if (0 != m_unTimerId)
        {
          KillTimer(m_unTimerId);
          m_unTimerId = 0;
        }
      MessageBox(pcMessage, "Dtcollect ERROR", MB_OK | MB_ICONEXCLAMATION);
#else
      if (0 != m_hIntervalId)
	{
	  XtRemoveTimeOut(m_hIntervalId);
	  m_hIntervalId = 0;
	}
      vPostError(_mbError, (XtPointer)pcMessage, (XtPointer) NULL);
#endif
    }
}


void
MainWindow::vPostError(Widget w, XtPointer clientData, XtPointer callData)
{
  // Post the message found in clientData to the widget w.
  // Widget w must be a messageBox widget

  if (XmIsMessageBox(w))
    {
      Cstring sMessage = (char *)clientData;
      Cstring sTemp;
      static Cstring ssSeparator = "$$";
      Boolean bTemp;
      if (sMessage.contains(ssSeparator))
	{
	  // Use the string before the separator as a resource and lookup
	  // what the error message translation should be.
	  // TO DO:  There may be several concatenated error strings
	  // in the input string.  All should be lookup!

	  sTemp = sMessage.before(ssSeparator);
	  String pcText;
	  String pcProgname;
	  XtGetApplicationNameAndClass(XtDisplay(w), &pcProgname, &pcText);
	  pcText = XGetDefault(XtDisplay(w), pcProgname,
			       ("error" + sTemp).string());
	  if (NULL != pcText)
	    {
	      // Ok, found a translation, so use it
	      sMessage = pcText;
	    }
	  else
	    {
	      // Did not find a translation so use the string after 
	      // the separator if it exists, otherwise use the input string

	      sTemp = sMessage.after(ssSeparator);
	      if ("" != sTemp)
		sMessage = sTemp;
	      else 
		sMessage = sMessage.before(ssSeparator);
	    }
	}
      
      // Set the messageString in the error dialog box to sMessage

      XmString xsString;
      xsString = (XmString)BX_CONVERT(w, sMessage.string(), XmRXmString,
				   0, &bTemp);
      XtVaSetValues(w, XmNmessageString, xsString, NULL);
      XmStringFree(xsString);

      if (NULL == callData)
	XBell(XtDisplay(w), 0);
      XtManageChild(w);
      XmUpdateDisplay(w);
    }
}

void
MainWindow::vCommandExecute(const Cstring& rsCommand, const int nInput)
{
  Cstring sTemp;
#define MAX_WORDS 100
  Cstring asWords[MAX_WORDS];  // Note: these are all init'd to ""
  int     nWords;
  int     nStat;
  int     i;
  bool    bMultiCommand;

  sTemp = rsCommand;

  bMultiCommand = (   sTemp.contains(';') || sTemp.contains("&&")
		   || sTemp.contains('|'));

  // Remove whitespace from beginning of command

  while (   (' '  == sTemp.GetAt(0))
	 || ('\t' == sTemp.GetAt(0)) )
    sTemp = sTemp.after(0);

  // Divid command line into words

  nWords = split(rsCommand, asWords, MAX_WORDS, " \t\n");

  vPutMessage("% " + rsCommand);

  if ("cd" == asWords[0])
    {
      nStat = nSetCWD(asWords[1]);
      if (0 == nStat)
	{
	  vPutMessage("Current working directory changed to " + sGetCWD());

	  // Set fileselectiondialog masks to use new CWD

	  m_sReflnlistMask = sGetCWD() + sFileGetBasename(m_sReflnlistMask);
	  m_sLogfileMask   = sGetCWD() + sFileGetBasename(m_sLogfileMask);
	  m_sHeaderMask    = sGetCWD() + sFileGetBasename(m_sHeaderMask);
	  m_sImageMask     = sGetCWD() + sFileGetBasename(m_sImageMask);
	}
      else
	{
	  vPutMessage("ERROR changing directory to " + asWords[1], 1);
	}
    }
  else if ("setenv" == asWords[0])
    {
      // Set the environment variable for this shell, not a subshell

      for (i = 3; i < nWords; i++)
	asWords[2] = asWords[2] + ' ' + asWords[i];
      nStat = nPutEnv(asWords[1], asWords[2]);
    }
  else if ("unsetenv" == asWords[0])
    {
      // Set the environment variable for this shell to an empty string
      // Then then internal d*TREK sGetEnv command will act like the environment
      // var is not set.
      
      nStat = nPutEnv(asWords[1], "");
    }
  else
    {
      // General command or from menu "Run" button

      if (0 == nInput)
	{
	  m_poXcursor->vSetWait();
	}
      else
	{
	  m_poXcursor->vSetFont(XC_clock, TRUE);
	}

      // Create/Write out a lock file

      if (NULL == m_poHeader)
	m_poHeader = new Cimage_header ();
      nStat = m_poHeader->nWrite(sDtrekGetPrefix() + ms_sLockFile);
      
      if (0 != nStat)
	{
	  vPutMessage("ERROR creating lock file!", 1);
	}

      //      if (m_bFCDialogRun)
	{
	  // Command from a menu "Run" button

	  m_sSubProcessCommand = rsCommand;
	  sTemp                = sDtrekGetPrefix() + asWords[0] + ".scom";
	  m_sLogFilename       = sDtrekGetPrefix() + asWords[0] + ".log";
	}
      /*
      else
	{
	  m_sSubProcessCommand = rsCommand;
	  sTemp                = sDtrekGetPrefix() + "dtprocess.scom";
	  m_sLogFilename       = sDtrekGetPrefix() + "dtprocess.log";
	}
      */

      (void) nFileAppendVersion(m_sLogFilename, TRUE);
      ofstream oOut(sTemp);
      oOut << "#!/bin/csh -f\n";
      if ("" != sDtrekGetPrefix())
	oOut << "setenv DTREK_PREFIX """ << sDtrekGetPrefix() << """\n";
      if (bMultiCommand)
	{
	  oOut << "( ";
	}
      oOut << rsCommand;
      if (bMultiCommand)
	{
	  oOut << " ) ";
	}
      oOut << " >& " << m_sLogFilename << '\n';
      oOut << "echo DTREK_STATUS: $status >> " << m_sLogFilename << '\n';
      oOut << "rm " << sDtrekGetPrefix() + ms_sLockFile << '\n';
      oOut.close();
      nDoSystemCommand("chmod a+x " + sTemp);
      if (0 != nInput)
	{
	  nDoSystemCommand("./" + sTemp, &m_pSubProcessStdIn);
	}
      else
	{
	  nDoSystemCommand("./" + sTemp + " &");
	}

      // For finding the subprocess id below

      if ("" != sDtrekGetPrefix())
	asWords[0] = sTemp.after(sDtrekGetPrefix());
      else
	asWords[0] = sTemp;   // For finding the subprocess id below

  /*******************
	}
      else
	{
	  // For commands from the tfCommand widget output to dtprocess.log
	  // and show in log file viewer

	  // sTemp is set to rsCommand above

	  if (bMultiCommand)
	    {
	      sTemp = Cstring("( ") + rsCommand + " ) ";
	    }

	  m_sLogFilename       = sDtrekGetPrefix() + "dtprocess.log";
	  (void) nFileAppendVersion(m_sLogFilename, TRUE);
	  m_sSubProcessCommand = "( " + sTemp + " 1> " + m_sLogFilename
	                              + " 2>&1 "
	                       + "; rm " + sDtrekGetPrefix() + ms_sLockFile + ") &";
	  if (0 != nInput)
	    {
	      cout << "Am_pSubProcessStdIn: " << m_pSubProcessStdIn << endl;
	      nDoSystemCommand(m_sSubProcessCommand, &m_pSubProcessStdIn);
	      cout << "Bm_pSubProcessStdIn: " << m_pSubProcessStdIn << endl;
	    }
	  else
	    nDoSystemCommand(m_sSubProcessCommand);
	}
  **************/

      // Initialize viewing of the logfile in the viewer

      m_lLogfileSize      = 0;
      m_lLogfileSizeShown = 0;

      // Get PID of subcommand

      int   nTry = 0;
      int   nPPID;

      Cstring sTempFile;
      Cstring sTemp2;

      bool bDebug;
      bDebug = ("" != sGetEnv(Cstring("DTPROCESS_DEBUG")));

      m_nSubProcessPID = 0;
      sTemp2 = asWords[0].before(6);
	     
      while (   (0 == m_nSubProcessPID)
	     && (10 > nTry) 
	     && bFileExists(sDtrekGetPrefix() + ms_sLockFile))
	{
	  // TODO set the try to be dependent on elapsed time;

	  nTry++;
	  sTempFile = sFileGetTempName(".", "DTPRO");
	  if ("" == sTempFile)
	    {
	      vPutMessage("ERROR getting temporary filename!", 1);
	      return;
	    }
      
	  // Get PID of process whose PPID is not 1 and has same TTY
	  // as this process.  First get TTY of this process
	  
	  // Right now, this ALL depends on the OS.  The following is for IRIX.
	  
	  int     nPosPID, nPosPPID, nPosCOMD, nPosOther;
	  Cstring sCommandPS;

#if defined(LINUX)
	  sCommandPS = "ps al";
	  nPosPID   = 2;
	  nPosPPID  = 3;
	  nPosCOMD  = 11;
	  nPosOther = nPosCOMD + 1;
#elif defined(OSX)
	  sCommandPS = "ps al";
	  nPosPID   = 1;
	  nPosPPID  = 2;
	  nPosCOMD  = 12;
	  nPosOther = nPosCOMD + 1;
#else
	  sCommandPS = "ps -af";
	  nPosPID   = 1;
	  nPosPPID  = 2;
	  nPosCOMD  = 7;
	  nPosOther = nPosCOMD + 2;
#endif
	  sTemp = sCommandPS + " | grep " + sTemp2 + " > " + sTempFile;
	  nDoSystemCommand(sTemp);
	  
	  if (bDebug)
	    cout << "Did system command >>>" << sTemp << "<<<" << endl << flush;
	  ifstream oIn(sTempFile);
	  if ((oIn.rdbuf()->is_open())) 
	    {
	      while ( (0 == m_nSubProcessPID) && (!oIn.eof()) )
		{
		  getline(oIn, sTemp);
		  if (!oIn.eof())
		    {
		      asWords[nPosCOMD]  = "";
		      asWords[nPosOther] = "";
		      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
		      if (sTemp.contains("csh -f"))
			{
			  asWords[nPosCOMD] = sTemp.after("csh -f ");
			}
		      if (bDebug)
			cout << sTemp << '\n' 
			     << nTry << ": " << asWords[nPosPPID] 
			     << ' ' << asWords[nPosCOMD] << "  2: " 
			     << sTemp2 << '\n' << flush;

		      if (   (1 < atoi(asWords[nPosPPID].string()))
			  && (   (sTemp2 == asWords[nPosCOMD].before(6))
			      || (sTemp2 == asWords[nPosOther].before(6)) ) )
			m_nSubProcessPID = atoi(asWords[nPosPID].string());
		      if (bDebug)
			cout << "Found PID: " << m_nSubProcessPID << endl << flush;
		    }
		}
	      oIn.close();
	    }
	  if (!bDebug)
	    nFileDelete(sTempFile);
	  if (0 == m_nSubProcessPID)
	    {
	      // Problem if subprocess finishes in less than a second?!

	      nDoSystemCommand("sleep 1");
	    }

	  // Start viewing of logfile here.  This is useful since getting
	  // the PID of the actual command may take awhile.
	  // Danger: if overwrite is ON, then may show old logfile.

	  m_lLogfileSize = lFileGetSize(m_sLogFilename);
	  vLogfileCB(NULL, NULL, NULL);
	}

      if (0 == m_nSubProcessPID)
	{
	  vPutMessage("WARNING getting subshell PID!\nNo abort possible!\n"
                      "Not to worry, perhaps your job ran too fast for me.\n", 
		      1);
	}

      // Set the messageString in the progress dialog box

      Boolean bTemp;
      XmString xsString;

      sTemp    = "Command in progress:\r\n" + rsCommand;
      xsString = (XmString)BX_CONVERT(_mbProgress, sTemp.string(), XmRXmString,
				   0, &bTemp);
      XtVaSetValues(_mbProgress, XmNmessageString, xsString, NULL);
      XmStringFree(xsString);

      // Change keyboard focus away from the button or command line,
      // so that folks who press the spacebar after a screensaver kicks in
      // do not start another command accidently

      XmProcessTraversal(_tfLogfileSearch, XmTRAVERSE_CURRENT);

     // Start the work proc to check when subshell is finished

      vWorkProc1(this, NULL);
    }
}

void
MainWindow::vUpdateFlowChart(Widget w)
{
  vSetLabel(m_wpbFlowChart, NULL, "?");
  vSetLabel(w, NULL, "yellow");
  m_wpbFlowChart = w;
  Widget wCallWidget;

  wCallWidget = w;
  if (w == _pbMerge)
    {
      _cslReflnlist->set_lilist_selectionPolicy((XtPointer)XmEXTENDED_SELECT);
    }
  else
    {
      _cslReflnlist->set_lilist_selectionPolicy((XtPointer)XmSINGLE_SELECT);
    }
  if (w == _pbFind)
    {
      m_prvDialogCB = &MainWindow::vFindCB;
    }
  else if (w == _pbIndex)
    {
      m_prvDialogCB = &MainWindow::vIndexCB;
    }
  else if (w == _pbRefine)
    {
      m_prvDialogCB = &MainWindow::vRefineCB;
    }
  else if (w == _pbPredict)
    {
      m_prvDialogCB = &MainWindow::vPredictCB;
      if (m_tDtpredictOptions.bSeqOrRot)
	wCallWidget = _tfPredictRotStart;
      else
	wCallWidget = _tfPredictSeqStart;
    }
  else if (w == _pbIntegrate)
    {
      m_prvDialogCB = &MainWindow::vIntegrateCB;
    }
  else if (w == _pbScale)
    {
      m_prvDialogCB = &MainWindow::vScaleCB;
    }
  else if (w == _pbMerge)
    {
      m_prvDialogCB = &MainWindow::vMergeCB;
    }
  else if (w == _pbOrient)
    {
      m_prvDialogCB = &MainWindow::vOrientCB;
    }
  else if (w == _pbStrategy)
    {
      m_prvDialogCB = &MainWindow::vStrategyCB;
    }
  else if (w == _pbCalibrate)
    {
      m_prvDialogCB = &MainWindow::vCalibrateCB;
    }
  else
    {
      m_prvDialogCB = &MainWindow::vEditClearCB;
      wCallWidget   = _pbEditClearCommand;
    }
  (this->*m_prvDialogCB)(wCallWidget, NULL, NULL);  
}


void
MainWindow::vDrawInFlowChart(Widget w)
{
  // Draw a simple figure in the drawing area of the flowchart (_daFlowchart)
  // that helps indicates which flowchart mode is currently active

  // TODO: The _omMode widget could have different colors for the different
  //       possible modes.  The figure in the drawing area could use the
  //       color of the _omMode to help users match mode with path through
  //       the flow chart.

    unsigned long ulBackground;

    XtVaGetValues(_daFlowchart, XmNbackground, &ulBackground, NULL);
    if (NULL == m_hGC)
      {
	m_hGCValues.foreground = ulBackground;
	m_hGCValues.background = WhitePixel(XtDisplay(w),
					    DefaultScreen(XtDisplay(w)));
    
	m_hGC     = XCreateGC(XtDisplay(w),
			      DefaultRootWindow(XtDisplay(w)),
			      GCForeground | GCBackground, &m_hGCValues);
      }

    Dimension     nWidth, nHeight, nHeightB;
    XtVaGetValues(_daFlowchart, XmNwidth, &nWidth, XmNheight, &nHeight, NULL);
    if (0 == m_hPixmap)
      {
	m_hPixmap = XCreatePixmap( XtDisplay(_daFlowchart), 
				  DefaultRootWindow(XtDisplay(w)),
				  nWidth, nHeight,
				  DefaultDepthOfScreen(XtScreen(w)));
      }

    // Fill whole drawing area with correct background

    m_hGCValues.foreground = ulBackground;
    XChangeGC(XtDisplay(w), m_hGC, GCForeground, &m_hGCValues);
    XFillRectangle(XtDisplay(w), m_hPixmap, m_hGC, 0, 0, nWidth, nHeight);

    // Compute vertices of triangle/arrow

    if (3 != _cUIomMode->nGetValue())
      {
	XtVaGetValues(_pbScale, XmNy, &nHeightB, NULL);
	m_hPoints[0].x = nWidth/4;
	m_hPoints[0].y = 0;
	m_hPoints[1].x = nWidth/2;
	m_hPoints[1].y = nHeightB;
	m_hPoints[2].x = nWidth - nWidth/4;
	m_hPoints[2].y = 0;
      }
    else
      {
	XtVaGetValues(_pbStrategy, XmNy, &nHeightB, NULL);
	m_hPoints[0].x = nWidth/4;
	m_hPoints[0].y = 0;
	m_hPoints[1].x = nWidth - nWidth/4;
	m_hPoints[1].y = nHeightB;
	m_hPoints[2].x = nWidth - nWidth/4;
	m_hPoints[2].y = 0;
      }

    // Draw triangle/arrow in the color of the mode button

    XtVaGetValues(_cUIomMode->omWidget(), XmNbackground, &ulBackground, NULL);
    XSetForeground( XtDisplay(w), m_hGC, ulBackground);

    XFillPolygon(XtDisplay(w), m_hPixmap, m_hGC, m_hPoints, 3, Convex,
		 CoordModeOrigin);

    // Draw in "black" outline to the triangle/arrow

    XSetForeground( XtDisplay(w), m_hGC, BlackPixel(XtDisplay(w),
					DefaultScreen(XtDisplay(w))));
    XDrawLine(XtDisplay(_daFlowchart), m_hPixmap, m_hGC,
	      m_hPoints[0].x, m_hPoints[0].y, m_hPoints[1].x, m_hPoints[1].y);
    XDrawLine(XtDisplay(_daFlowchart), m_hPixmap, m_hGC,
	      m_hPoints[1].x, m_hPoints[1].y, m_hPoints[2].x, m_hPoints[2].y);

    XCopyArea (XtDisplay(_daFlowchart), m_hPixmap, XtWindow(_daFlowchart), 
	       m_hGC, 
	       0, 0,
	       nWidth, nHeight,
	       0, 0);
}

void
MainWindow::vSetLabel(Widget w, char *pcNewText, char *pcNewColor)
{
  // Change the label of the widget label input as w to the
  // text specified in pcNewText

  static Arg  arg[1];                         // Make static so no malloc, free
  static Boolean  argok;                      // 
  if (NULL != pcNewText)
    {
      XmString xsString;
      xsString =  (XmString)BX_CONVERT(w, pcNewText, XmRXmString, 0, &argok);
      XtSetArg(arg[0], XmNlabelString, xsString);
      if (argok) 
	XtSetValues(w, arg, 1);
      XmStringFree(xsString);
    }

  if (NULL != pcNewColor)
    {
      Pixel hBackground;
      if ('?' == *pcNewColor)   // Flag to set to background of parent
	{
	  XtVaGetValues(XtParent(w), XmNbackground, &hBackground, NULL);
	  argok = TRUE;
	}
      else
	{
	  hBackground = (Pixel) BX_CONVERT(w, pcNewColor, XmRPixel, 0, &argok);
	}
      if (argok)
	{
#if (XmVersion >= 1002)
	  XmChangeColor(w, hBackground);
#else
	  XtVaSetValues(w, XmNbackground, hBackground, NULL);
#endif
	}
    }
}

int
MainWindow::nInitValues(Cimage_header& roHeader)
{
  Cstring sTemp;
  int     nStat;
#define MAX_WORDS 100
  Cstring asWords[MAX_WORDS];  // Note: these are all init'd to ""
  int     nWords;

  if (!roHeader.bIsAvailable())
    {
      nStat = -1;
      return (nStat);
    }
  if (NULL == m_poHeader)
    m_poHeader = new Cimage_header ();

  *m_poHeader = roHeader;
  
  nStat = roHeader.nGetValue(ms_sSetupOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sSetupOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (3 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sSetupOptions 
		      + " values in header!");
	}
      else
	{
	  m_tDtcalibrateOptions.sSpacegroup = asWords[0];
	  XmTextFieldSetString(_tfCalibrateSpacegroup,  asWords[0].string());
	  m_tDtcalibrateOptions.sReso1   = asWords[1];
	  XmTextFieldSetString(_tfCalibrateResolution1, asWords[1].string());
	  m_tDtcalibrateOptions.sReso2   = asWords[2];
	  XmTextFieldSetString(_tfCalibrateResolution2, asWords[2].string());
	}
    }

  nStat = roHeader.nGetValue(ms_sDtfindOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtfindOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (23 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtfindOptions 
		      + " values in header!");
	}
      else
	{
	  int nAC = 0;
	  m_tDtfindOptions.a2sSeqNum[0]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindSeqStart, asWords[nAC++].string());
	  m_tDtfindOptions.a2sSeqNum[1]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindSeqEnd, asWords[nAC++].string());
	  m_tDtfindOptions.sSigma         = asWords[nAC];
	  XmTextFieldSetString(_tfFindSigma, asWords[nAC++].string());
	  m_tDtfindOptions.sMinimum       = asWords[nAC];
	  XmTextFieldSetString(_tfFindMin, asWords[nAC++].string());
	  m_tDtfindOptions.sPeakFilter    = asWords[nAC];
	  XmTextFieldSetString(_tfFindFilter, asWords[nAC++].string());
	  m_tDtfindOptions.a2sWindow[0]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindWindow1, asWords[nAC++].string());
	  m_tDtfindOptions.a2sWindow[1]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindWindow2, asWords[nAC++].string());

	  //m_tDtfindOptions.sPad3D         = asWords[nAC];
	  //XmTextFieldSetString(_tfFindPadding, asWords[nAC++].string());
	  
	  m_tDtfindOptions.a2sBackRect[0] = asWords[nAC];
	  XmTextFieldSetString(_tfFindBackRect1, asWords[nAC++].string());
	  m_tDtfindOptions.a2sBackRect[1] = asWords[nAC];
	  XmTextFieldSetString(_tfFindBackRect2, asWords[nAC++].string());
	  m_tDtfindOptions.a4sCircle[0]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindCircle1, asWords[nAC++].string());
	  m_tDtfindOptions.a4sCircle[1]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindCircle2, asWords[nAC++].string());
	  m_tDtfindOptions.a4sCircle[2]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindCircle3, asWords[nAC++].string());
	  m_tDtfindOptions.a4sCircle[3]   = asWords[nAC];
	  XmTextFieldSetString(_tfFindCircle4, asWords[nAC++].string());
	  m_tDtfindOptions.a4sRect[0]     = asWords[nAC];
	  XmTextFieldSetString(_tfFindRect1, asWords[nAC++].string());
	  m_tDtfindOptions.a4sRect[1]     = asWords[nAC];
	  XmTextFieldSetString(_tfFindRect2, asWords[nAC++].string());
	  m_tDtfindOptions.a4sRect[2]     = asWords[nAC];
	  XmTextFieldSetString(_tfFindRect3, asWords[nAC++].string());
	  m_tDtfindOptions.a4sRect[3]     = asWords[nAC];
	  XmTextFieldSetString(_tfFindRect4, asWords[nAC++].string());
	  m_tDtfindOptions.sDumpRefln     = asWords[nAC];
	  XmTextFieldSetString(_tfFindDump, asWords[nAC++].string());
	  m_tDtfindOptions.b3Dsearch      = (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbFind3D, m_tDtfindOptions.b3Dsearch, False);
	  m_tDtfindOptions.bDisplay       = (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbFindDisplay, m_tDtfindOptions.bDisplay, True);
	  m_tDtfindOptions.bShowMore       = (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbFindMore, m_tDtfindOptions.bShowMore, True);

          m_tDtfindOptions.sReso1       = asWords[nAC];
	  XmTextFieldSetString(_tfFindResolution1, asWords[nAC++].string());
          m_tDtfindOptions.sReso2       = asWords[nAC];
	  XmTextFieldSetString(_tfFindResolution2, asWords[nAC++].string());
	}
    }
  nStat = roHeader.nGetValue(ms_sDtindexOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtindexOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (20 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtindexOptions 
		      + " values in header!");
	}
      else
	{
	  m_tDtindexOptions.sMaxDiffs    = asWords[0];
	  XmTextFieldSetString(_tfIndexMaxDiffs, asWords[0].string());
          m_tDtindexOptions.sMaxCell     = asWords[1];
	  XmTextFieldSetString(_tfIndexMaxCell, asWords[1].string());
          m_tDtindexOptions.sGrid        = asWords[2];
	  XmTextFieldSetString(_tfIndexGrid, asWords[2].string());
          m_tDtindexOptions.sMaxResid    = asWords[3];
	  XmTextFieldSetString(_tfIndexMaxResid, asWords[3].string());
          m_tDtindexOptions.a6sErrors[0] = asWords[4];
	  XmTextFieldSetString(_tfIndexErrorLength1, asWords[4].string());
          m_tDtindexOptions.a6sErrors[1] = asWords[5];
	  XmTextFieldSetString(_tfIndexErrorLength1, asWords[5].string());
          m_tDtindexOptions.a6sErrors[2] = asWords[6];
	  XmTextFieldSetString(_tfIndexErrorLength1, asWords[6].string());
          m_tDtindexOptions.a6sErrors[3] = asWords[7];
	  XmTextFieldSetString(_tfIndexErrorAngle1, asWords[7].string());
          m_tDtindexOptions.a6sErrors[4] = asWords[8];
	  XmTextFieldSetString(_tfIndexErrorAngle2, asWords[8].string());
          m_tDtindexOptions.a6sErrors[5] = asWords[9];
	  XmTextFieldSetString(_tfIndexErrorAngle3, asWords[9].string());

          m_tDtindexOptions.sSpacegroup  = asWords[10];
	  XmTextFieldSetString(_tfIndexSpacegroup, asWords[10].string());

	  m_tDtindexOptions.sMethod      = asWords[11];
	  m_nIndexMethod                 = atoi(asWords[11].string());
	  _omIndexMethod->vSetValue(m_nIndexMethod);
	  vIndexCB(_omIndexMethod->baseWidget(), (XtPointer)m_nIndexMethod, NULL);

          m_tDtindexOptions.bDiffs    =  (0 != atoi(asWords[12].string()));
	  XmToggleButtonSetState(_tbIndexDiffs,
				 m_tDtindexOptions.bDiffs, False);
          m_tDtindexOptions.bList     =  (0 != atoi(asWords[13].string()));
	  XmToggleButtonSetState(_tbIndexList,
				 m_tDtindexOptions.bList, False);
          m_tDtindexOptions.bKnown       =  (0 != atoi(asWords[14].string()));
	  XmToggleButtonSetState(_tbIndexKnown,
				 m_tDtindexOptions.bKnown, False);
          m_tDtindexOptions.bPrompt      =  (0 != atoi(asWords[15].string()));
	  XmToggleButtonSetState(_tbIndexPrompt,
				 m_tDtindexOptions.bPrompt, True);
          m_tDtindexOptions.bAdvanced    =  (0 != atoi(asWords[16].string()));
	  XmToggleButtonSetState(_tbIndexAdvanced,
				 m_tDtindexOptions.bAdvanced, True);

          m_tDtindexOptions.sReso1       = asWords[17];
	  XmTextFieldSetString(_tfIndexResolution1, asWords[17].string());
          m_tDtindexOptions.sReso2       = asWords[18];
	  XmTextFieldSetString(_tfIndexResolution2, asWords[18].string());
          m_tDtindexOptions.sSigma       = asWords[19];
	  XmTextFieldSetString(_tfIndexSigma, asWords[19].string());

	}
    }

  for (int i = 1; i < DTP_MAX_REFINE_MACROS; i++)
    {
      nStat = roHeader.nGetValue(ms_sDtrefineMacro[i], &sTemp);
      if (0 == nStat)
	{
	  m_tDtrefineOptions.sRefineMacro[i] = sTemp;

	  // Re-initialize custom macro name if -name appears in macro string

	  if (sTemp.contains("-name "))
	    {
	      sTemp = sTemp.after("-name ");
	      _cUIom9RefineMacros->vSetButtonLabel(i, sTemp.string());
	    }
	}
    }

  // Load up Refine/Interactive toggle button labels

  sTemp = "";
  nStat = roHeader.nGetValue(D_K_DetectorNames, &sTemp);
  if (0 == nStat)
    {
      nStat = roHeader.nGetValue(sTemp+Cstring(D_K_GonioNames), 6, asWords);
      if (0 == nStat)
	{
	  vPutMessage("INFO re-labelling Refine Interactive menu toggle buttons."); 

	  vSetLabel(_tbRefineDetRot1,   asWords[0].string(), "?");
	  vSetLabel(_tbRefineDetRot2,   asWords[1].string(), "?");
	  vSetLabel(_tbRefineDetRot3,   asWords[2].string(), "?");
	  vSetLabel(_tbRefineDetTrans1, asWords[3].string(), "?");
	  vSetLabel(_tbRefineDetTrans2, asWords[4].string(), "?");
	  vSetLabel(_tbRefineDetTrans3, asWords[5].string(), "?");

	  // Get the color of toggle button, then set color of others

	  Pixel hColor;
	  XtVaGetValues(_tbRefineDetTrans, XmNselectColor, &hColor, NULL);
	  XtVaSetValues(_tbRefineDetTrans1, XmNselectColor, hColor, NULL);
	  XtVaSetValues(_tbRefineDetTrans2, XmNselectColor, hColor, NULL);
	  XtVaSetValues(_tbRefineDetTrans3, XmNselectColor, hColor, NULL);
	  XtVaSetValues(_tbRefineDetRot1, XmNselectColor, hColor, NULL);
	  XtVaSetValues(_tbRefineDetRot2, XmNselectColor, hColor, NULL);
	  XtVaSetValues(_tbRefineDetRot3, XmNselectColor, hColor, NULL);
	}
    }

  nStat = roHeader.nGetValue(ms_sDtrefineOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtrefineOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (40 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtrefineOptions 
		      + " values in header: " + Cstring(nWords));
	}
      else
	{
	  int nAC = 0;
	  m_tDtrefineOptions.sSigma       = asWords[nAC];
	  XmTextFieldSetString(_tfRefineSigma, asWords[nAC++].string());
          m_tDtrefineOptions.sReso1       = asWords[nAC];
	  XmTextFieldSetString(_tfRefineResolution1, asWords[nAC++].string());
          m_tDtrefineOptions.sReso2       = asWords[nAC];
	  XmTextFieldSetString(_tfRefineResolution2, asWords[nAC++].string());
          m_tDtrefineOptions.a3sReject[0] = asWords[nAC]; //3
	  XmTextFieldSetString(_tfRefineReject1, asWords[nAC++].string());
          m_tDtrefineOptions.a3sReject[1] = asWords[nAC];
	  XmTextFieldSetString(_tfRefineReject2, asWords[nAC++].string());
          m_tDtrefineOptions.a3sReject[2] = asWords[nAC];
	  XmTextFieldSetString(_tfRefineReject3, asWords[nAC++].string());
	  m_tDtrefineOptions.sCycles      = asWords[nAC]; // 6
	  XmTextFieldSetString(_tfRefineCycles, asWords[nAC++].string());

	  //m_tDtrefineOptions.sRelWeight   = asWords[nAC];
	  //XmTextFieldSetString(_tfRefineRelWeight, asWords[nAC++].string());

          m_tDtrefineOptions.a15bCrystal[0] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalAstar,
				 m_tDtrefineOptions.a15bCrystal[0], False);
          m_tDtrefineOptions.a15bCrystal[1] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalBstar,
				 m_tDtrefineOptions.a15bCrystal[1], False);
          m_tDtrefineOptions.a15bCrystal[2] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalCstar,
				 m_tDtrefineOptions.a15bCrystal[2], False);
          m_tDtrefineOptions.a15bCrystal[3] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalAlphastar,
				 m_tDtrefineOptions.a15bCrystal[3], False);
          m_tDtrefineOptions.a15bCrystal[4] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalBetastar,
				 m_tDtrefineOptions.a15bCrystal[4], False);
          m_tDtrefineOptions.a15bCrystal[5] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalGammastar,
				 m_tDtrefineOptions.a15bCrystal[5], False);
          m_tDtrefineOptions.a15bCrystal[6] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalRot1,
				 m_tDtrefineOptions.a15bCrystal[6], False);
          m_tDtrefineOptions.a15bCrystal[7] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalRot2,
				 m_tDtrefineOptions.a15bCrystal[7], False);
          m_tDtrefineOptions.a15bCrystal[8] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalRot3,
				 m_tDtrefineOptions.a15bCrystal[8], False);
          m_tDtrefineOptions.a15bCrystal[9] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalMosaicity,
				 m_tDtrefineOptions.a15bCrystal[9], False);
          m_tDtrefineOptions.a15bCrystal[10] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalRots,
				 m_tDtrefineOptions.a15bCrystal[10], False);
          m_tDtrefineOptions.a15bCrystal[11] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalLengths,
				 m_tDtrefineOptions.a15bCrystal[11], False);
          m_tDtrefineOptions.a15bCrystal[12] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalAngles,
				 m_tDtrefineOptions.a15bCrystal[12], False);
          m_tDtrefineOptions.a15bCrystal[13] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalCell,
				 m_tDtrefineOptions.a15bCrystal[13], False);
          m_tDtrefineOptions.a15bCrystal[14] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineCrystalAll,
				 m_tDtrefineOptions.a15bCrystal[14], False);

          m_tDtrefineOptions.a9bDetector[0] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetTrans1,
				 m_tDtrefineOptions.a9bDetector[0], False);
          m_tDtrefineOptions.a9bDetector[1] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetTrans2,
				 m_tDtrefineOptions.a9bDetector[1], False);
          m_tDtrefineOptions.a9bDetector[2] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetTrans3,
				 m_tDtrefineOptions.a9bDetector[2], False);
          m_tDtrefineOptions.a9bDetector[3] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetRot1,
				 m_tDtrefineOptions.a9bDetector[3], False);
          m_tDtrefineOptions.a9bDetector[4] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetRot2,
				 m_tDtrefineOptions.a9bDetector[4], False);
          m_tDtrefineOptions.a9bDetector[5] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetRot3,
				 m_tDtrefineOptions.a9bDetector[5], False);
          m_tDtrefineOptions.a9bDetector[6] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetTrans,
				 m_tDtrefineOptions.a9bDetector[6], False);
          m_tDtrefineOptions.a9bDetector[7] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetRots,
				 m_tDtrefineOptions.a9bDetector[7], False);
          m_tDtrefineOptions.a9bDetector[8] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDetAll,
				 m_tDtrefineOptions.a9bDetector[8], False);

          m_tDtrefineOptions.a4bSource[0] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineSourceRot1,
				 m_tDtrefineOptions.a4bSource[0], False);
          m_tDtrefineOptions.a4bSource[1] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineSourceRot2,
				 m_tDtrefineOptions.a4bSource[1], False);
          m_tDtrefineOptions.a4bSource[2] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineSourceRots,
				 m_tDtrefineOptions.a4bSource[2], False);
          m_tDtrefineOptions.a4bSource[3] =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineSourceWavelength,
				 m_tDtrefineOptions.a4bSource[3], False);
          m_tDtrefineOptions.bDisplay     =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefineDisplay,
				 m_tDtrefineOptions.bDisplay, True);

          m_tDtrefineOptions.bPrompt      =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbRefinePrompt,
				 m_tDtrefineOptions.bPrompt, True);

	  m_tDtrefineOptions.sRefineMacroNum = asWords[nAC].string();
	  m_nRefineMacro  = atoi(asWords[nAC++].string());
	  _cUIom9RefineMacros->vSetValue(m_nRefineMacro);

	  m_tDtrefineOptions.sRefineRefln = asWords[nAC].string();
	  _cUIom9RefineRefln->vSetValue(atoi(asWords[nAC++].string()));

	  m_tDtrefineOptions.sRefineSeq = asWords[nAC].string();
	  vRefineCB(_cUIom9RefineMacros->baseWidget(), (XtPointer)m_nRefineMacro,
		    NULL);
	}
    }

  nStat = roHeader.nGetValue(ms_sDtpredictOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtpredictOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (10 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtpredictOptions 
		      + " values in header!");
	}
      else
	{
	  m_tDtpredictOptions.a2sSeqNum[0]    = asWords[0];
	  XmTextFieldSetString(_tfPredictSeqStart, asWords[0].string());
	  m_tDtpredictOptions.a2sSeqNum[1]    = asWords[1];
	  XmTextFieldSetString(_tfPredictSeqEnd, asWords[1].string());
	  m_tDtpredictOptions.sReso1          = asWords[2];
	  XmTextFieldSetString(_tfPredictResolution1, asWords[2].string());
	  m_tDtpredictOptions.sReso2          = asWords[3];
	  XmTextFieldSetString(_tfPredictResolution2, asWords[3].string());
	  m_tDtpredictOptions.a2sRotRange[0]  = asWords[4];
	  XmTextFieldSetString(_tfPredictRotStart, asWords[4].string());
	  m_tDtpredictOptions.a2sRotRange[1]  = asWords[5];
	  XmTextFieldSetString(_tfPredictRotEnd, asWords[5].string());
	  m_tDtpredictOptions.sMosaicity  = asWords[6];
	  XmTextFieldSetString(_tfPredictMosaicity, asWords[6].string());
          m_tDtpredictOptions.bList     =  (0 != atoi(asWords[7].string()));
	  XmToggleButtonSetState(_tbPredictList,
				 m_tDtpredictOptions.bList, False);
          m_tDtpredictOptions.bNonunf    =  (0 != atoi(asWords[8].string()));
	  XmToggleButtonSetState(_tbPredictNonunf,
				 m_tDtpredictOptions.bNonunf, False);
          m_tDtpredictOptions.bDisplay     =  (0 != atoi(asWords[9].string()));
	  XmToggleButtonSetState(_tbPredictDisplay,
				 m_tDtpredictOptions.bDisplay, True);

	  // Make sure sequence has precedence over rotation angle

	  vPredictCB(_tfPredictSeqStart, NULL, NULL);
	  m_tDtpredictOptions.bSeqOrRot = FALSE;
	}
    }
  nStat = roHeader.nGetValue(ms_sDtintegrateOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtintegrateOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
//DTP_DTINTEGRATE_OPTIONS=1 2 3 4 5 6 7 8 9 10 50 7  11 12 130 0 2 0 0 0 0 0 0 1;
      if (24 != nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtintegrateOptions 
		      + " values in header!");
	}
      else
	{
	  //+2009-11-03 JWP: TODO fix this up and watch out for commas as well

	  int nAC = 0;
	  m_tDtintegrateOptions.a2sSeqNum[0]    = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateSeqStart, asWords[nAC++].string());
	  m_tDtintegrateOptions.a2sSeqNum[1]    = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateSeqEnd, asWords[nAC++].string());
	  m_tDtintegrateOptions.sReso1          = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateResolution1, asWords[nAC++].string());
	  m_tDtintegrateOptions.sReso2          = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateResolution2, asWords[nAC++].string());
	  m_tDtintegrateOptions.a2sWindow[0]    = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateWindow1, asWords[nAC++].string());
	  m_tDtintegrateOptions.a2sWindow[1]    = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateWindow2, asWords[nAC++].string());

	  // The sPad3D field contains 3 options now: pad mosmul mosadd
	  // They must be combined this way so the order is certain:
	  m_tDtintegrateOptions.sPad3D = asWords[nAC++] + ' '; 
	  m_tDtintegrateOptions.sPad3D = m_tDtintegrateOptions.sPad3D 
                                         + asWords[nAC++] + ' '; 
	  m_tDtintegrateOptions.sPad3D = m_tDtintegrateOptions.sPad3D 
                                         + asWords[nAC++];

	  XmTextFieldSetString(_tfIntegratePadding, 
			       m_tDtintegrateOptions.sPad3D.string());

	    // a2sProfSize[0] contains images per refine batch
	  m_tDtintegrateOptions.a2sProfSize[0]    = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateProfSize1, asWords[nAC++].string());
	  // a2sProfSize[1] is hidden and contains 2 words
	  // They must be combined this way so the order is certain:
	  m_tDtintegrateOptions.a2sProfSize[1]    = asWords[nAC++] + ' ';
	  m_tDtintegrateOptions.a2sProfSize[1]    += asWords[nAC++];

	  XmTextFieldSetString(_tfIntegrateProfSize2, m_tDtintegrateOptions.a2sProfSize[1].string());

	  // Next two lines are not used anymore
	  //m_tDtintegrateOptions.sMinPeakRadius    = asWords[nAC];
	  //XmTextFieldSetString(_tfIntegrateMinPeakRadius, asWords[nAC++].string());

	  m_tDtintegrateOptions.sBatchNum        = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateBatchNum, asWords[nAC++].string());

	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  m_tDtintegrateOptions.sBatchPrefix     = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateBatchPrefix, asWords[nAC++].string());
	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  m_tDtintegrateOptions.sWait            = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateWait, asWords[nAC++].string());

	  m_tDtintegrateOptions.sDumpRefln       = asWords[nAC];
	  XmTextFieldSetString(_tfIntegrateDump, asWords[nAC++].string());

	  m_tDtintegrateOptions.sPrerefine    = asWords[nAC].string();
	  _cUIom9IntegratePrerefine->vSetValue((int)atoi(asWords[nAC++].string()));

          m_tDtintegrateOptions.bDisplay     =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateDisplay,
				 m_tDtintegrateOptions.bDisplay, True);
          m_tDtintegrateOptions.bSpecial     =  (0 != atoi(asWords[nAC++].string()));
	  _cUIom9IntegrateSpecial->vSetValue((int)m_tDtintegrateOptions.bSpecial);
//	  XmToggleButtonSetState(_tbIntegrateSpecial,
//				 m_tDtintegrateOptions.bSpecial, True);

          m_tDtintegrateOptions.bSpecial1    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateSpecial1,
				 m_tDtintegrateOptions.bSpecial1, True);

          m_tDtintegrateOptions.bSpecial2    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateSpecial2,
				 m_tDtintegrateOptions.bSpecial2, True);

          m_tDtintegrateOptions.bSpecial3    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateSpecial3,
				 m_tDtintegrateOptions.bSpecial3, True);

          m_tDtintegrateOptions.bSpecial4    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateSpecial4,
				 m_tDtintegrateOptions.bSpecial4, True);

          m_tDtintegrateOptions.bNopurge     =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbIntegrateNopurge,
				 m_tDtintegrateOptions.bNopurge, True);
	}
    }

  // Change Special scans toggle button labels, if the keyword exists

  nStat = roHeader.nGetValue(ms_sDtintegrateSpecial, 3, asWords);

  if (0 == nStat)
    {
      vPutMessage("INFO updating Integrate menu special scans toggle buttons!");
      vSetLabel(_tbIntegrateSpecial1, asWords[0].string(), "?");
      vSetLabel(_tbIntegrateSpecial2, asWords[1].string(), "?");
      vSetLabel(_tbIntegrateSpecial3, asWords[2].string(), "?");
    }

  nStat = roHeader.nGetValue(ms_sDtmergeOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtmergeOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (2 > nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtmergeOptions 
		      + " values in header!");
	}
      else
	{
	  m_tDtmergeOptions.sMergeFilename   = asWords[0];
	  XmTextFieldSetString(_tfMergeMergeFile, asWords[0].string());
	  m_tDtmergeOptions.bDisplay     =  (0 != atoi(asWords[1].string()));
//	  XmToggleButtonSetState(_tbMergeDisplay,
//				 m_tDtmergeOptions.bDisplay, True);

	  m_tDtmergeOptions.sReflnlistNames = "";
	  int i;

	  // TODO: This probably needs some work ...
	  for (i = 2; i < nWords; i++)
	    {
	      m_tDtmergeOptions.sReflnlistNames = 
		m_tDtmergeOptions.sReflnlistNames + asWords[i] + ' '; 
	    }
	}
    }

  nStat = roHeader.nGetValue(ms_sDtscaleOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtscaleOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (17 !=  nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtscaleOptions 
		      + " values in header!");
	}
      else
	{
	  int nAC = 0;
	  m_tDtscaleOptions.sExcludeSigma   = asWords[nAC];
	  XmTextFieldSetString(_tfScaleSigma, asWords[nAC++].string());
	  m_tDtscaleOptions.sRejectSigma    = asWords[nAC];
	  XmTextFieldSetString(_tfScaleReject, asWords[nAC++].string());
	  m_tDtscaleOptions.sErrorMul       = asWords[nAC];
	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  XmTextFieldSetString(_tfScaleErrorMul, asWords[nAC++].string());
	  m_tDtscaleOptions.sErrorAdd       = asWords[nAC];
	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  XmTextFieldSetString(_tfScaleErrorAdd, asWords[nAC++].string());

	  //m_tDtscaleOptions.sMaxCycles      = asWords[nAC];
	  //XmTextFieldSetString(_tfScaleCycles, asWords[nAC++].string());

	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  m_tDtscaleOptions.sFixedBatch      = asWords[nAC];
	  XmTextFieldSetString(_tfScaleFixedBatch, asWords[nAC++].string());

	  //m_tDtscaleOptions.sInitScale       = asWords[nAC];
	  //XmTextFieldSetString(_tfScaleFixedScale, asWords[nAC++].string());
	  //m_tDtscaleOptions.sInitFixB        = asWords[nAC];
	  //XmTextFieldSetString(_tfScaleFixedB, asWords[nAC++].string());

	  m_tDtscaleOptions.sUnavgFile       = asWords[nAC];
	  XmTextFieldSetString(_tfScaleUnAvg, asWords[nAC++].string());
	  m_tDtscaleOptions.sMergeFile       = asWords[nAC];
	  XmTextFieldSetString(_tfScaleMergeFile, asWords[nAC++].string());

	  m_tDtscaleOptions.sAbscorMethod       = asWords[nAC];
	  m_nScaleAbscorMethod                  = atoi(asWords[nAC++].string());
	  _cUIom9ScaleAbscor->vSetValue(m_nScaleAbscorMethod);
	  vScaleCB(_cUIom9ScaleAbscor->baseWidget(), (XtPointer)m_nScaleAbscorMethod, NULL);
	  // Used for -batchrestrain argument now
	  m_tDtscaleOptions.sAbscorRejectSigma  = asWords[nAC];
	  XmTextFieldSetString(_tfScaleAbscorReject, asWords[nAC++].string());

	  m_tDtscaleOptions.bFixB     =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbScaleFixB,
				 m_tDtscaleOptions.bFixB, False);
	  m_tDtscaleOptions.bUnAvg     =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbScaleUnaverage,
				 m_tDtscaleOptions.bUnAvg, False);
	  m_tDtscaleOptions.bAnom    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbScaleAnom,
				 m_tDtscaleOptions.bAnom, True);

	  m_tDtscaleOptions.sUnavgOutputFormat = asWords[nAC];
	  _cUIom9ScaleUnavgOutput->vSetValue(atoi(asWords[nAC++].string()));

	  m_tDtscaleOptions.bNoHeader  =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbScaleNoHeader,
				 m_tDtscaleOptions.bNoHeader, True);


          m_tDtscaleOptions.sReso1       = asWords[nAC];
	  XmTextFieldSetString(_tfScaleResolution1, asWords[nAC++].string());
          m_tDtscaleOptions.sReso2       = asWords[nAC];
	  XmTextFieldSetString(_tfScaleResolution2, asWords[nAC++].string());

	  m_tDtscaleOptions.bScaleAnom    =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbScaleScaleAnom,
				 m_tDtscaleOptions.bScaleAnom, True);

	  vScaleCB(_cUIom9ScaleUnavgOutput->baseWidget(), 
		   (XtPointer)NULL, (XtPointer)NULL);
	}
    }

  nStat = roHeader.nGetValue(ms_sDtstrategyOptions, &sTemp);
  if (0 != nStat)
    {
      vPutMessage("WARNING reading " + ms_sDtstrategyOptions 
		  + " keyword in header!");
    }
  else
    {
      nWords = split(sTemp, asWords, MAX_WORDS, " \t\n");
      if (15 !=  nWords)
	{
	  vPutMessage("WARNING reading " + ms_sDtstrategyOptions 
		      + " values in header!");
	}
      else
	{
	  int nAC = 0;
	  m_tDtstrategyOptions.sRotStart       = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyRotStart, asWords[nAC++].string());
	  m_tDtstrategyOptions.sRotEnd         = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyRotEnd, asWords[nAC++].string());
	  m_tDtstrategyOptions.sReso1          = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyResolution1, asWords[nAC++].string());
	  m_tDtstrategyOptions.sReso2          = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyResolution2, asWords[nAC++].string());
	  m_tDtstrategyOptions.sCompletenessMin = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyCompleteness, asWords[nAC++].string());
	  m_tDtstrategyOptions.sRotRangeMax    = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyRotRangeMax, asWords[nAC++].string());

	  // Coarse is now used for redundancy minimum
	  m_tDtstrategyOptions.sRotStepCoarse  = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyRotStepCoarse, asWords[nAC++].string());
	  //m_tDtstrategyOptions.sRotStepFine    = asWords[nAC];
	  //XmTextFieldSetString(_tfStrategyRotStepFine, asWords[nAC++].string());
	  m_tDtstrategyOptions.sLScaleFactor          = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyLScale, asWords[nAC++].string());
	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  m_tDtstrategyOptions.sPreviousFile          = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyPrevious, asWords[nAC++].string());
	  if (ms_sDtNoNe == asWords[nAC])
	    asWords[nAC] = "";
	  m_tDtstrategyOptions.sPredictedFile         = asWords[nAC];
	  XmTextFieldSetString(_tfStrategyPredicted, asWords[nAC++].string());

	  m_tDtstrategyOptions.bRef       =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbStrategyRef,
				 m_tDtstrategyOptions.bRef, False);

	  m_tDtstrategyOptions.bList      =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbStrategyList,
				 m_tDtstrategyOptions.bList, False);

	  m_tDtstrategyOptions.bPrevious  =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbStrategyPrevious,
				 m_tDtstrategyOptions.bPrevious, False);

	  m_tDtstrategyOptions.bPredicted =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbStrategyPredicted,
				 m_tDtstrategyOptions.bPredicted, False);

	  m_tDtstrategyOptions.bAnom      =  (0 != atoi(asWords[nAC++].string()));
	  XmToggleButtonSetState(_tbStrategyAnom,
				 m_tDtstrategyOptions.bAnom, False);
	}
    }

  return (0);
}

int
MainWindow::nUpdateHeader(Cimage_header *poHeader)
{
  // Write the current values of dtprocess textfields to the header
  // (Textfields may not be updated unless each callback has been
  //  activated)

  int    i;
  Widget w;

  w = _pbFileOpen;
  vFindCB(w, NULL, NULL);
  vIndexCB(w, NULL, NULL);
  vRefineCB(w, NULL, NULL);
  vPredictCB(w, NULL, NULL);
  vIntegrateCB(w, NULL, NULL);
  vMergeCB(w, NULL, NULL);
  vScaleCB(w, NULL, NULL);
  vStrategyCB(w, NULL, NULL);

  // Make sure active dialog is really updated

  (this->*m_prvDialogCB)(w, NULL, NULL);

  Cstring sTemp;

  sTemp =  m_tDtcalibrateOptions.sSpacegroup  + ' ' 
         + m_tDtcalibrateOptions.sReso1       + ' '
         + m_tDtcalibrateOptions.sReso2;
  (void) poHeader->nReplaceValue(ms_sSetupOptions, sTemp);

  sTemp =   m_tDtfindOptions.a2sSeqNum[0]   + ' ' 
          + m_tDtfindOptions.a2sSeqNum[1]   + ' '
          + m_tDtfindOptions.sSigma         + ' '
          + m_tDtfindOptions.sMinimum       + ' '
          + m_tDtfindOptions.sPeakFilter    + ' '
          + m_tDtfindOptions.a2sWindow[0]   + ' '
          + m_tDtfindOptions.a2sWindow[1]   + ' '
    //          + m_tDtfindOptions.sPad3D         + ' '
          + m_tDtfindOptions.a2sBackRect[0] + ' '
          + m_tDtfindOptions.a2sBackRect[1] + ' '
          + m_tDtfindOptions.a4sCircle[0]   + ' '
          + m_tDtfindOptions.a4sCircle[1]   + ' '
          + m_tDtfindOptions.a4sCircle[2]   + ' '
          + m_tDtfindOptions.a4sCircle[3]   + ' '
          + m_tDtfindOptions.a4sRect[0]     + ' '
          + m_tDtfindOptions.a4sRect[1]     + ' '
          + m_tDtfindOptions.a4sRect[2]     + ' '
          + m_tDtfindOptions.a4sRect[3]     + ' '
          + m_tDtfindOptions.sDumpRefln     + ' '
          + (Cstring) m_tDtfindOptions.b3Dsearch + ' '
          + (Cstring) m_tDtfindOptions.bDisplay  + ' '
          + (Cstring) m_tDtfindOptions.bShowMore + ' '
          + m_tDtfindOptions.sReso1        + ' '
          + m_tDtfindOptions.sReso2;

  (void) poHeader->nReplaceValue(ms_sDtfindOptions, sTemp);

  sTemp =   m_tDtindexOptions.sMaxDiffs    + ' ' 
          + m_tDtindexOptions.sMaxCell     + ' '
          + m_tDtindexOptions.sGrid        + ' '
          + m_tDtindexOptions.sMaxResid    + ' '
          + m_tDtindexOptions.a6sErrors[0] + ' '
          + m_tDtindexOptions.a6sErrors[1] + ' '
          + m_tDtindexOptions.a6sErrors[2] + ' '
          + m_tDtindexOptions.a6sErrors[3] + ' '
          + m_tDtindexOptions.a6sErrors[4] + ' '
          + m_tDtindexOptions.a6sErrors[5] + ' '
          + m_tDtindexOptions.sSpacegroup  + ' '
          + m_tDtindexOptions.sMethod      + ' '
          + (Cstring) m_tDtindexOptions.bList    + ' '
          + (Cstring) m_tDtindexOptions.bDiffs + ' '
          + (Cstring) m_tDtindexOptions.bKnown   + ' '
          + (Cstring) m_tDtindexOptions.bPrompt  + ' '
          + (Cstring) m_tDtindexOptions.bAdvanced + ' '
          + m_tDtindexOptions.sReso1  + ' '
          + m_tDtindexOptions.sReso2  + ' '
          + m_tDtindexOptions.sSigma;


  (void) poHeader->nReplaceValue(ms_sDtindexOptions, sTemp);

  if ("" == m_tDtrefineOptions.sRefineMacroNum)
    {
      m_tDtrefineOptions.sRefineMacroNum = (Cstring) m_nRefineMacro;
    }
  sTemp =   m_tDtrefineOptions.sSigma       + ' ' 
          + m_tDtrefineOptions.sReso1       + ' '
          + m_tDtrefineOptions.sReso2       + ' '
          + m_tDtrefineOptions.a3sReject[0] + ' '
          + m_tDtrefineOptions.a3sReject[1] + ' '
          + m_tDtrefineOptions.a3sReject[2] + ' '
          + m_tDtrefineOptions.sCycles      + ' '
    // + m_tDtrefineOptions.sRelWeight   + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[0] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[1] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[2] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[3] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[4] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[5] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[6] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[7] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[8] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[9] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[10] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[11] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[12] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[13] + ' '
          + (Cstring) m_tDtrefineOptions.a15bCrystal[14] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[0] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[1] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[2] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[3] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[4] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[5] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[6] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[7] + ' '
          + (Cstring) m_tDtrefineOptions.a9bDetector[8] + ' '
          + (Cstring) m_tDtrefineOptions.a4bSource[0]   + ' '
          + (Cstring) m_tDtrefineOptions.a4bSource[1]   + ' '
          + (Cstring) m_tDtrefineOptions.a4bSource[2]   + ' '
          + (Cstring) m_tDtrefineOptions.a4bSource[3]   + ' '
          + (Cstring) m_tDtrefineOptions.bDisplay       + ' '
          + (Cstring) m_tDtrefineOptions.bPrompt        + ' '
          + m_tDtrefineOptions.sRefineMacroNum          + ' '
          + m_tDtrefineOptions.sRefineRefln             + ' '
          + m_tDtrefineOptions.sRefineSeq;

  (void) poHeader->nReplaceValue(ms_sDtrefineOptions, sTemp);
  for (i = 1; i < DTP_MAX_REFINE_MACROS; i++)
    {
      if ("" != m_tDtrefineOptions.sRefineMacro[i])
	(void) poHeader->nReplaceValue(ms_sDtrefineMacro[i],
				       m_tDtrefineOptions.sRefineMacro[i]);
    }

  sTemp =  m_tDtpredictOptions.a2sSeqNum[0]   + ' ' 
         + m_tDtpredictOptions.a2sSeqNum[1]   + ' ' 
         + m_tDtpredictOptions.sReso1         + ' '
         + m_tDtpredictOptions.sReso2         + ' '
         + m_tDtpredictOptions.a2sRotRange[0] + ' '
         + m_tDtpredictOptions.a2sRotRange[1] + ' '
         + m_tDtpredictOptions.sMosaicity     + ' '
	 + (Cstring) m_tDtpredictOptions.bList   + ' '
	 + (Cstring) m_tDtpredictOptions.bNonunf + ' '
         + (Cstring) m_tDtpredictOptions.bDisplay;

  (void) poHeader->nReplaceValue(ms_sDtpredictOptions, sTemp);

  Cstring sBatchPrefix = m_tDtintegrateOptions.sBatchPrefix;
  while (' ' == sBatchPrefix.GetAt(0))
    sBatchPrefix = sBatchPrefix.after(0);
  if (0 == sBatchPrefix.length()) sBatchPrefix = ms_sDtNoNe;

  sTemp =  m_tDtintegrateOptions.a2sSeqNum[0]   + ' ' 
         + m_tDtintegrateOptions.a2sSeqNum[1]   + ' ' 
         + m_tDtintegrateOptions.sReso1         + ' '
         + m_tDtintegrateOptions.sReso2         + ' '
         + m_tDtintegrateOptions.a2sWindow[0]   + ' ' 
         + m_tDtintegrateOptions.a2sWindow[1]   + ' ' 
         + m_tDtintegrateOptions.sPad3D         + ' '   // Now holds 3 numbers
         + m_tDtintegrateOptions.a2sProfSize[0] + ' ' 
         + m_tDtintegrateOptions.a2sProfSize[1] + ' '   // Now holds 2 numbers separated by a space
    //+ m_tDtintegrateOptions.sMinPeakRadius + ' ' 
         + m_tDtintegrateOptions.sBatchNum      + ' '  // per scale batch;
         + sBatchPrefix   + ' '
         + m_tDtintegrateOptions.sWait          + ' ' 
         + m_tDtintegrateOptions.sDumpRefln     + ' ' 
         + m_tDtintegrateOptions.sPrerefine     + ' ' 
         + (Cstring) m_tDtintegrateOptions.bDisplay  + ' ' 
         + (Cstring) m_tDtintegrateOptions.bSpecial  + ' ' 
         + (Cstring) m_tDtintegrateOptions.bSpecial1 + ' ' 
         + (Cstring) m_tDtintegrateOptions.bSpecial2 + ' ' 
         + (Cstring) m_tDtintegrateOptions.bSpecial3 + ' ' 
         + (Cstring) m_tDtintegrateOptions.bSpecial4 + ' ' 
         + (Cstring) m_tDtintegrateOptions.bNopurge;

  (void) poHeader->nReplaceValue(ms_sDtintegrateOptions, sTemp);

  sTemp =  m_tDtmergeOptions.sMergeFilename     + ' ' 
         + (Cstring) m_tDtmergeOptions.bDisplay + ' '
	 +  m_tDtmergeOptions.sReflnlistNames;

  (void) poHeader->nReplaceValue(ms_sDtmergeOptions, sTemp);
  Cstring sFixedBatch = m_tDtscaleOptions.sFixedBatch;
  while (' ' == sFixedBatch.GetAt(0))
    sFixedBatch = sFixedBatch.after(0);
  if (0 >= sFixedBatch.length())
    sFixedBatch = ms_sDtNoNe;

  Cstring sErrMul = m_tDtscaleOptions.sErrorMul;
  while (' ' == sErrMul.GetAt(0))
    sErrMul = sErrMul.after(0);
  if (0 >= sErrMul.length())
    sErrMul = ms_sDtNoNe;

  Cstring sErrAdd = m_tDtscaleOptions.sErrorAdd;
  while (' ' == sErrAdd.GetAt(0))
    sErrAdd = sErrAdd.after(0);
  if (0 >= sErrAdd.length())
    sErrAdd = ms_sDtNoNe;

  sTemp =  m_tDtscaleOptions.sExcludeSigma    + ' '  //1
         + m_tDtscaleOptions.sRejectSigma     + ' '  //2
	 + sErrMul        + ' ' 
	 + sErrAdd        + ' ' 
    //+ m_tDtscaleOptions.sMaxCycles       + ' ' 
         + sFixedBatch      + ' ' 
    //+ m_tDtscaleOptions.sInitScale       + ' ' 
    //+ m_tDtscaleOptions.sInitFixB        + ' ' 
	 + m_tDtscaleOptions.sUnavgFile       + ' ' 
	 + m_tDtscaleOptions.sMergeFile       + ' ' 
	 + m_tDtscaleOptions.sAbscorMethod    + ' ' 
	  // Used for -batchrestrain argument now
	 + m_tDtscaleOptions.sAbscorRejectSigma + ' ' 
         + (Cstring) m_tDtscaleOptions.bFixB  + ' '
         + (Cstring) m_tDtscaleOptions.bUnAvg + ' '
         + (Cstring) m_tDtscaleOptions.bAnom  + ' '
	 + m_tDtscaleOptions.sUnavgOutputFormat + ' '
         + (Cstring) m_tDtscaleOptions.bNoHeader + ' '
          + m_tDtscaleOptions.sReso1  + ' '
          + m_tDtscaleOptions.sReso2  + ' '
          + (Cstring) m_tDtscaleOptions.bScaleAnom;  //17
  (void) poHeader->nReplaceValue(ms_sDtscaleOptions, sTemp);

  Cstring sPreviousFile = m_tDtstrategyOptions.sPreviousFile;
  while (' ' == sPreviousFile.GetAt(0))
    sPreviousFile = sPreviousFile.after(0);
  if (0 >= sPreviousFile.length())
    sPreviousFile = ms_sDtNoNe;

  Cstring sPredictedFile = m_tDtstrategyOptions.sPredictedFile;
  while (' ' == sPredictedFile.GetAt(0))
    sPredictedFile = sPredictedFile.after(0);
  if (0 >= sPredictedFile.length())
    sPredictedFile = ms_sDtNoNe;

  sTemp =  m_tDtstrategyOptions.sRotStart        + ' '
	 + m_tDtstrategyOptions.sRotEnd          + ' ' 
	 + m_tDtstrategyOptions.sReso1           + ' ' 
	 + m_tDtstrategyOptions.sReso2           + ' ' 
	 + m_tDtstrategyOptions.sCompletenessMin + ' ' 
	 + m_tDtstrategyOptions.sRotRangeMax     + ' ' 
         + m_tDtstrategyOptions.sRotStepCoarse   + ' ' // coarse is now used for redndnacy min
    //+ m_tDtstrategyOptions.sRotStepFine     + ' ' 
	 + m_tDtstrategyOptions.sLScaleFactor    + ' ' 
	 + sPreviousFile    + ' ' 
	 + sPredictedFile   + ' ' 
         + (Cstring) m_tDtstrategyOptions.bRef   + ' '
         + (Cstring) m_tDtstrategyOptions.bList  + ' '
         + (Cstring) m_tDtstrategyOptions.bPrevious  + ' '
         + (Cstring) m_tDtstrategyOptions.bPredicted + ' '
         + (Cstring) m_tDtstrategyOptions.bAnom;
  (void) poHeader->nReplaceValue(ms_sDtstrategyOptions, sTemp);

  return (0);
}

void
MainWindow::vCommandDone(void)
{
  static int s_nLoopTestMosaicity = 1; // 0 means do -testmosaicity
  m_poXcursor->vRestore();
  XtUnmanageChild(_mbProgress);
  XBell(XtDisplay(_mbProgress), -25);
//  vPutMessage("Done.");

  // Update reflnlist list widget, but keep original selection

  int       i;
  Cstring *psItems;
  int      nNum;
  psItems = NULL;

  _cslReflnlist->vGetSelection(&nNum, &psItems);
  _cslReflnlist->vDeleteAll();
  if (_cUIfileFilter->bDoSearch(m_sReflnlistMask))
    _cslReflnlist->vAddOtherList(_cUIfileFilter->wGetListWidget());
  if (0 < nNum)
    {
      _cslReflnlist->vSetSelection(psItems[0], False);
      delete [] psItems;
      psItems = NULL;
    }
  
  // Update header list widget, but keep original selection
  
  _cslHeader->vGetSelection(&nNum, &psItems);
  _cslHeader->vDeleteAll();
  if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
    _cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
  if (0 < nNum)
    {
      _cslHeader->vSetSelection(psItems[0], False);
      delete [] psItems;
      psItems = NULL;
    }
      
  // Finish loading logfile into viewer

  if (3 == m_nLogfileType)
    {
      m_lLogfileSizeShown = -1;
      vLogfileCB(NULL, NULL, NULL);
    }

  if (!m_bFCDialogRun)
    {
      // Delete the scratch log file used with a command line.
      // Keep this commented out until the future.
      //      nFileDelete(m_sLogFilename);
    }
  else if (m_bFCDialogRun)
    {
      // Check status of command that is done and if non-success status,
      //       and mode is auto-next or auto-next+run, reset mode to manual

      int     nStat;
      Cstring sTempFile;
      Cstring sTemp;
      if (DTP_DLG_CALIBRATE == m_nFCActive)
	{
	  nStat = 0;
	}
      else
	{
	  nStat      = 1;
	  sTempFile = sFileGetTempName(".", "DTPRO");
	  if ("" != sTempFile)
	    {
	      nDoSystemCommand("grep DTREK_STATUS " + m_sLogFilename + " > " 
			       + sTempFile);
	      ifstream oIn(sTempFile);
	      if ((oIn.rdbuf()->is_open())) 
		{
		  getline(oIn, sTemp);
		  if (!oIn.eof())
		    {
		      sTemp = sTemp.after(13);
		      nStat = atoi(sTemp.string());
		    }
		  oIn.close();
		}
	      nFileDelete(sTempFile);
	    }
	}

      if ( (0 != nStat) && (0 != _cUIomMode->nGetValue()) )
	{
	  // Set mode to manual, since subshell did not work

	  _cUIomMode->vSetValue(0);
	  vPutMessage("Subshell failure!\nFlow chart mode set to Manual.", 1);
	}
      else if (0 == nStat)
	{
	  // Now do special things for the end of each specific dialog,
	  // but only if the previous command was successful

	  bool bSelectNewHeader = FALSE;

	  if (DTP_DLG_CALIBRATE == m_nFCActive)
	    {
	      // Set header selection to dtprocess.head

	      m_sHeaderName    = sDtrekGetPrefix() + "dtprocess.head";
	      bSelectNewHeader = TRUE;
	    }
	  else if (DTP_DLG_FIND == m_nFCActive)
	    {
	      // Set reflnlist selection to dtfind.ref

	      m_sReflnlistDir  = sGetCWD();
	      m_sReflnlistMask = m_sReflnlistDir + "*.ref";
	      m_sReflnlistName = sDtrekGetPrefix() + "dtfind.ref";
	      _cslReflnlist->vSetSelection(m_sReflnlistName, True);
	      sTemp = sDtrekGetPrefix() + "dtfind.head";
	      if (bFileExists(sTemp))
		{
		  m_sHeaderName    = sTemp;
		  bSelectNewHeader = TRUE;
		}
	    }
	  else if (DTP_DLG_INDEX == m_nFCActive)
	    {
	      // Set header selection to dtindex.head

	      sTemp = sDtrekGetPrefix() + "dtindex.head";
	      if (bFileExists(sTemp))
		{
		  m_sHeaderName    = sTemp;
		  bSelectNewHeader = TRUE;
		}
	    }
	  else if (DTP_DLG_REFINE == m_nFCActive)
	    {
	      if (!m_sRefineCommand.contains("dtrefine.head "))
		{
		  // Just ran dtrefine without dtrefine.head 
		  // (say with dtindex answer), so update that

		  sTemp = sDtrekGetPrefix() + "dtrefine.head";
		  if (bFileExists(sTemp))
		    {
		      if (   (sTemp != m_sHeaderName)
                          && (0 != _cUIomMode->nGetValue()) )
			{
			  // If previous header was not dtrefine.head then
			  // force re-do refine step in auto mode

			  XmToggleButtonSetState(_tbRefineTestMosaicity,
						 False, False);
			  s_nLoopTestMosaicity = 1; //  0 means testmos next;
			  
			  m_nFCActive--;  // Be sure to re-run refine
			}
		      m_sHeaderName    = sTemp;
		      bSelectNewHeader = TRUE;

		      // Change the macro to be interactive for the second
		      // refinement pass (even if it was already interactive)
		      // UNLESS _tbCalibrateModeSmall is set  AND already set to SmallMolecule

		      if (   XmToggleButtonGetState(_tbCalibrateModeSmall)
                          && (7 == m_nRefineMacro) )
			{
			  m_nRefineMacro = 7;
			}
		      else
			{
			  m_nRefineMacro = 0;
			  _cUIom9RefineMacros->vSetValue(m_nRefineMacro);
			  vRefineCB(_cUIom9RefineMacros->baseWidget(), 
				    (XtPointer)m_nRefineMacro,
				    NULL);
			}
		    }
		}
	      else if (0 != _cUIomMode->nGetValue())
		{
		  // We are in AUTO mode, and dtrefine.head was input to the
		  // previous run of dtrefine

		  if (1 != _cUIom9RefineRefln->nGetValue())
		    {
		      // We used a reflnlist, so now use images
		      // and re-run refine step in auto-mode, but be sure
		      // test mosaicity is NOT on!

		      XmToggleButtonSetState(_tbRefineTestMosaicity, 
					     False, False);
		      _cUIom9RefineRefln->vSetValue(1);
		      vRefineCB(_cUIom9RefineRefln->baseWidget(), 
				(XtPointer)1,
				NULL);
		      //m_nFCActive--;
		    }
/*************
// We no longer do the TestMosaicity option
		  else if (!XmToggleButtonGetState(_tbRefineTestMosaicity)

			   && XmToggleButtonGetState(_tbRefineCrystalMosaicity)
			   && (0 == _cUIom9RefineMacros->nGetValue())
			   && (0 == s_nLoopTestMosaicity) )
		    {
		      // Images were used in the refinement, but did not
		      // test mosaicity, so try to do that now.

		      XmToggleButtonSetState(_tbRefineTestMosaicity,
					     True, True);

		      // Force re-do refine step in auto mode to test mosaicity
		      
		      s_nLoopTestMosaicity++;
		      m_nFCActive--;
		    }
*************/
		}
	      sTemp = sDtrekGetPrefix() + "dtrefine.head";
	      if (bFileExists(sTemp))
		{
		  m_sHeaderName    = sTemp;
		  bSelectNewHeader = TRUE;
		}
	    }
	  else if (DTP_DLG_PREDICT == m_nFCActive)
	    {
	      // Set header selection to dtpredict.head

	      sTemp = sDtrekGetPrefix() + "dtpredict.head";
	      if (bFileExists(sTemp))
		{
		  m_sHeaderName    = sTemp;
		  bSelectNewHeader = TRUE;
		}
	    }
	  else if (DTP_DLG_INTEGRATE == m_nFCActive)
	    {
	      // Set header selection to dtintegrate.head

	      sTemp = sDtrekGetPrefix() + "dtintegrate.head";
//+JWP 2010-04-23
	      // Unless this was an IntegrateSpecial with a dtrefine.head result?
	      
//-JWP 2010-04-23

	      if (bFileExists(sTemp))
		{
		  m_sHeaderName    = sTemp;
		  bSelectNewHeader = TRUE;
		}

	      // Set reflnlist selection to dtprofit.ref or dtintegrate.ref

	      m_sReflnlistDir  = sGetCWD();
	      m_sReflnlistMask = m_sReflnlistDir + "*.ref";
	      sTemp            = sDtrekGetPrefix() + "dtprofit.ref";
	      if (!bFileExists(sTemp))
		{
		  sTemp        = sDtrekGetPrefix() + "dtintegrate.ref";
		  if (!bFileExists(sTemp))
		    sTemp      = m_sReflnlistName;
		}
	      m_sReflnlistName = sTemp;
	      _cslReflnlist->vSetSelection(m_sReflnlistName, True);
	    }
	  else if (DTP_DLG_MERGE == m_nFCActive)
	    {
	      // Set reflnlist selection to dtprofit.ref or dtintegrate.ref

	      m_sReflnlistDir  = sGetCWD();
	      m_sReflnlistMask = m_sReflnlistDir + "*.ref";
	      m_sReflnlistName = m_tDtmergeOptions.sMergeFilename;
	      if (!bFileExists(m_sReflnlistName))
		m_sReflnlistName = sDtrekGetPrefix() + "dtprofit.ref";
	      if (!bFileExists(m_sReflnlistName))
		m_sReflnlistName = sDtrekGetPrefix() + "dtintegrate.ref";
	      _cslReflnlist->vSetSelection(m_sReflnlistName, True);
	    }
	  else if (DTP_DLG_SCALE == m_nFCActive)
	    {
/*
	      m_sReflnlistDir  = sGetCWD();
	      m_sReflnlistMask = m_sReflnlistDir + "*.ref";
//	      m_sReflnlistName = m_tDtscaleOptions.sMergeFile;
	      if (!bFileExists(m_sReflnlistName))
		m_sReflnlistName = m_tDtmergeOptions.sMergeFilename;
	      if (!bFileExists(m_sReflnlistName))
		m_sReflnlistName = sDtrekGetPrefix() + "dtprofit.ref";
	      if (!bFileExists(m_sReflnlistName))
		m_sReflnlistName = sDtrekGetPrefix() + "dtintegrate.ref";
	      _cslReflnlist->vSetSelection(m_sReflnlistName, True);
*/
	    }

	  if (bSelectNewHeader)
	    {
	      // Need to select the new header, may need to refilter

	      sTemp         = m_sHeaderMask;
	      m_sHeaderDir  = sGetCWD();
	      m_sHeaderMask = m_sHeaderDir + "*.head";
	      if (sTemp != m_sHeaderMask)
		{
		  // Need to re-filter

		  _cslHeader->vDeleteAll();
		  if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
		    _cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
		}
	      _cslHeader->vSetSelection(m_sHeaderName, True);
	    }

	  // If Manual mode not set and not last menu in mode, ...

	  if (   (   (DTP_DLG_SCALE > m_nFCActive)
		  && (1 == _cUIomMode->nGetValue()) )
	      || (   (DTP_DLG_SCALE > m_nFCActive)
		  && (2 == _cUIomMode->nGetValue()) )
	      || (   (DTP_DLG_PREDICT >= m_nFCActive)
		  && (3 == _cUIomMode->nGetValue()) )
	      )
	    {
	      // ... go on to the next menu in the flowchart
	      
	      Widget *pw;
	      pw = m_pwpbFlowChart[m_nFCActive+1];
	      if (   (pw == m_pwpbFlowChart[DTP_DLG_MERGE])
		  && (2 == _cUIomMode->nGetValue()) )
		{
		  // Skip Merge dialog in AutoRun mode

		  m_nFCActive++;
		  pw = m_pwpbFlowChart[m_nFCActive+1];
		}
	      else if (   (pw == m_pwpbFlowChart[DTP_DLG_PREDICT+1])
		       && (3 == _cUIomMode->nGetValue()) )
		{
		  // In Auto Strategy mode
		  // go to Strategy menu from the Predict menu

		  pw = m_pwpbFlowChart[DTP_DLG_STRATEGY];
		}

	      // 'Press' the flowchart button to bring up the corresponding menu
	      
	      vFlowChartCB(*pw, NULL, NULL);

	      // If auto run set, then press the "Run" button in the menu ...
	      
	      if (   (   (DTP_DLG_SCALE >= m_nFCActive)
		      && (2 == _cUIomMode->nGetValue()) )
		  || (   (   (DTP_DLG_STRATEGY == m_nFCActive)
			  || (DTP_DLG_PREDICT  >= m_nFCActive) )
		      && (3 == _cUIomMode->nGetValue()) ) )
		{
		  // If auto next + run set OR auto strat set,
		  // then execute the run button!
		  
		  (this->*m_prvDialogCB)(m_pbDialogRun, NULL, NULL);	  
		}
	    }
	}
    }
}


void MainWindow::vNumberAdjustCBCallback(Widget w, 
		XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vNumberAdjustCB(w, data->client_data, callData);
}

void MainWindow::vNumberAdjustCB (Widget w, XtPointer clientData, XtPointer callData)
{
  if (XmToggleButtonGetState(_tbViewNumAdjust))
    _cUItextnumArrow->vSetTextField(w);
}

void MainWindow::vCUIom9CBCallback(XtPointer pObj, Widget w, 
				   XtPointer clientData, XtPointer callData)
{
    MainWindow *obj = (MainWindow *)pObj;
    obj->vCUIom9CB(pObj, w, clientData, callData);
}

void MainWindow::vCUIom9CB(XtPointer pObj, Widget w, XtPointer clientData, 
			   XtPointer callData)
{
  long i = (long) clientData;
  if (w == _cUIomCalibrateSpatial->baseWidget())
    {
      if (0 == i)
	{
	  // Simple spatial

	  XtManageChild(_tfCalibrateSpatialSimple1);
	  XtManageChild(_tfCalibrateSpatialSimple2);
	  XtManageChild(_lbCalibrateSpatialSimple);

	  XtUnmanageChild(_tfCalibrateSpatialInterp);
	  XtUnmanageChild(_lbCalibrateSpatialInterp);
	  XtUnmanageChild(_pbCalibrateSpatialInterp);
	}
      else if (1 == i)
	{
	  // Interp. tables

	  XtUnmanageChild(_tfCalibrateSpatialSimple1);
	  XtUnmanageChild(_tfCalibrateSpatialSimple2);
	  XtUnmanageChild(_lbCalibrateSpatialSimple);

	  XtManageChild(_tfCalibrateSpatialInterp);
	  XtManageChild(_lbCalibrateSpatialInterp);
	  XtManageChild(_pbCalibrateSpatialInterp);
	}
    }
  else if (w == _cUIomCalibrateNonunf->baseWidget())
    {
      if (0 == i)
	{
	  // None

	  XtUnmanageChild(_tfCalibrateNonunfNonunf);
	  XtUnmanageChild(_lbCalibrateNonunfNonunf);
	  XtUnmanageChild(_pbCalibrateNonunfNonunf);
	  XtUnmanageChild(_lbCalibrateNonunfDark);
	  XtUnmanageChild(_tfCalibrateNonunfDark);
	  XtUnmanageChild(_pbCalibrateNonunfDark);
	}
      else if (1 == i)
	{
	  // Simple mask

	  XtManageChild(_tfCalibrateNonunfNonunf);
	  XtManageChild(_lbCalibrateNonunfNonunf);
	  XtManageChild(_pbCalibrateNonunfNonunf);
	  XtUnmanageChild(_lbCalibrateNonunfDark);
	  XtUnmanageChild(_tfCalibrateNonunfDark);
	  XtUnmanageChild(_pbCalibrateNonunfDark);
	}
      else if (2 == i)
	{
	  // Simple scale
	}
      else if (3 == i)
	{
	  // Dark only

	  XtManageChild(_tfCalibrateNonunfNonunf);
	  XtManageChild(_lbCalibrateNonunfNonunf);
	  XtManageChild(_pbCalibrateNonunfNonunf);
	  XtManageChild(_lbCalibrateNonunfDark);
	  XtManageChild(_tfCalibrateNonunfDark);
	  XtManageChild(_pbCalibrateNonunfDark);
	}
    }
  else if (w == _omIndexMethod->baseWidget())
    {
      // Index method selected

      vIndexCB(w, clientData, callData);
    }
  else if (w == _cUIom9RefineMacros->baseWidget())
    {
      // Refinement macro selected

      vRefineCB(w, clientData, callData);
    }
  else if (w == _cUIom9RefineRefln->baseWidget())
    {
      // Refinement reflnlist source selected

      if (0 == i)
	{
	  _cslImages->unmanage();
	  _cslReflnlist->manage();
	}
      else if (1 == i)
	{
	  _cslImages->manage();
	  _cslReflnlist->unmanage();
	}
      vRefineCB(w, clientData, callData);
    }
  else if (w == _cUIom9IntegrateSpecial->baseWidget())
    {
      vIntegrateCB(w, clientData, callData);
    }
  else if (w == _cUIom9IntegratePrerefine->baseWidget())
    {
      vIntegrateCB(w, clientData, callData);
    }
  else if (w == _cUIom9ScaleAbscor->baseWidget())
    {
      vScaleCB(w, clientData, callData);
    }
  else if (w == _cUIom9ScaleUnavgOutput->baseWidget())
    {
      vScaleCB(w, clientData, callData);
    }
  else if (w == _cUIomMode->baseWidget())
    {
      vDrawInFlowChart(_daFlowchart);
    }
  else if (   (w == _cUIomOrientLab1->baseWidget())
	   || (w == _cUIomOrientLab2->baseWidget())
	   || (w == _cUIomOrientLab3->baseWidget())
	   || (w == _cUIomOrientCrystal1->baseWidget())
	   || (w == _cUIomOrientCrystal2->baseWidget()))
    {
      vOrientCB(w, clientData, callData);
    }
}

int MainWindow::nLoadHeader(const Cstring &rsFilename, const bool bReadWidgets)
{
  int     nStat;
  Cstring sTemp;
  Cstring sSpatialType;
  Cstring sNonunfType;
  Cimage_header *poHeaderL;
  int     nNonunfType;
  int     nSpatialType;
  float   a4fTemp[4];

//  cout << "nLoadHeader called\n";
  if (!bFileExists(rsFilename))
    {
      vPutMessage("ERROR reading header file " + rsFilename + ".  It does not exist!", 1);
      return (1);
    }

  poHeaderL = new Cimage_header(rsFilename);
  if (!poHeaderL->bIsAvailable())
    {
      vPutMessage("ERROR reading header file " + rsFilename + ".  Old header retained!", 1);
      nStat = 1;
    }
  else
    {
      if (NULL == m_poHeader)
	m_poHeader = new Cimage_header();
      *m_poHeader = *poHeaderL;
      m_sHeaderName = rsFilename;

//      _cUIheaderEdit->vSetHeader(m_poHeader);

      // Get header value for the _frPredict _tfPredictMosaicity

      nStat = m_poHeader->nGetValue(Ccrystal::ms_sCrystalPrefix + Ccrystal::ms_sCrystalXMosaicity, 4,
				    &a4fTemp[0]);
      if (0 == nStat)
	{
	  // Found 4 mosaicity values, use only the first one
	  
	  sTemp = Cstring(a4fTemp[0]);
//	  sTemp = Cstring(a4fTemp[1]) + " " + Cstring(a4fTemp[2]) + " "
//	          + Cstring(a4fTemp[3]);
	}
      else
	{
	  a4fTemp[0] = 0.3;
	  nStat = m_poHeader->nGetValue(Ccrystal::ms_sCrystalXMosaicity, 
					&a4fTemp[0]);
	  if (0 == nStat) sTemp = Cstring(a4fTemp[0]);
	}

      if (0 == nStat)
	XmTextFieldSetString(_tfPredictMosaicity, sTemp.string());

      nStat = 0;
      if (bReadWidgets)
	(void) nInitValues(*poHeaderL);
      
      // Set the labelString of the 4th special scan toggle button to be the
      // scan_template found in the header

      nStat = poHeaderL->nGetValue(Cscan::ms_sScanTemplate, &sTemp);
      if (0 == nStat)
	{
	  sTemp = sFileGetBasename(sTemp);
	  vSetLabel(_tbIntegrateSpecial4, sTemp.string(), "?");
	}

      // Get header values for items in the _frCalibrate widgets
      // TODO

      if (XtIsSensitive(_lbCalibrateSpacegroup))
	{

	  // Look for DTP_DTINDEX_SPACEGROUP and load into tfCalibrateSpacegroup

	  nStat = m_poHeader->nGetValue("DTP_DTINDEX_SPACEGROUP", &sTemp);
	  if (0 == nStat)
	    {
	      //+ 02-May-2002 Comment out next two lines as it hurts more
	      // than it helps
	      //	      m_tDtcalibrateOptions.sSpacegroup  = sTemp;
	      //XmTextFieldSetString(_tfCalibrateSpacegroup, sTemp.string());
	      //- 02-May-2002 Comment out next two lines as it hurts more
/*
   only set when the pbCalibrateRun button is selected

	      m_tDtindexOptions.sSpacegroup  = sTemp;
	      XmTextFieldSetString(_tfIndexSpacegroup, sTemp.string());
	      vPutMessage("INFO: setting spacegroup number in Index menu to "
			  + sTemp);
*/
	    }
	}
      
      Cstring sPrefix= "";

      // Null prefix string, see if the  Cdetector::ms_sDetectorNames keyword
      // exists in the header.  If so, change the prefix to the first name
      // in the list of names.  This call is OK, since if there is no
      // keyword, then sPrefix is set to "" anyways.

      (void) m_poHeader->nGetValue(Cdetector::ms_sDetectorNames, 1,
				   &sPrefix);

      // Look for detector distance and swing angle

      Cstring a6sValues[6];
      nStat = m_poHeader->nGetValue(sPrefix+Cgoniometer::ms_sGonioValues, 6,
				    a6sValues);
      if (0 == nStat)
	{
	  XmTextFieldSetString(_tfCalibrateDetDist, a6sValues[5].string());
	  XmTextFieldSetString(_tfCalibrateDetTheta, a6sValues[1].string());
	}
      
      // Look for the spatial distortion type and info

      nStat = m_poHeader->nGetValue(sPrefix + Cspatial::ms_sSpatialDistortionType, 
				    &sSpatialType);
      nSpatialType = _cUIomCalibrateSpatial->nGetValue();
      if (0 == nStat)
	{
	  if (Cspatial::ms_sSpatialTypeSimple == sSpatialType)
	    {
	      nSpatialType = 0;
	      nStat = m_poHeader->nGetValue(sPrefix + 
					    Cspatial::ms_sSpatialDistortionInfo,
					    4, a6sValues);
	      if (0 == nStat)
		{
		  XmTextFieldSetString(_tfCalibrateDirBeam1, a6sValues[0].string());
		  XmTextFieldSetString(_tfCalibrateDirBeam2, a6sValues[1].string());
		  XmTextFieldSetString(_tfCalibrateSpatialSimple1, a6sValues[2].string());
		  XmTextFieldSetString(_tfCalibrateSpatialSimple2, a6sValues[3].string());
		}
	    }
	  else if (Cspatial::ms_sSpatialTypeInterp == sSpatialType)
	    {
	      nSpatialType = 1;
	      nStat = m_poHeader->nGetValue(sPrefix + 
					    Cspatial::ms_sSpatialDistortionInfo,
					    &sTemp);
	      if (0 == nStat)
		{
		  XmTextFieldSetString(_tfCalibrateSpatialInterp, 
				       sTransSymbol(sTemp).string());



//		  if (m_wFCActive  == _frCalibrate)
		  if (DTP_DLG_CALIBRATE == m_nFCActive)
//		  if (XtIsManaged(_frCalibrate))
		    {
		      // Try to get direct beam position from header

		      Cspatial *poSpatial = new Cspatial(*m_poHeader, sPrefix);
		      if (poSpatial->bIsAvailable())
			{
			  // Try to get beam position from header

			  float fBeam0, fBeam1;
			  nStat = poSpatial->nGetBeamPosition(&fBeam0, &fBeam1);
			  if (0 == nStat)
			    {
			      a6sValues[0] = (Cstring) fBeam0;
			      a6sValues[1] = (Cstring) fBeam1;
			      XmTextFieldSetString(_tfCalibrateDirBeam1, 
						   a6sValues[0].string());
			      XmTextFieldSetString(_tfCalibrateDirBeam2, 
						   a6sValues[1].string());
			    }
			}
		    }
		}
	    }

	  // Look for direct beam position that might override above

	  if (0 == m_poHeader->nGetValue(sPrefix + Cspatial::ms_sSpatialBeamPosn,
					 2, a6sValues))
	    {
	      XmTextFieldSetString(_tfCalibrateDirBeam1, a6sValues[0].string());
	      XmTextFieldSetString(_tfCalibrateDirBeam2, a6sValues[1].string());
	    }

	  if (0 == nStat)
	    {
	      _cUIomCalibrateSpatial->vSetValue(nSpatialType);
	      vCUIom9CB((XtPointer)this, _cUIomCalibrateSpatial->baseWidget(),
			(XtPointer)_cUIomCalibrateSpatial->nGetValue(), NULL);
	    }
	}

      // Look for the nonunf type and info

      nNonunfType = _cUIomCalibrateNonunf->nGetValue();
      nStat = m_poHeader->nGetValue(sPrefix+Cnonunf::ms_sNonunfType, &sNonunfType);
      if (0 == nStat)
	{
	  if (Cnonunf::ms_sNonunfStateNone == sNonunfType)
	    {
	      nNonunfType = 0;
	    }
	  else if (Cnonunf::ms_sNonunfStateSimpleMask == sNonunfType)
	    {
	      nNonunfType = 1;
	      nStat = m_poHeader->nGetValue(sPrefix+Cnonunf::ms_sNonunfInfo, &sTemp);
	      if (0 == nStat)
		{
		  XmTextFieldSetString(_tfCalibrateNonunfNonunf, sTemp.string());
		}
		  
	    }
	  else if (Cnonunf::ms_sNonunfStateDarkNonunf == sNonunfType)
	    {
	      nNonunfType = 3;
	      Cstring a2sTemp[2];
	      nStat = m_poHeader->nGetValue(sPrefix+Cnonunf::ms_sNonunfInfo, 2,
					    a2sTemp);
	      if (0 == nStat)
		{
		  XmTextFieldSetString(_tfCalibrateNonunfNonunf, a2sTemp[0].string());
		  XmTextFieldSetString(_tfCalibrateNonunfDark, a2sTemp[1].string());
		}

	    }
	  if (0 == nStat)
	    {
	      _cUIomCalibrateNonunf->vSetValue(nNonunfType);
	      vCUIom9CB((XtPointer)this, _cUIomCalibrateNonunf->baseWidget(),
			(XtPointer)_cUIomCalibrateNonunf->nGetValue(), NULL);
	    }
	}

      // Look for the scan template

      nStat = m_poHeader->nGetValue(Cscan::ms_sScanTemplate, &sTemp);
      if (0 == nStat)
	{
	  XmTextFieldSetString(_tfCalibrateTemplate, sTemp.string());
	  if (NULL != m_poScan)
	    delete m_poScan;
	  m_poScan = new Cscan(*m_poHeader);
	}
    }
  delete poHeaderL;
  _cUIheaderEdit->vSetHeader(m_poHeader);
  return (nStat);
}

void 
MainWindow::vHeaderEditCBCallback(XtPointer pObj, Widget w, 
				  XtPointer clientData,
				  XtPointer callData)
{
    MainWindow *obj = (MainWindow *)pObj;
    obj->vHeaderEditCB(pObj, w, clientData, callData);
};

void 
MainWindow::vHeaderEditCB(XtPointer pObj, Widget w, XtPointer clientData,
			  XtPointer callData)
{
  bool *pbChanged;
  pbChanged = (bool *) clientData;

  if (*pbChanged)
    {
//      cout << "MainWindow::vHeaderEditCB called!\n";
      _cUIheaderEdit->vGetHeader(m_poHeader);
      if ( !m_bFCDialogRun && (2 == m_nLogfileType) && XtIsManaged(_frLogfile))
	vLogfileCB(_pbViewHeader, NULL, NULL);

      if (NULL != callData)
	{
	  XmSelectionBoxCallbackStruct *pCBS 
	    = (XmSelectionBoxCallbackStruct *) callData;

	  if (XmCR_OK == pCBS->reason)
	    {
	      // Prompt to save the header to a file ...

	      vPopDialog(_pbFileSaveAs, NULL, NULL);
	    }
	}
    }
}

int
MainWindow::nScaleAbsorp(Cstring *psCommand)
{
  // Prepare absorption correction script

  int       i;
  int       nStat = 0;
  int       nMethod;
  int       nTemp;
  int       nNumLaue;
  bool      bUseReqab4 = FALSE;

  Cstring   sTemp;
  Cstring   sMethodA;
  Cstring   sMethodB;
  ofstream *poOut;
  Ccrystal *poCrystal;

  if (NULL == m_poHeader)
    {
      nStat = -1;
      return (nStat);
    }

  poCrystal = new Ccrystal (*m_poHeader);
  if (!poCrystal->bIsAvailable())
    {
      vPutMessage("No crystal information available!", 1);
      nStat = -1;
      delete poCrystal;
      return (nStat);
    }

  // Get absorption correction type

  nMethod    = _cUIom9ScaleAbscor->nGetValue();
  bUseReqab4 = FALSE;
  sMethodB   = "\n";

  if (1 == nMethod)
    {
      // Fourth order 3-D harmonic coefficients and 
      // fourth order 2-D harmonics coefficients

      sMethodA = " 4 4\n";
    }
  else if (2 == nMethod)
    {
      // Fourth order 3-D harmonics coefficients and batch scaling

      sMethodA = " 4 0\n";
    }
  else if (3 == nMethod)
    {
      // Fourth order 3-D harmonics coefficients 

      sMethodA = " 4 -1\n";
    }
  else if (4 == nMethod)
    {
      // Fourth order 2-D harmonics coefficients

      sMethodA = " 0 4\n";
    }
  else if (5 == nMethod)
    {
      // Third order 3-D harmonics coefficients and 
      // third order 2-D harmonics coefficients

      sMethodA = " 3 3\n";
    }
  else if (6 == nMethod)
    {
      // Batch scaling

      sMethodA = " 0 0\n";
    }
  else if (7 == nMethod)
    {
      // Fourier coefficents and batch scaling

      sMethodB = " 1\n2 ";
      sMethodA = " 26\n";
      bUseReqab4 = TRUE;
    }
  else if (8 == nMethod)
    {
      // Fourier coefficents

      sMethodB = " 0\n2 ";
      sMethodA = " 26\n";
      bUseReqab4 = TRUE;
    }
  else
    {
      // Batch scaling

      sMethodA = " 0 0\n";
    }

  // Create reqab control file which consists of:
  // comment
  // num_symops 1.00 0.02 0 sigma_ignore sMethodB
  // outlier_sigma 1.00e-06 sMethodA
  // symops_one_per_line

  if (bUseReqab4)
    sTemp = sTransSymbol("$(REQAB4.CTL)");
  else
    sTemp = sTransSymbol("$(REQABA.CTL)");

  poOut = new ofstream(sTemp);

  m_poHeader->nGetValue(Cimage_header::ms_sComment, &sTemp);

  *poOut << sTemp << '\n';

  nNumLaue = poCrystal->m_poSpacegroup->nGetNumLaue();
  *poOut << nNumLaue << " 1.00 0.020 0 " 
         << m_tDtscaleOptions.sExcludeSigma << sMethodB;

  *poOut << m_tDtscaleOptions.sAbscorRejectSigma << " 1.00e-06 " << sMethodA;
  
  for (i = 0; i < nNumLaue; i++)
    {
      *poOut << poCrystal->m_poSpacegroup->sGetEquivPos(i, 1) << '\n';
    }
  delete poCrystal;
  poOut->close();
  delete poOut;

  // Prepare the script to run

  sTemp = sTransSymbol("$(dtabscor)");
  poOut = new ofstream(sTemp);
  *poOut << "#!/bin/csh -f\n";  
  nDoSystemCommand("chmod a+x " + sTemp);
  *poOut << "# Reqab script file created by dtprocess\n";

  *poOut << '\n' << sTransSymbol("$(dtrefln2reqab)") << ' ' 
         << m_sReflnlistName << " && ";
  if (bUseReqab4)
    *poOut << sTransSymbol("$(reqab4)");
  else
    *poOut << sTransSymbol("$(reqaba)");
  
  *poOut << " && " << sTransSymbol("$(dtreqab2refln)") << ' '
         << m_sReflnlistName
         << "\n\n";

  *poOut << sTransSymbol("$(dtscalemerge)") << ' ' << m_sHeaderName
                                            << ' ' << sDtrekGetPrefix() 
                                            << "dtreqab.ref "
					    << *psCommand << '\n';
  *poOut << "#rm REQAB?.*\n";
  
  *psCommand = sTemp + ' ' + *psCommand;

  poOut->close();
  delete poOut;
  return (nStat);
}

void
MainWindow::vPreStartPublicCB(Widget w, XtPointer clientData, XtPointer callData)
{
  // This routine is intended to be called after the MainWindow->baseWidget()
  // is managed and popped up, but before XtAppMainLoop() is called in a
  // main() routine.

// If a command line argument says run dtdisplay, then run it
//
//  if (w == _pbUtilsDisplay)
//    vUtilsCB(w, NULL, NULL);

  // Pop-up dialog to load a header.

  if ((XtPointer)TRUE != callData)
    {
      vPopDialog(_pbFileHeader, NULL, NULL);
    }
  else
    {
      // Make sure given header is selected in _cslHeader.
      // nLoadHeader should have been called before this.

      m_sHeaderDir  = sFileGetDirectory(m_sHeaderName);
      if (m_sHeaderName.contains(".head"))
	m_sHeaderMask = m_sHeaderDir + "*.head";
      else if (m_sHeaderName.contains(".osc.Z"))
	m_sHeaderMask = m_sHeaderDir + "*.osc.Z";
      else if (m_sHeaderName.contains(".osc"))
	m_sHeaderMask = m_sHeaderDir + "*.osc";
      else
	m_sHeaderMask = m_sHeaderDir + "*";

      _cslHeader->vDeleteAll();
      if (_cUIfileFilter->bDoSearch(m_sHeaderMask))
	_cslHeader->vAddOtherList(_cUIfileFilter->wGetListWidget());
      if ("" != m_sHeaderName)
	{
	  Cstring sTemp = sFileGetBasename(m_sHeaderName);
//	  Display *dpy = XtDisplay(_pbCalibrate);
//	  XFlush(dpy);
//	  XmUpdateDisplay(_pbCalibrate);
	  
	  _cslHeader->vSetSelection(sTemp, True);
	}
    }
  vFlowChartCB(_pbCalibrate, NULL, NULL);
}

void
MainWindow::vDestroy(void)
{
//  cout << "vDestroy called\n" << flush;

  if (NULL != m_hGC)
    {
      XFreeGC(XtDisplay(_daFlowchart), m_hGC);
      m_hGC = NULL;
    }

  if (0 != m_hPixmap)
    {
      XFreePixmap(XtDisplay(_daFlowchart), m_hPixmap);
      m_hPixmap = 0;
    }

  if (NULL != m_poHeader)
    {
      delete m_poHeader;
      m_poHeader = NULL;
    }
  if (NULL != m_poXcursor)
    {
      delete m_poXcursor;
      m_poXcursor = NULL;
    }
  if (NULL != m_poXprop)
    {
      delete m_poXprop;
      m_poXprop = NULL;
    }
  if (NULL != m_poXhelp)
    {
      delete m_poXhelp;
      m_poXhelp = NULL;
    }

  if (NULL != m_poScan)
    {
      delete m_poScan;
      m_poScan = NULL;
    }
  if (NULL != m_ptClientDataStructs)
    {
      delete [] m_ptClientDataStructs;
      m_ptClientDataStructs = NULL;
    }
}
void
MainWindow::vSetResoOther(Widget wResoIn, Widget wResoOther, 
			  Cstring sResoOtherIn, Cstring *psResoSet)
{
  char *pcTemp, *pcResoIn;
  float fResoIn, fResoOther;
  float fResoSet;

  // Retrieve values of the text field in the resolution widgets

  // TO DO: More error checking, what if pctemp is not a number?

  pcTemp     = XmTextFieldGetString(wResoOther);
  fResoOther = atof(pcTemp);
  XtFree(pcTemp);
  pcResoIn   = XmTextFieldGetString(wResoIn);
  fResoIn    = atof(pcResoIn);
  fResoSet   = atof(sResoOtherIn.string());

  if ( (0.0 != fResoOther) && (0.0 == fResoIn) )
    {
      fResoSet         = 0.0;
      *psResoSet       = *pcResoIn;  // Use same string for 0.0
      XmTextFieldSetString(wResoOther, psResoSet->string());
    }
  else if ( (0.0 != fResoIn) && (0.0 == fResoOther) )
    {
      *psResoSet = sResoOtherIn;
      XmTextFieldSetString(wResoOther, psResoSet->string());
    }
  XtFree(pcResoIn);
}
// End user code block <tail>
