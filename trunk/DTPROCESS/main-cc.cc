//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
//////////////////////////////////////////////////////////////////////
//
// Created by Builder Xcessory Version 5.0.
// Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//////////////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// main-cc.cc           Initial author: J.W. Pflugrath           9-Apr-1997
//    This file contains the main routine for dtprocess.
//    It was automatically generated by ICS Builder Xcessory and modified.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

//
// Motif.
//
#include <X11/StringDefs.h>
#include <Xm/Xm.h>
#include <Xm/DialogS.h>
#include <Xm/MwmUtil.h>
#if (XmVersion >= 1002)
#include <Xm/RepType.h>
#endif

//
// Globally included information (change thru Output File Names Dialog).
//


//
// Headers for classes used in this program.
//
#include "CUIfileFilter.h"
#include "CUIscrolledlist.h"
#include "CUIviewheader.h"
#include "CUInumberField.h"
#include "CUItextnumArrow.h"
#include "CUIom9.h"
#include "CUIheaderEdit.h"
#include "MainWindow.h"

using std::cin;
using std::cout;
using std::endl;
using std::flush;

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);
//
// Function declarations for shell callbacks..
//

// Begin user code block <globals>
// End user code block <globals>
//
// Change this line via the Output Application Names Dialog.
//
#define BX_APP_CLASS "Dtprocess"

int main ( int argc, char **argv )
{
    Widget       parent;
    XtAppContext app;
    Arg          args[256];
    Cardinal     ac;
    Boolean      argok=False;
    
    // Begin user code block <declarations>
    vModifyDISPLAY();
    // End user code block <declarations>
    
    // Initialize Xt. 
    //
    // The shell returned by XtAppInitialize is used as an unrealized
    // parent for multiple shell.  Each shell in this program
    // is created as a popup child of the main applicationShell.
    // This is a recommendation of Paul Asente & Ralph Swick in
    // "X Window System Toolkit", p. 677.
    
    parent = XtVaAppInitialize ( &app, BX_APP_CLASS, NULL, 0, 
#ifndef XlibSpecificationRelease
    (Cardinal *) &argc, 
#else
#if (XlibSpecificationRelease>=5)
    &argc, 
#else
    (Cardinal *) &argc, 
#endif
#endif
    argv, NULL, 
    NULL );
    
    RegisterBxConverters(app);
#if (XmVersion >= 1002) 
    XmRepTypeInstallTearOffModelConverter();
#endif
    
    // Begin user code block <create_shells>

    // Start dtdisplay unless one of the first 2 command line arguments
    // was -nodisplay

    if ( (1 < argc) && (0 == strcmp("-nodisplay", argv[1])) )
      {
	argc--;
	argv++;
      }
    else if ( (2 < argc) && (0 == strcmp("-nodisplay", argv[2])) )
      {
	// Do nothing
      }
    else
      {
	// -nodisplay not found, so start dtdisplay...

	cout << "... dtprocess: also starting dtdisplay, ... use -nodisplay to prevent this." << endl;
	nDoSystemCommand(sTransSymbol("$(dtdisplay)") + '&');
      }

    // End user code block <create_shells>
    //
    // Instantiate the classes used in this program.
    //
    
    
    // Begin user code block <create_dtprocess>
    // End user code block <create_dtprocess>
    
    Widget dtprocess;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 93); ac++;
    XtSetArg(args[ac], XmNy, 185); ac++;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 720); ac++;
    dtprocess = XtCreatePopupShell("dtprocess",
        topLevelShellWidgetClass,
        parent,
        args, 
        ac);
    
    MainWindow *_mainWindow = new MainWindow("mainWindow");
    
    // Begin user code block <new_mainWindow>
    // End user code block <new_mainWindow>
    
    _mainWindow->create(dtprocess);
    _mainWindow->manage();
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 93); ac++;
    XtSetArg(args[ac], XmNy, 185); ac++;
    XtSetArg(args[ac], XmNwidth, 1090); ac++;
    XtSetArg(args[ac], XmNheight, 720); ac++;
    XtSetValues(_mainWindow->baseWidget(), args, ac);
    XtPopup(dtprocess, XtGrabNone);
    
    // Begin user code block <app_procedures>
    // End user code block <app_procedures>
    
    // Begin user code block <main_loop>

    _mainWindow->m_hAppContext = app;  // Let mainwindow know about AppContext

    if (1 < argc)
      {
	// Filename argument on the command line.  So try to read it.

	(void) _mainWindow->nLoadHeader((Cstring)argv[1], TRUE);
	_mainWindow->vPreStartPublicCB(_mainWindow->baseWidget(), NULL, (XtPointer)TRUE);
      }
    else
      {
	// Pop up dialog to get a header ...

	_mainWindow->vPreStartPublicCB(_mainWindow->baseWidget(), NULL, (XtPointer)FALSE);
      }
    // End user code block <main_loop>
    
    XtAppMainLoop(app);
    
    //
    // A return value even though the event loop never ends. 
    //
     return(0); 
}
