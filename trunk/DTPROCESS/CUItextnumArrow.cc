//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for CUItextnumArrow
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// CUItextnumArrow.cc       Initial author: J.W. Pflugrath           9-Apr-1997
//    Class implementation for a user interface widget to adjust textfield
//    numbers with arrow buttons.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/Form.h>
#include <Xm/Label.h>
#include <Xm/ArrowB.h>
#include <Xm/PushB.h>
#include "CUItextnumArrow.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>
#include <Xm/TextF.h>
#include <math.h>
#include "Dtrek.h"
#include "minmax.h"
// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean CUItextnumArrow::_initAppDefaults = True;
UIAppDefault  CUItextnumArrow::_appDefaults[] = {
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  CUItextnumArrow::_defaultCUItextnumArrowResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
CUItextnumArrow::CUItextnumArrow(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
CUItextnumArrow::CUItextnumArrow(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>
  m_wTextField          = (Widget)NULL;
  m_apwArrowButtons[ 0] = &_abUp1;
  m_apwArrowButtons[ 1] = &_abUp2;
  m_apwArrowButtons[ 2] = &_abUp3;
  m_apwArrowButtons[ 3] = &_abUp4;
  m_apwArrowButtons[ 4] = &_abUp5;
  m_apwArrowButtons[ 5] = &_abUp6;
  m_apwArrowButtons[ 6] = &_abUp7;
  m_apwArrowButtons[ 7] = &_abUp8;
  m_apwArrowButtons[ 8] = &_abUp9;
  m_apwArrowButtons[ 9] = &_abUp10;
  m_apwArrowButtons[10] = &_abDown1;
  m_apwArrowButtons[11] = &_abDown2;
  m_apwArrowButtons[12] = &_abDown3;
  m_apwArrowButtons[13] = &_abDown4;
  m_apwArrowButtons[14] = &_abDown5;
  m_apwArrowButtons[15] = &_abDown6;
  m_apwArrowButtons[16] = &_abDown7;
  m_apwArrowButtons[17] = &_abDown8;
  m_apwArrowButtons[18] = &_abDown9;
  m_apwArrowButtons[19] = &_abDown10;
  int i;
  for (i = 0; i < 10; i++)
    {
      m_dIncrement[i] = pow((double)10.0, double(5 - i - 1));
    }
    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
CUItextnumArrow::~CUItextnumArrow() 
{
    
    // Begin user code block <destructor>
    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void CUItextnumArrow::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[24];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultCUItextnumArrowResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "CUItextnumArrow", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmArrowButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmPushButtonWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNautoUnmanage, False); ac++;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 938); ac++;
    XtSetArg(args[ac], XmNy, 129); ac++;
    XtSetArg(args[ac], XmNwidth, 291); ac++;
    XtSetArg(args[ac], XmNheight, 202); ac++;
    _CUItextnumArrow = XmCreateForm(parent,
        _name,
        args, 
        ac);
    
    _w = _CUItextnumArrow;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_CUItextnumArrow, ".", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 131); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 29); ac++;
    XtSetArg(args[ac], XmNheight, 101); ac++;
    _lbDecimal = XmCreateLabel(_CUItextnumArrow,
        "lbDecimal",
        args, 
        ac);
    XtManageChild(_lbDecimal);
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 265); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp10 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp10",
        args, 
        ac);
    XtManageChild(_abUp10);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp10,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 239); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp9 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp9",
        args, 
        ac);
    XtManageChild(_abUp9);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp9,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 212); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 27); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp8 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp8",
        args, 
        ac);
    XtManageChild(_abUp8);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp8,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 186); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp7 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp7",
        args, 
        ac);
    XtManageChild(_abUp7);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp7,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp6 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp6",
        args, 
        ac);
    XtManageChild(_abUp6);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp6,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 105); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp5 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp5",
        args, 
        ac);
    XtManageChild(_abUp5);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp5,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 265); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown10 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown10",
        args, 
        ac);
    XtManageChild(_abDown10);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown10,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 239); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown9 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown9",
        args, 
        ac);
    XtManageChild(_abDown9);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown9,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 212); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 27); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown8 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown8",
        args, 
        ac);
    XtManageChild(_abDown8);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown8,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 186); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown7 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown7",
        args, 
        ac);
    XtManageChild(_abDown7);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown7,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown6 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown6",
        args, 
        ac);
    XtManageChild(_abDown6);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown6,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 105); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown5 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown5",
        args, 
        ac);
    XtManageChild(_abDown5);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown5,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_CUItextnumArrow, "Recall", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 152); ac++;
    XtSetArg(args[ac], XmNwidth, 146); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _pbRecall = XmCreatePushButton(_CUItextnumArrow,
        "pbRecall",
        args, 
        ac);
    XtManageChild(_pbRecall);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbRecall,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 79); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp4 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp4",
        args, 
        ac);
    XtManageChild(_abUp4);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp4,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 79); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown4 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown4",
        args, 
        ac);
    XtManageChild(_abDown4);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown4,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 52); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 27); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown3 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown3",
        args, 
        ac);
    XtManageChild(_abDown3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown3,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 52); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 27); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp3 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp3",
        args, 
        ac);
    XtManageChild(_abUp3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp3,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_CUItextnumArrow, "Cancel", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 146); ac++;
    XtSetArg(args[ac], XmNy, 101); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _pbCancel = XmCreatePushButton(_CUItextnumArrow,
        "pbCancel",
        args, 
        ac);
    XtManageChild(_pbCancel);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCancel,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_CUItextnumArrow, "Zero", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 101); ac++;
    XtSetArg(args[ac], XmNwidth, 146); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _pbClear = XmCreatePushButton(_CUItextnumArrow,
        "pbClear",
        args, 
        ac);
    XtManageChild(_pbClear);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbClear,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 26); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown2 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown2",
        args, 
        ac);
    XtManageChild(_abDown2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown2,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 26); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp2 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp2",
        args, 
        ac);
    XtManageChild(_abUp2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp2,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_DOWN); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 51); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _abDown1 = XmCreateArrowButton(_CUItextnumArrow,
        "abDown1",
        args, 
        ac);
    XtManageChild(_abDown1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abDown1,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_UP); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 26); ac++;
    XtSetArg(args[ac], XmNheight, 51); ac++;
    _abUp1 = XmCreateArrowButton(_CUItextnumArrow,
        "abUp1",
        args, 
        ac);
    XtManageChild(_abUp1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abUp1,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_CUItextnumArrow, "Enter", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNx, 146); ac++;
    XtSetArg(args[ac], XmNy, 152); ac++;
    XtSetArg(args[ac], XmNwidth, 145); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _pbEnter = XmCreatePushButton(_CUItextnumArrow,
        "pbEnter",
        args, 
        ac);
    XtManageChild(_pbEnter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEnter,
        XmNactivateCallback,
        CUItextnumArrow::vButtonCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 55); ac++;
    XtSetArg(args[ac], XmNleftPosition, 45); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbDecimal, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 100); ac++;
    XtSetArg(args[ac], XmNleftPosition, 91); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp10, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 91); ac++;
    XtSetArg(args[ac], XmNleftPosition, 82); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp9, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 82); ac++;
    XtSetArg(args[ac], XmNleftPosition, 73); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp8, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 73); ac++;
    XtSetArg(args[ac], XmNleftPosition, 64); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp7, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 64); ac++;
    XtSetArg(args[ac], XmNleftPosition, 55); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp6, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 45); ac++;
    XtSetArg(args[ac], XmNleftPosition, 36); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp5, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 100); ac++;
    XtSetArg(args[ac], XmNleftPosition, 91); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown10, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 91); ac++;
    XtSetArg(args[ac], XmNleftPosition, 82); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown9, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 82); ac++;
    XtSetArg(args[ac], XmNleftPosition, 73); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown8, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 73); ac++;
    XtSetArg(args[ac], XmNleftPosition, 64); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown7, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 64); ac++;
    XtSetArg(args[ac], XmNleftPosition, 55); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown6, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 45); ac++;
    XtSetArg(args[ac], XmNleftPosition, 36); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown5, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 75); ac++;
    XtSetArg(args[ac], XmNrightPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftPosition, 0); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 100); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_pbRecall, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 36); ac++;
    XtSetArg(args[ac], XmNleftPosition, 27); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 36); ac++;
    XtSetArg(args[ac], XmNleftPosition, 27); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abDown4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 27); ac++;
    XtSetArg(args[ac], XmNleftPosition, 18); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abDown3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 27); ac++;
    XtSetArg(args[ac], XmNleftPosition, 18); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abUp3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 50); ac++;
    XtSetArg(args[ac], XmNrightPosition, 100); ac++;
    XtSetArg(args[ac], XmNleftPosition, 50); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 75); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_pbCancel, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 50); ac++;
    XtSetArg(args[ac], XmNrightPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftPosition, 0); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 75); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_pbClear, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 18); ac++;
    XtSetArg(args[ac], XmNleftPosition, 9); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abDown2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 18); ac++;
    XtSetArg(args[ac], XmNleftPosition, 9); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abUp2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 25); ac++;
    XtSetArg(args[ac], XmNrightPosition, 9); ac++;
    XtSetArg(args[ac], XmNleftPosition, 0); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 50); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abDown1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopPosition, 0); ac++;
    XtSetArg(args[ac], XmNrightPosition, 9); ac++;
    XtSetArg(args[ac], XmNleftPosition, 0); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 25); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_abUp1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNtopPosition, 75); ac++;
    XtSetArg(args[ac], XmNrightPosition, 100); ac++;
    XtSetArg(args[ac], XmNleftPosition, 50); ac++;
    XtSetArg(args[ac], XmNbottomPosition, 100); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_pbEnter, args, ac);
    
    
    // Begin user code block <endcreate>
    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const CUItextnumArrow::className()
{
    return ("CUItextnumArrow");
}

void CUItextnumArrow::vButtonCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUItextnumArrow *obj = (CUItextnumArrow *)data->object;
    obj->vButtonCB(w, (XtPointer) data->client_data, callData);
}

void CUItextnumArrow::vButtonCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vButtonCB>
  int  i;
  XmTextPosition nCursorPos = -1;
  bool bUpdateNumber = TRUE;
  bool bUnmanage     = FALSE;
  if (XmIsArrowButton(w))
    {
      // Which arrow button is it?
      
      for (i = 0; i < 20; i++)
	{
	  if (w == *(m_apwArrowButtons[i]))
	    break;
	}
      if (20 <= i)
	return;           // Unknown arrow button
      else if (9 < i)
	m_dNumber = m_dNumber - m_dIncrement[i-10];
      else
	m_dNumber = m_dNumber + m_dIncrement[i];
    }
  else if (w == _pbCancel)
    {
      m_dNumber = m_dNumberOrig;
      bUnmanage = TRUE;
    }
  else if (w == _pbRecall)
    {
      m_dNumber = m_dNumberOrig;
    }
  else if (w == _pbEnter)
    {
      bUpdateNumber = FALSE;
//      bUnmanage     = TRUE;
    }
  else if (w == _pbClear)
    {
      m_dNumber = 0.0;
    }

  if ( (bUpdateNumber) && ((Widget)NULL != m_wTextField) )
    {
      char a255cTemp[255];
      sprintf(a255cTemp, m_sFormat.string(), m_dNumber);
      m_sTextCurr = a255cTemp;
      XmTextFieldSetString(m_wTextField, m_sTextCurr.string());
    }
  if (bUnmanage)
    {
      XtUnmanageChild(baseWidget());
    }

    // End user code block <vButtonCB>
}

// Begin user code block <tail>
void CUItextnumArrow::vSetTextField(Widget w)
{
  char *pcTemp;

  if (!XmIsTextField(w))
    {
//      unmanage();
      return;
    }

  pcTemp = XmTextFieldGetString(w);
  m_sTextOrig = pcTemp;
  m_sTextCurr = m_sTextOrig;
  XtFree(pcTemp);

  int nDecimal;
  int nStat;
  int i;

  // See how many decimal
  // places there are and use that to determine how the arrow buttons work
  
  nDecimal     = m_sTextOrig.find('.');
  if (0 > nDecimal)
    {
      nDecimal = 0;
    }
  else
    {
      nDecimal = m_sTextOrig.length() - nDecimal - 1;
      if (0 > nDecimal) nDecimal = 0;
    }

  // Figure out which arrow buttons to manage/unmanage

  for (i = 5; i < 10; i++)
    {
      if ((i - 5) < nDecimal)
	{
	  XtManageChild(*(m_apwArrowButtons[i]));
	  XtManageChild(*(m_apwArrowButtons[i+10]));
	}
      else
	{
	  XtUnmanageChild(*(m_apwArrowButtons[i]));
	  XtUnmanageChild(*(m_apwArrowButtons[i+10]));
	}
    }

  // Figure out format string to use when updating textfield widget

  m_sFormat = (Cstring)"%." + (Cstring) nDecimal + "lf";
  nStat = sscanf(m_sTextOrig.string(), "%lf", &m_dNumberOrig);
//  cout << "nDecimal = " << i << " Number = " << m_dNumberOrig << endl;
  m_dNumber = m_dNumberOrig;

  if (1 != nStat) return;

//  if (    (w != m_wTextField) 
//      || !XtIsManaged(baseWidget()) )
  if (!XtIsManaged(baseWidget()))
    {
      // Compute size and where to manage the widget

      Widget wParent;
      Dimension nWidth, nHeight, nX, nY;
      Dimension nXroot, nYroot;
      XtVaGetValues(w, XmNwidth, &nWidth, XmNheight, &nHeight, 
		    XmNx, &nXroot, XmNy, &nYroot, NULL);
  
      // Get the parent shell so we know which window title gets the help lines

      wParent = XtParent(w);
      while (wParent)
	{
	  XtVaGetValues(wParent, XmNx, &nX, XmNy, &nY, NULL);
	  nXroot += nX;
	  nYroot += nY;
	  wParent = XtParent(wParent);
	}

      XtVaSetValues(XtParent(baseWidget()), 
		    XmNx, nXroot, XmNy, nYroot + (2 * nHeight), NULL);
      XtVaSetValues(baseWidget(), XmNwidth, max(100, nWidth), 
		    XmNheight, max(125, 5*nHeight/2), 
		    NULL);
      manage();
    }
  m_wTextField = w;
}
// End user code block <tail>
