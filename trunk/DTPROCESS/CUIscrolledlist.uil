/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 */
/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Version 5.0.
 *
 * Identification: 
 */
!(CX)procedure vSelectCB();


object cUIscrolledlist_frFrame : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 15;
        XmNx = 0;
        XmNy = 15;
        XmNwidth = 192;
        XmNheight = 285;
    };
    controls {
    };
    callbacks {
    };
};

object cUIscrolledlist_lbTitle : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Images");
!(BX)   cUIscrolledlist_lbTitle _XmNlabelString = compound_string("Images");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
!(BX)   cUIscrolledlist_lbTitle XmNleftOffset = 10;
        XmNtopOffset = 0;
        XmNx = 10;
        XmNy = 0;
        XmNwidth = 100;
!(BX)   cUIscrolledlist_lbTitle XmNwidth = 100;
        XmNheight = 30;
!(BX)   cUIscrolledlist_lbTitle XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object cUIscrolledlist_liList : XmList widget {
    arguments {
        XmNvisibleItemCount = 11;
!(BX)   cUIscrolledlist_liList XmNvisibleItemCount = 11;
!(BX)   _XmNitemCount = 1;
!(BX)   _XmNitems = string_table(
!(BX)	compound_string("No items."));
        XmNselectionPolicy = XmEXTENDED_SELECT;
!(BX)   cUIscrolledlist_liList XmNselectionPolicy = XmEXTENDED_SELECT;
        XmNautomaticSelection = false;
        XmNlistSizePolicy = XmRESIZE_IF_POSSIBLE;
!(BX)   cUIscrolledlist_liList XmNlistSizePolicy = XmRESIZE_IF_POSSIBLE;
        XmNwidth = 188;
    };
    controls {
    };
    callbacks {
        XmNhelpCallback = procedure vSelectCB();
        XmNsingleSelectionCallback = procedure vSelectCB();
        XmNmultipleSelectionCallback = procedure vSelectCB();
        XmNextendedSelectionCallback = procedure vSelectCB();
        XmNdefaultActionCallback = procedure vSelectCB();
        XmNbrowseSelectionCallback = procedure vSelectCB();
    };
};

object cUIscrolledlist_swList : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 40;
        XmNbottomWidget = XmFrame cUIscrolledlist_frFrame;
        XmNleftOffset = 2;
        XmNrightOffset = 2;
        XmNtopOffset = 0;
        XmNleftWidget = XmFrame cUIscrolledlist_frFrame;
        XmNrightWidget = XmFrame cUIscrolledlist_frFrame;
        XmNtopWidget = XmLabel cUIscrolledlist_lbTitle;
        XmNx = 2;
        XmNy = 30;
        XmNwidth = 188;
        XmNheight = 230;
    };
    controls {
         managed XmList cUIscrolledlist_liList;
    };
    callbacks {
    };
};

object cUIscrolledlist_pbSelectAll : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Select", separate=true) &
!(BX) compound_string("All");
!(BX)   cUIscrolledlist_pbSelectAll _XmNlabelString = compound_string("Select", separate=true) &
!(BX) compound_string("All");
        XmNrecomputeSize = false;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNresizable = false;
        XmNbottomOffset = 2;
        XmNbottomWidget = XmFrame cUIscrolledlist_frFrame;
        XmNrightPosition = 50;
        XmNleftOffset = 2;
        XmNtopOffset = 2;
        XmNleftWidget = XmFrame cUIscrolledlist_frFrame;
        XmNtopWidget = XmScrolledWindow cUIscrolledlist_swList;
        XmNx = 2;
        XmNy = 262;
        XmNwidth = 94;
        XmNheight = 36;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure vSelectCB();
    };
};

object cUIscrolledlist_pbDeselectAll : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Deselect", separate=true) &
!(BX) compound_string("All");
!(BX)   cUIscrolledlist_pbDeselectAll _XmNlabelString = compound_string("Deselect", separate=true) &
!(BX) compound_string("All");
        XmNrecomputeSize = false;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNresizable = false;
        XmNbottomOffset = 2;
        XmNbottomWidget = XmFrame cUIscrolledlist_frFrame;
        XmNleftPosition = 50;
        XmNleftOffset = 0;
        XmNrightOffset = 2;
        XmNtopOffset = 2;
        XmNrightWidget = XmFrame cUIscrolledlist_frFrame;
        XmNtopWidget = XmScrolledWindow cUIscrolledlist_swList;
        XmNx = 96;
        XmNy = 262;
        XmNwidth = 94;
        XmNheight = 36;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure vSelectCB();
    };
};

object cUIscrolledlist_foForm : XmForm widget {
    arguments {
!(BX) BxNclassOnly = "CUIscrolledlist";
!(BX) BxNsubclassDerived = "False";
!(BX) BxNclassOnlyFile = "True";
!(BX) BxNbaseInclude = asciz_string_table('');
!(BX) BxNderivedInclude = asciz_string_table('');
!(BX) BxNderived = "CUIscrolledlistDerived";
!(BX) BxNfilebase = "CUIscrolledlistDerived";
!(BX) BxNclassFilebase = "CUIscrolledlist";
!(BX) BxNclassGeometry = "192x300+100+100";
!(BX) BxNgenerate = "False";
!(BX) BxNreference = "True";
!(BX) BxNpaletteGroup = "User Classes";
!(BX) BxNpaletteName = "cUIscrolledlist";
!(BX) BxNpaletteGeom = "+0+0";
!(BX) BxNpalettePixmapName = "Class";
        XmNtraversalOn = true;
        XmNresizePolicy = XmRESIZE_ANY;
        XmNx = 100;
        XmNy = 100;
        XmNwidth = 192;
!(BX)   cUIscrolledlist_foForm XmNwidth = 192;
        XmNheight = 300;
!(BX)   cUIscrolledlist_foForm XmNheight = 300;
    };
    controls {
         managed XmPushButton cUIscrolledlist_pbDeselectAll;
         managed XmPushButton cUIscrolledlist_pbSelectAll;
         managed XmScrolledWindow cUIscrolledlist_swList;
         managed XmLabel cUIscrolledlist_lbTitle;
         managed XmFrame cUIscrolledlist_frFrame;
    };
    callbacks {
    };
};
