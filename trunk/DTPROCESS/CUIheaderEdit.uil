/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 */
/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Version 5.0.
 *
 * Identification: 
 */
!(CX)procedure AddKeywordCB();
!(CX)procedure ReplaceValueCB();
!(CX)procedure DeleteKeywordCB();
!(CX)procedure KeywordChangedCB();
!(CX)procedure KeywordSelectedCB();
!(CX)procedure ChangeMenuCB();
!(CX)procedure ClassHelpCB();
!(CX)procedure ChangeUnitCellCB();
!(CX)procedure ChangeCrystSpaceGroup();
!(CX)procedure ChangeCrystMosaicityCB();
!(CX)procedure ChangeCrystOrientCB();
!(CX)procedure ChangeDetGonioCB();
!(CX)procedure ChangeSourceWavelengthCB();
!(CX)procedure ChangeSourceRotCB();
!(CX)procedure ChangeDirectBeamCB();
!(CX)procedure ChangeHeaderCB(string);
!(CX)procedure ChangeCommentCB(string);


object cUIheaderEdit_mdGetValueError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Error getting value");
!(BX)   cUIheaderEdit_mdGetValueError _XmNdialogTitle = compound_string("Error getting value");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("The value for the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("could not be extracted from the header.");
!(BX)   cUIheaderEdit_mdGetValueError _XmNmessageString = compound_string("The value for the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("could not be extracted from the header.");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsGetValueError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 146;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdGetValueError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdValueError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Invalid value");
!(BX)   cUIheaderEdit_mdValueError _XmNdialogTitle = compound_string("Invalid value");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("The value for the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("contains an invalid character.  The", separate=true) &
!(BX) compound_string("characters }, {, and ; are not allowed.");
!(BX)   cUIheaderEdit_mdValueError _XmNmessageString = compound_string("The value for the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("contains an invalid character.  The", separate=true) &
!(BX) compound_string("characters }, {, and ; are not allowed.");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsValueError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 163;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdValueError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdReplaceValueError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Replace keyword/value error");
!(BX)   cUIheaderEdit_mdReplaceValueError _XmNdialogTitle = compound_string("Replace keyword/value error");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("Can not replace the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("in the header.", separate=true);
!(BX)   cUIheaderEdit_mdReplaceValueError _XmNmessageString = compound_string("Can not replace the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("in the header.", separate=true);
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsReplaceValueError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 163;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdReplaceValueError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdAddKeywordError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Add keyword/value error");
!(BX)   cUIheaderEdit_mdAddKeywordError _XmNdialogTitle = compound_string("Add keyword/value error");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("Can not add the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("to the header.", separate=true);
!(BX)   cUIheaderEdit_mdAddKeywordError _XmNmessageString = compound_string("Can not add the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("to the header.", separate=true);
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsAddKeywordError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 163;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdAddKeywordError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdDeleteKeywordError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Delete keyword error");
!(BX)   cUIheaderEdit_mdDeleteKeywordError _XmNdialogTitle = compound_string("Delete keyword error");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("Can not delete the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("from the header.");
!(BX)   cUIheaderEdit_mdDeleteKeywordError _XmNmessageString = compound_string("Can not delete the keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("from the header.");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsDeleteKeywordError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 146;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdDeleteKeywordError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdKeywordLengthError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Invalid keyword length");
!(BX)   cUIheaderEdit_mdKeywordLengthError _XmNdialogTitle = compound_string("Invalid keyword length");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("The keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("has an invalid length of");
!(BX)   cUIheaderEdit_mdKeywordLengthError _XmNmessageString = compound_string("The keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("has an invalid length of");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsKeywordLengthError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 146;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdKeywordLengthError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdKeywordCharacterError : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Invalid keyword character");
!(BX)   cUIheaderEdit_mdKeywordCharacterError _XmNdialogTitle = compound_string("Invalid keyword character");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("The keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("contains an invalid character.  Only", separate=true) &
!(BX) compound_string("alphanumeric (A-Z, a-z, 0-9) and ", separate=true) &
!(BX) compound_string("underscore (_) characters can be used.");
!(BX)   cUIheaderEdit_mdKeywordCharacterError _XmNmessageString = compound_string("The keyword", separate=true) &
!(BX) compound_string("%s", separate=true) &
!(BX) compound_string("contains an invalid character.  Only", separate=true) &
!(BX) compound_string("alphanumeric (A-Z, a-z, 0-9) and ", separate=true) &
!(BX) compound_string("underscore (_) characters can be used.");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsKeywordCharacterError : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 715;
!(BX)        XmNy = 803;
!(BX)        XmNwidth = 44;
!(BX)        XmNheight = 1;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdKeywordCharacterError;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_mdProtectedKeywordWarning : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Protected keyword warning");
!(BX)   cUIheaderEdit_mdProtectedKeywordWarning _XmNdialogTitle = compound_string("Protected keyword warning");
        XmNdialogType = XmDIALOG_WARNING;
!(BX)   _XmNmessageString = compound_string("You are about to modify a keywor" &
!(BX) "d which is", separate=true) &
!(BX) compound_string("crucial to the correct interpretation of this header.", separate=true) &
!(BX) compound_string("If you make a mistake in editing this keyword,", separate=true) &
!(BX) compound_string("you will find that none of the other programs in the", separate=true) &
!(BX) compound_string("d*trek package will be able to read this header.");
!(BX)   cUIheaderEdit_mdProtectedKeywordWarning _XmNmessageString = compound_string("You are about to modify a keywor" &
!(BX) "d which is", separate=true) &
!(BX) compound_string("crucial to the correct interpretation of this header.", separate=true) &
!(BX) compound_string("If you make a mistake in editing this keyword,", separate=true) &
!(BX) compound_string("you will find that none of the other programs in the", separate=true) &
!(BX) compound_string("d*trek package will be able to read this header.");
    };
    controls {
    };
    callbacks {
    };
};

!(BX)object cUIheaderEdit_dsProtectedKeywordWarning : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 373;
!(BX)        XmNy = 714;
!(BX)        XmNwidth = 685;
!(BX)        XmNheight = 180;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog cUIheaderEdit_mdProtectedKeywordWarning;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cUIheaderEdit_pbPageSource : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Source", separate=true) &
!(BX) compound_string("Properties");
!(BX)   cUIheaderEdit_pbPageSource _XmNlabelString = compound_string("Source", separate=true) &
!(BX) compound_string("Properties");
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmPushButton cUIheaderEdit_pbPageDet;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNx = 286;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ChangeMenuCB();
    };
};

object cUIheaderEdit_pbPageDet : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Detector", separate=true) &
!(BX) compound_string("Properties");
!(BX)   cUIheaderEdit_pbPageDet _XmNlabelString = compound_string("Detector", separate=true) &
!(BX) compound_string("Properties");
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNx = 156;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ChangeMenuCB();
    };
};

object cUIheaderEdit_pbPageCryst : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Crystal ", separate=true) &
!(BX) compound_string("Properties");
!(BX)   cUIheaderEdit_pbPageCryst _XmNlabelString = compound_string("Crystal ", separate=true) &
!(BX) compound_string("Properties");
        XmNshadowThickness = 1;
        XmNhighlightThickness = 0;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 30;
        XmNtopOffset = 0;
        XmNx = 30;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ChangeMenuCB();
    };
};

object cUIheaderEdit_pbPageMisc : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("All", separate=true) &
!(BX) compound_string("Properties");
!(BX)   cUIheaderEdit_pbPageMisc _XmNlabelString = compound_string("All", separate=true) &
!(BX) compound_string("Properties");
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmPushButton cUIheaderEdit_pbPageSource;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNx = 416;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ChangeMenuCB();
    };
};

object cUIheaderEdit_lSourceWavelength : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Wavelength");
!(BX)   cUIheaderEdit_lSourceWavelength _XmNlabelString = compound_string("Wavelength");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfSourceWavelength : XmTextField widget {
    arguments {
        XmNcolumns = 8;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeSourceWavelengthCB();
        XmNactivateCallback = procedure ChangeSourceWavelengthCB();
    };
};

object cUIheaderEdit_frSourceWavelength : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
    };
    controls {
         managed XmLabel cUIheaderEdit_lSourceWavelength;
         managed XmTextField cUIheaderEdit_tfSourceWavelength;
    };
    callbacks {
    };
};

object cUIheaderEdit_lSourceRot : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Rotations");
!(BX)   cUIheaderEdit_lSourceRot _XmNlabelString = compound_string("Rotations");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfSourceRot1 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeSourceRotCB();
        XmNactivateCallback = procedure ChangeSourceRotCB();
    };
};

object cUIheaderEdit_tfSourceRot2 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeSourceRotCB();
        XmNactivateCallback = procedure ChangeSourceRotCB();
    };
};

object cUIheaderEdit_rcSourceRot : XmRowColumn widget {
    arguments {
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
        XmNwidth = 237;
        XmNheight = 41;
    };
    controls {
         managed XmTextField cUIheaderEdit_tfSourceRot1;
         managed XmTextField cUIheaderEdit_tfSourceRot2;
    };
    callbacks {
    };
};

object cUIheaderEdit_frSourceRot : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmFrame cUIheaderEdit_frSourceWavelength;
        XmNtopWidget = XmFrame cUIheaderEdit_frSourceWavelength;
        XmNheight = 69;
    };
    controls {
         managed XmLabel cUIheaderEdit_lSourceRot;
         managed XmRowColumn cUIheaderEdit_rcSourceRot;
    };
    callbacks {
    };
};

object cUIheaderEdit_foPageSource : XmForm widget {
    arguments {
        XmNshadowType = XmSHADOW_IN;
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 10;
        XmNtopOffset = -3;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageSource;
    };
    controls {
         managed XmFrame cUIheaderEdit_frSourceRot;
         managed XmFrame cUIheaderEdit_frSourceWavelength;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetTrans1 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("TransX");
!(BX)   cUIheaderEdit_lDetTrans1 _XmNlabelString = compound_string("TransX");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetTrans2 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("TransY");
!(BX)   cUIheaderEdit_lDetTrans2 _XmNlabelString = compound_string("TransY");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetTrans3 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("Dist");
!(BX)   cUIheaderEdit_lDetTrans3 _XmNlabelString = compound_string("Dist");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfDetTrans1 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_tfDetTrans2 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_tfDetTrans3 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_rcDetTrans : XmRowColumn widget {
    arguments {
        XmNnumColumns = 2;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNpacking = XmPACK_COLUMN;
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
         managed XmLabel cUIheaderEdit_lDetTrans1;
         managed XmLabel cUIheaderEdit_lDetTrans2;
         managed XmLabel cUIheaderEdit_lDetTrans3;
         managed XmTextField cUIheaderEdit_tfDetTrans1;
         managed XmTextField cUIheaderEdit_tfDetTrans2;
         managed XmTextField cUIheaderEdit_tfDetTrans3;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetTrans : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Translations");
!(BX)   cUIheaderEdit_lDetTrans _XmNlabelString = compound_string("Translations");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_frDetTrans : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmFrame cUIheaderEdit_frDetRot;
        XmNtopWidget = XmFrame cUIheaderEdit_frDetRot;
    };
    controls {
         managed XmRowColumn cUIheaderEdit_rcDetTrans;
         managed XmLabel cUIheaderEdit_lDetTrans;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetRot1 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("RotZ");
!(BX)   cUIheaderEdit_lDetRot1 _XmNlabelString = compound_string("RotZ");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetRot2 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("Swing");
!(BX)   cUIheaderEdit_lDetRot2 _XmNlabelString = compound_string("Swing");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetRot3 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("RotY");
!(BX)   cUIheaderEdit_lDetRot3 _XmNlabelString = compound_string("RotY");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfDetRot1 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_tfDetRot2 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_tfDetRot3 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDetGonioCB();
        XmNactivateCallback = procedure ChangeDetGonioCB();
    };
};

object cUIheaderEdit_rcDetRot : XmRowColumn widget {
    arguments {
        XmNnumColumns = 2;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNpacking = XmPACK_COLUMN;
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
         managed XmLabel cUIheaderEdit_lDetRot1;
         managed XmLabel cUIheaderEdit_lDetRot2;
         managed XmLabel cUIheaderEdit_lDetRot3;
         managed XmTextField cUIheaderEdit_tfDetRot1;
         managed XmTextField cUIheaderEdit_tfDetRot2;
         managed XmTextField cUIheaderEdit_tfDetRot3;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetRot : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Rotations");
!(BX)   cUIheaderEdit_lDetRot _XmNlabelString = compound_string("Rotations");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_frDetRot : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
    };
    controls {
         managed XmRowColumn cUIheaderEdit_rcDetRot;
         managed XmLabel cUIheaderEdit_lDetRot;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetDirectBeamX : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("X:");
!(BX)   cUIheaderEdit_lDetDirectBeamX _XmNlabelString = compound_string("X:");
        XmNwidth = 32;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfDetDirectBeamX : XmTextField widget {
    arguments {
        XmNcolumns = 8;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDirectBeamCB();
        XmNactivateCallback = procedure ChangeDirectBeamCB();
    };
};

object cUIheaderEdit_lDetDirectBeamY : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Y:");
!(BX)   cUIheaderEdit_lDetDirectBeamY _XmNlabelString = compound_string("Y:");
        XmNwidth = 32;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfDetDirectBeamY : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeDirectBeamCB();
        XmNactivateCallback = procedure ChangeDirectBeamCB();
    };
};

object cUIheaderEdit_rcDetDirectBeam : XmRowColumn widget {
    arguments {
        XmNorientation = XmHORIZONTAL;
        XmNchildType = XmFRAME_WORKAREA_CHILD;
        XmNx = 3;
        XmNy = 26;
        XmNwidth = 307;
        XmNheight = 36;
    };
    controls {
         managed XmLabel cUIheaderEdit_lDetDirectBeamX;
         managed XmTextField cUIheaderEdit_tfDetDirectBeamX;
         managed XmLabel cUIheaderEdit_lDetDirectBeamY;
         managed XmTextField cUIheaderEdit_tfDetDirectBeamY;
    };
    callbacks {
    };
};

object cUIheaderEdit_lDetDirectBeam : XmLabel widget {
    arguments {
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-140-*-*-*-*-*-*',character_set=character_set('roman')),
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*',character_set=character_set('greek')));
!(BX)   cUIheaderEdit_lDetDirectBeam _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-140-*-*-*-*-*-*',character_set=character_set('roman')),
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*',character_set=character_set('greek')));
!(BX)   _XmNlabelString = compound_string("Direct Beam at ") &
!(BX) compound_string(#character_set("greek")"q = 0");
!(BX)   cUIheaderEdit_lDetDirectBeam _XmNlabelString = compound_string("Direct Beam at ") &
!(BX) compound_string(#character_set("greek")"q = 0");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
        XmNwidth = 154;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_frDetDirectBeam : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmFrame cUIheaderEdit_frDetRot;
        XmNtopWidget = XmFrame cUIheaderEdit_frDetRot;
        XmNheight = 65;
    };
    controls {
         managed XmRowColumn cUIheaderEdit_rcDetDirectBeam;
         managed XmLabel cUIheaderEdit_lDetDirectBeam;
    };
    callbacks {
    };
};

object cUIheaderEdit_foPageDet : XmForm widget {
    arguments {
        XmNshadowType = XmSHADOW_IN;
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 10;
        XmNtopOffset = -3;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageDet;
    };
    controls {
         managed XmFrame cUIheaderEdit_frDetDirectBeam;
         managed XmFrame cUIheaderEdit_frDetRot;
         managed XmFrame cUIheaderEdit_frDetTrans;
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCell : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Unit cell");
!(BX)   cUIheaderEdit_lCrystUnitCell _XmNlabelString = compound_string("Unit cell");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCellA : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("a");
!(BX)   cUIheaderEdit_lCrystUnitCellA _XmNlabelString = compound_string("a");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCellB : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("b");
!(BX)   cUIheaderEdit_lCrystUnitCellB _XmNlabelString = compound_string("b");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCellC : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("c");
!(BX)   cUIheaderEdit_lCrystUnitCellC _XmNlabelString = compound_string("c");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystUnitCellA : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_tfCrystUnitCellB : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_tfCrystUnitCellC : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_lCrystUnitCellAlpha : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   cUIheaderEdit_lCrystUnitCellAlpha _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   _XmNlabelString = compound_string("a");
!(BX)   cUIheaderEdit_lCrystUnitCellAlpha _XmNlabelString = compound_string("a");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCellBeta : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   cUIheaderEdit_lCrystUnitCellBeta _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   _XmNlabelString = compound_string("b");
!(BX)   cUIheaderEdit_lCrystUnitCellBeta _XmNlabelString = compound_string("b");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystUnitCellGamma : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   cUIheaderEdit_lCrystUnitCellGamma _XmNfontList = font_table(
!(BX)		font('-*-symbol-medium-r-*-*-*-140-*-*-*-*-*-*'));
!(BX)   _XmNlabelString = compound_string("g");
!(BX)   cUIheaderEdit_lCrystUnitCellGamma _XmNlabelString = compound_string("g");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystUnitCellAlpha : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_tfCrystUnitCellBeta : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_tfCrystUnitCellGamma : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeUnitCellCB();
        XmNactivateCallback = procedure ChangeUnitCellCB();
    };
};

object cUIheaderEdit_rcCrystUnitCell : XmRowColumn widget {
    arguments {
        XmNnumColumns = 4;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNpacking = XmPACK_COLUMN;
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystUnitCellA;
         managed XmLabel cUIheaderEdit_lCrystUnitCellB;
         managed XmLabel cUIheaderEdit_lCrystUnitCellC;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellA;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellB;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellC;
         managed XmLabel cUIheaderEdit_lCrystUnitCellAlpha;
         managed XmLabel cUIheaderEdit_lCrystUnitCellBeta;
         managed XmLabel cUIheaderEdit_lCrystUnitCellGamma;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellAlpha;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellBeta;
         managed XmTextField cUIheaderEdit_tfCrystUnitCellGamma;
    };
    callbacks {
    };
};

object cUIheaderEdit_frUnitCell : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystUnitCell;
         managed XmRowColumn cUIheaderEdit_rcCrystUnitCell;
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystOrient : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Orientation angles");
!(BX)   cUIheaderEdit_lCrystOrient _XmNlabelString = compound_string("Orientation angles");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystOrient1 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("Rot1");
!(BX)   cUIheaderEdit_lCrystOrient1 _XmNlabelString = compound_string("Rot1");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystOrient2 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
!(BX)   _XmNlabelString = compound_string("Rot2");
!(BX)   cUIheaderEdit_lCrystOrient2 _XmNlabelString = compound_string("Rot2");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystOrient3 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Rot3");
!(BX)   cUIheaderEdit_lCrystOrient3 XmNlabelString = compound_string("Rot3");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystOrient1 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystOrientCB();
        XmNactivateCallback = procedure ChangeCrystOrientCB();
    };
};

object cUIheaderEdit_tfCrystOrient2 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystOrientCB();
        XmNactivateCallback = procedure ChangeCrystOrientCB();
    };
};

object cUIheaderEdit_tfCrystOrient3 : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystOrientCB();
        XmNactivateCallback = procedure ChangeCrystOrientCB();
    };
};

object cUIheaderEdit_rcCrystOrient : XmRowColumn widget {
    arguments {
        XmNnumColumns = 2;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNpacking = XmPACK_COLUMN;
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystOrient1;
         managed XmLabel cUIheaderEdit_lCrystOrient2;
         managed XmLabel cUIheaderEdit_lCrystOrient3;
         managed XmTextField cUIheaderEdit_tfCrystOrient1;
         managed XmTextField cUIheaderEdit_tfCrystOrient2;
         managed XmTextField cUIheaderEdit_tfCrystOrient3;
    };
    callbacks {
    };
};

object cUIheaderEdit_frCrystOrient : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 10;
        XmNtopOffset = 0;
        XmNleftWidget = XmFrame cUIheaderEdit_frUnitCell;
        XmNtopWidget = XmFrame cUIheaderEdit_frUnitCell;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystOrient;
         managed XmRowColumn cUIheaderEdit_rcCrystOrient;
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystMosaicity : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Mosaicity");
!(BX)   cUIheaderEdit_lCrystMosaicity _XmNlabelString = compound_string("Mosaicity");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystMosaicity : XmTextField widget {
    arguments {
        XmNcolumns = 8;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystMosaicityCB();
        XmNactivateCallback = procedure ChangeCrystMosaicityCB();
    };
};

object cUIheaderEdit_frCrystMosaicity : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmFrame cUIheaderEdit_frCrystSpaceGroup;
        XmNtopWidget = XmFrame cUIheaderEdit_frCrystSpaceGroup;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystMosaicity;
         managed XmTextField cUIheaderEdit_tfCrystMosaicity;
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystSpaceGroup : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Space group");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystSpaceGroupName : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Name:");
!(BX)   cUIheaderEdit_lCrystSpaceGroupName _XmNlabelString = compound_string("Name:");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystSpaceGroupName : XmTextField widget {
    arguments {
        XmNcolumns = 8;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystSpaceGroup();
        XmNactivateCallback = procedure ChangeCrystSpaceGroup();
    };
};

object cUIheaderEdit_lCrystSpaceGroupNumber : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Number:");
!(BX)   cUIheaderEdit_lCrystSpaceGroupNumber _XmNlabelString = compound_string("Number:");
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfCrystSpaceGroupNumber : XmTextField widget {
    arguments {
        XmNcolumns = 4;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCrystSpaceGroup();
        XmNactivateCallback = procedure ChangeCrystSpaceGroup();
    };
};

object cUIheaderEdit_rcCrystSpaceGroup : XmRowColumn widget {
    arguments {
        XmNnumColumns = 1;
        XmNpacking = XmPACK_TIGHT;
        XmNorientation = XmHORIZONTAL;
        XmNx = 3;
        XmNy = 25;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystSpaceGroupName;
         managed XmTextField cUIheaderEdit_tfCrystSpaceGroupName;
         managed XmLabel cUIheaderEdit_lCrystSpaceGroupNumber;
         managed XmTextField cUIheaderEdit_tfCrystSpaceGroupNumber;
    };
    callbacks {
    };
};

object cUIheaderEdit_frCrystSpaceGroup : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmFrame cUIheaderEdit_frUnitCell;
        XmNrightWidget = XmFrame cUIheaderEdit_frUnitCell;
        XmNtopWidget = XmFrame cUIheaderEdit_frUnitCell;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystSpaceGroup;
         managed XmRowColumn cUIheaderEdit_rcCrystSpaceGroup;
    };
    callbacks {
    };
};

object cUIheaderEdit_lCrystComment : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Comment");
        XmNchildType = XmFRAME_TITLE_CHILD;
        XmNx = 13;
        XmNy = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tCrystComment : XmText widget {
    arguments {
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNrows = 4;
    };
    controls {
    };
    callbacks {
        XmNlosingFocusCallback = procedure ChangeCommentCB("losing");
    };
};

object cUIheaderEdit_swCrystComment : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 3;
        XmNy = 25;
        XmNwidth = 419;
        XmNheight = 117;
    };
    controls {
         managed XmText cUIheaderEdit_tCrystComment;
    };
    callbacks {
    };
};

object cUIheaderEdit_frCrystComment : XmFrame widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmFrame cUIheaderEdit_frCrystSpaceGroup;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmFrame cUIheaderEdit_frCrystOrient;
        XmNrightWidget = XmFrame cUIheaderEdit_frCrystOrient;
        XmNtopWidget = XmFrame cUIheaderEdit_frCrystOrient;
        XmNheight = 145;
    };
    controls {
         managed XmLabel cUIheaderEdit_lCrystComment;
         managed XmScrolledWindow cUIheaderEdit_swCrystComment;
    };
    callbacks {
    };
};

object cUIheaderEdit_foPageCryst : XmForm widget {
    arguments {
        XmNverticalSpacing = 10;
        XmNhorizontalSpacing = 655360;
        XmNshadowType = XmSHADOW_IN;
        XmNshadowThickness = 1;
        XmNresizePolicy = XmRESIZE_ANY;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 10;
        XmNtopOffset = -3;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNx = 10;
        XmNy = 37;
    };
    controls {
         managed XmFrame cUIheaderEdit_frCrystComment;
         managed XmFrame cUIheaderEdit_frCrystSpaceGroup;
         managed XmFrame cUIheaderEdit_frCrystMosaicity;
         managed XmFrame cUIheaderEdit_frCrystOrient;
         managed XmFrame cUIheaderEdit_frUnitCell;
    };
    callbacks {
    };
};

object cUIheaderEdit_liHeader : XmList widget {
    arguments {
        XmNvisibleItemCount = 18;
        XmNselectionPolicy = XmBROWSE_SELECT;
        XmNlistSizePolicy = XmCONSTANT;
    };
    controls {
    };
    callbacks {
        XmNbrowseSelectionCallback = procedure KeywordSelectedCB();
    };
};

object cUIheaderEdit_swHeader : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNbottomOffset = 5;
        XmNbottomWidget = XmSeparator cUIheaderEdit_seMain;
        XmNrightPosition = 50;
        XmNleftOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmLabel cUIheaderEdit_lHeader;
        XmNtopWidget = XmLabel cUIheaderEdit_lHeader;
    };
    controls {
         managed XmList cUIheaderEdit_liHeader;
    };
    callbacks {
    };
};

object cUIheaderEdit_lKeyword : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Keyword:");
!(BX)   cUIheaderEdit_lKeyword _XmNlabelString = compound_string("Keyword:");
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNleftOffset = 10;
        XmNtopOffset = 0;
        XmNleftWidget = XmScrolledWindow cUIheaderEdit_swHeader;
        XmNtopWidget = XmLabel cUIheaderEdit_lHeader;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_seMain : XmSeparator widget {
    arguments {
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNbottomOffset = 5;
        XmNbottomWidget = XmPushButton cUIheaderEdit_pbReplaceValue;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tfKeyword : XmTextField widget {
    arguments {
        XmNcolumns = 32;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNleftOffset = 0;
        XmNrightOffset = 10;
        XmNtopOffset = -1;
        XmNleftWidget = XmLabel cUIheaderEdit_lKeyword;
        XmNtopWidget = XmLabel cUIheaderEdit_lKeyword;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure KeywordChangedCB();
        XmNactivateCallback = procedure KeywordChangedCB();
    };
};

object cUIheaderEdit_lHeader : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Header keywords:");
!(BX)   cUIheaderEdit_lHeader _XmNlabelString = compound_string("Header keywords:");
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_tValue : XmText widget {
    arguments {
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNrows = 15;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_swValue : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmScrolledWindow cUIheaderEdit_swHeader;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmTextField cUIheaderEdit_tfKeyword;
        XmNrightWidget = XmTextField cUIheaderEdit_tfKeyword;
        XmNtopWidget = XmLabel cUIheaderEdit_lValue;
    };
    controls {
         managed XmText cUIheaderEdit_tValue;
    };
    callbacks {
    };
};

object cUIheaderEdit_lValue : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Value:");
!(BX)   cUIheaderEdit_lValue _XmNlabelString = compound_string("Value:");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNleftOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmLabel cUIheaderEdit_lKeyword;
        XmNtopWidget = XmTextField cUIheaderEdit_tfKeyword;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_pbAddKeyword : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Add", separate=true) &
!(BX) compound_string("keyword");
!(BX)   cUIheaderEdit_pbAddKeyword _XmNlabelString = compound_string("Add", separate=true) &
!(BX) compound_string("keyword");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNrightPosition = 28;
        XmNleftPosition = 13;
        XmNrightOffset = 0;
        XmNx = 81;
        XmNy = 418;
        XmNwidth = 93;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure AddKeywordCB();
    };
};

object cUIheaderEdit_pbReplaceValue : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Replace", separate=true) &
!(BX) compound_string("value");
!(BX)   cUIheaderEdit_pbReplaceValue _XmNlabelString = compound_string("Replace", separate=true) &
!(BX) compound_string("value");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNrightPosition = 58;
        XmNleftPosition = 43;
        XmNrightOffset = 0;
        XmNx = 267;
        XmNy = 418;
        XmNwidth = 93;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ReplaceValueCB();
    };
};

object cUIheaderEdit_pbDeleteKeyword : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Delete", separate=true) &
!(BX) compound_string("keyword");
!(BX)   cUIheaderEdit_pbDeleteKeyword _XmNlabelString = compound_string("Delete", separate=true) &
!(BX) compound_string("keyword");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNrightPosition = 88;
        XmNleftPosition = 73;
        XmNrightOffset = 0;
        XmNx = 453;
        XmNy = 418;
        XmNwidth = 93;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure DeleteKeywordCB();
    };
};

object cUIheaderEdit_foPageMisc : XmForm widget {
    arguments {
        XmNverticalSpacing = 10;
        XmNhorizontalSpacing = 655360;
        XmNshadowType = XmSHADOW_IN;
        XmNshadowThickness = 1;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNrightOffset = 10;
        XmNtopOffset = -3;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNy = 0;
    };
    controls {
         managed XmPushButton cUIheaderEdit_pbDeleteKeyword;
         managed XmPushButton cUIheaderEdit_pbReplaceValue;
         managed XmPushButton cUIheaderEdit_pbAddKeyword;
         managed XmLabel cUIheaderEdit_lValue;
         managed XmScrolledWindow cUIheaderEdit_swValue;
         managed XmLabel cUIheaderEdit_lHeader;
         managed XmTextField cUIheaderEdit_tfKeyword;
         managed XmSeparator cUIheaderEdit_seMain;
         managed XmLabel cUIheaderEdit_lKeyword;
         managed XmScrolledWindow cUIheaderEdit_swHeader;
    };
    callbacks {
    };
};

object cUIheaderEdit_lTab : XmLabel widget {
    arguments {
        XmNlabelString = compound_string(" ");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNbottomOffset = 0;
        XmNbottomWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = -3;
        XmNleftWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNrightWidget = XmPushButton cUIheaderEdit_pbPageCryst;
        XmNtopWidget = XmPushButton cUIheaderEdit_pbPageCryst;
    };
    controls {
    };
    callbacks {
    };
};

object cUIheaderEdit_foEdit : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_NONE;
    };
    controls {
         managed XmLabel cUIheaderEdit_lTab;
         unmanaged XmForm cUIheaderEdit_foPageMisc;
         managed XmForm cUIheaderEdit_foPageCryst;
         unmanaged XmForm cUIheaderEdit_foPageDet;
         unmanaged XmForm cUIheaderEdit_foPageSource;
         managed XmPushButton cUIheaderEdit_pbPageMisc;
         managed XmPushButton cUIheaderEdit_pbPageCryst;
         managed XmPushButton cUIheaderEdit_pbPageDet;
         managed XmPushButton cUIheaderEdit_pbPageSource;
    };
    callbacks {
    };
};

object cUIheaderEdit_sbHeaderEdit : XmSelectionBox widget {
    arguments {
!(BX) BxNclassOnly = "CUIheaderEdit";
!(BX) BxNsubclassDerived = "False";
!(BX) BxNclassOnlyFile = "True";
!(BX) BxNbaseInclude = asciz_string_table('');
!(BX) BxNderivedInclude = asciz_string_table('');
!(BX) BxNderived = "CUIheaderEditDerived";
!(BX) BxNfilebase = "CUIheaderEditDerived";
!(BX) BxNclassFilebase = "CUIheaderEdit";
!(BX) BxNclassGeometry = "857x498+329+752";
!(BX) BxNgenerate = "False";
!(BX) BxNreference = "True";
!(BX) BxNpaletteGroup = "User Classes";
!(BX) BxNpaletteName = "cUIheaderEdit";
!(BX) BxNpaletteGeom = "+0+0";
!(BX) BxNpalettePixmapName = "Class";
        XmNdialogType = XmDIALOG_PROMPT;
        XmNchildPlacement = XmPLACE_TOP;
        XmNresizePolicy = XmRESIZE_NONE;
    };
    controls {
        Xm_Selection unmanaged {
        };
        Xm_Text unmanaged {
        };
        Xm_Apply managed {
        };
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsGetValueError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsValueError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsReplaceValueError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsAddKeywordError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsDeleteKeywordError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsKeywordLengthError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsKeywordCharacterError;
!(BX)         unmanaged XmDialogShell cUIheaderEdit_dsProtectedKeywordWarning;
         managed XmForm cUIheaderEdit_foEdit;
    };
    callbacks {
        XmNhelpCallback = procedure ClassHelpCB();
        XmNokCallback = procedure ChangeHeaderCB("ok");
        XmNcancelCallback = procedure ChangeHeaderCB("cancel");
        XmNapplyCallback = procedure ChangeHeaderCB("apply");
    };
};
