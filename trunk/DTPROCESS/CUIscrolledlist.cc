//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for CUIscrolledlist
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// CUIscrolledlist.cc          Initial author: J.W. Pflugrath       9-Apr-1997
//    Class implementation for a user interface Motif scrolledlist.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/Form.h>
#include <Xm/PushB.h>
#include <Xm/ScrolledW.h>
#include <Xm/List.h>
#include <Xm/Label.h>
#include <Xm/Frame.h>
#include "CUIscrolledlist.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>
//#include <iostream.h>
//#include <iomanip.h>
#include "dtreksys.h"

using std::cin;
using std::cerr;
using std::cout;
using std::endl;
using std::flush;

// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean CUIscrolledlist::_initAppDefaults = True;
UIAppDefault  CUIscrolledlist::_appDefaults[] = {
    {"pbDeselectAll", NULL, "labelString", NULL},
    {"pbSelectAll", NULL, "labelString", NULL},
    {"liList", NULL, "itemCount", NULL},
    {"liList", NULL, "items", NULL},
    {"lbTitle", NULL, "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  CUIscrolledlist::_defaultCUIscrolledlistResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
CUIscrolledlist::CUIscrolledlist(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
CUIscrolledlist::CUIscrolledlist(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>
  m_prvScrolledListCallback = NULL;
  m_pObj                    = NULL;
    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
CUIscrolledlist::~CUIscrolledlist() 
{
    
    // Begin user code block <destructor>
    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void CUIscrolledlist::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[8];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultCUIscrolledlistResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "CUIscrolledlist", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmPushButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScrolledWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmListWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFrameWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, True); ac++;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_ANY); ac++;
    XtSetArg(args[ac], XmNx, 100); ac++;
    XtSetArg(args[ac], XmNy, 100); ac++;
    XtSetArg(args[ac], XmNwidth, 192); ac++;
    XtSetArg(args[ac], XmNheight, 300); ac++;
    _CUIscrolledlist = XmCreateForm(parent,
        _name,
        args, 
        ac);
    
    _w = _CUIscrolledlist;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 96); ac++;
    XtSetArg(args[ac], XmNy, 262); ac++;
    XtSetArg(args[ac], XmNwidth, 94); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _pbDeselectAll = XmCreatePushButton(_CUIscrolledlist,
        "pbDeselectAll",
        args, 
        ac);
    XtManageChild(_pbDeselectAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbDeselectAll,
        XmNactivateCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 2); ac++;
    XtSetArg(args[ac], XmNy, 262); ac++;
    XtSetArg(args[ac], XmNwidth, 94); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _pbSelectAll = XmCreatePushButton(_CUIscrolledlist,
        "pbSelectAll",
        args, 
        ac);
    XtManageChild(_pbSelectAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbSelectAll,
        XmNactivateCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNx, 2); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 188); ac++;
    XtSetArg(args[ac], XmNheight, 230); ac++;
    _swList = XmCreateScrolledWindow(_CUIscrolledlist,
        "swList",
        args, 
        ac);
    XtManageChild(_swList);
    
    ac = 0;
    XtSetArg(args[ac], XmNvisibleItemCount, 11); ac++;
    XtSetArg(args[ac], XmNselectionPolicy, XmEXTENDED_SELECT); ac++;
    XtSetArg(args[ac], XmNautomaticSelection, False); ac++;
    XtSetArg(args[ac], XmNlistSizePolicy, XmRESIZE_IF_POSSIBLE); ac++;
    XtSetArg(args[ac], XmNwidth, 188); ac++;
    _liList = XmCreateList(_swList,
        "liList",
        args, 
        ac);
    XtManageChild(_liList);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNhelpCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNsingleSelectionCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNmultipleSelectionCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNextendedSelectionCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNdefaultActionCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_liList,
        XmNbrowseSelectionCallback,
        CUIscrolledlist::vSelectCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 10); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbTitle = XmCreateLabel(_CUIscrolledlist,
        "lbTitle",
        args, 
        ac);
    XtManageChild(_lbTitle);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 15); ac++;
    XtSetArg(args[ac], XmNwidth, 192); ac++;
    XtSetArg(args[ac], XmNheight, 285); ac++;
    _frFrame = XmCreateFrame(_CUIscrolledlist,
        "frFrame",
        args, 
        ac);
    XtManageChild(_frFrame);
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNleftPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNtopWidget, _swList); ac++;
    XtSetValues(_pbDeselectAll, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_POSITION); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 2); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNrightPosition, 50); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNtopWidget, _swList); ac++;
    XtSetValues(_pbSelectAll, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 40); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frFrame); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbTitle); ac++;
    XtSetValues(_swList, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbTitle, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 15); ac++;
    XtSetValues(_frFrame, args, ac);
    
    
    // Begin user code block <endcreate>
    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const CUIscrolledlist::className()
{
    return ("CUIscrolledlist");
}

void CUIscrolledlist::vSelectCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIscrolledlist *obj = (CUIscrolledlist *)data->object;
    obj->vSelectCB(w, (XtPointer) data->client_data, callData);
}

void CUIscrolledlist::vSelectCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vSelectCB>

  if (w == _pbSelectAll)
    {
      int       i;
      int       nNumItems;
      XmString *pstxTemp;

      // Get the whole list

      XtVaGetValues(_liList, XmNitems, &pstxTemp, 
		             XmNitemCount, &nNumItems, NULL);

      // Set the selection to the whole list

      XtVaSetValues(_liList, XmNselectedItemCount, nNumItems,
		             XmNselectedItems, pstxTemp, NULL);
      
      XmListCallbackStruct CBS;
      if (NULL != m_prvScrolledListCallback)
	{
	  CBS.reason = XmCR_EXTENDED_SELECT;
	  m_prvScrolledListCallback(m_pObj, _liList, (XtPointer)&CBS);
	}
   }
  else if (w == _pbDeselectAll)
    {
      XmListDeselectAllItems(_liList);
    }
  else
    {
      XmListCallbackStruct *pCBS = (XmListCallbackStruct *)callData;

      if (XmCR_BROWSE_SELECT == pCBS->reason)
	{
	  cout << "Browse!\n";
	}
      else if (XmCR_DEFAULT_ACTION == pCBS->reason)
	{
//	  cout << "Default!\n";
	  unsigned char ucSelectPolicy;
	  XtVaGetValues(_liList, XmNselectionPolicy, &ucSelectPolicy, NULL);
	  if (XmSINGLE_SELECT == ucSelectPolicy)
	    {
	      // Set the selection to where the keyboard has it
// Need Motif 1.2 to do following line
//	      XmListSelectPos(_liList, XmListGetKbdItemPos(), False);
	    }
	}
      else if (XmCR_EXTENDED_SELECT == pCBS->reason)
	{
//	  cout << "Extended!\n";
	}
      else if (XmCR_MULTIPLE_SELECT == pCBS->reason)
	{
	  cout << "Multiple!\n";
	}
      else if (XmCR_SINGLE_SELECT == pCBS->reason)
	{
//	  cout << "Single!\n";
	  vSetSelection(pCBS->item_position);
	}
      else
	{
	  cout << "Other\n!";
	}
      if (NULL != m_prvScrolledListCallback)
	{
	  m_prvScrolledListCallback(m_pObj, w, callData);
	}
    }
    // End user code block <vSelectCB>
}
void
CUIscrolledlist::set_cuiscrolledlist_width(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNwidth, value); ac++;
    XtSetValues(_CUIscrolledlist, args, ac);
    
    // Begin user code block <set_cuiscrolledlist_width(XtPointer)>
    // End user code block <set_cuiscrolledlist_width(XtPointer)>
}
void
CUIscrolledlist::set_cuiscrolledlist_height(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNheight, value); ac++;
    XtSetValues(_CUIscrolledlist, args, ac);
    
    // Begin user code block <set_cuiscrolledlist_height(XtPointer)>
    // End user code block <set_cuiscrolledlist_height(XtPointer)>
}
void
CUIscrolledlist::set_lilist_visibleItemCount(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNvisibleItemCount, value); ac++;
    XtSetValues(_liList, args, ac);
    
    // Begin user code block <set_lilist_visibleItemCount(XtPointer)>
    // End user code block <set_lilist_visibleItemCount(XtPointer)>
}
void
CUIscrolledlist::set_lilist_selectionPolicy(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNselectionPolicy, value); ac++;
    XtSetValues(_liList, args, ac);
    
    // Begin user code block <set_lilist_selectionPolicy(XtPointer)>
    // End user code block <set_lilist_selectionPolicy(XtPointer)>
}
void
CUIscrolledlist::set_lilist_listSizePolicy(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNlistSizePolicy, value); ac++;
    XtSetValues(_liList, args, ac);
    
    // Begin user code block <set_lilist_listSizePolicy(XtPointer)>
    // End user code block <set_lilist_listSizePolicy(XtPointer)>
}
void
CUIscrolledlist::set_lbtitle_width(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNwidth, value); ac++;
    XtSetValues(_lbTitle, args, ac);
    
    // Begin user code block <set_lbtitle_width(XtPointer)>
    // End user code block <set_lbtitle_width(XtPointer)>
}
void
CUIscrolledlist::set_lbtitle_height(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNheight, value); ac++;
    XtSetValues(_lbTitle, args, ac);
    
    // Begin user code block <set_lbtitle_height(XtPointer)>
    // End user code block <set_lbtitle_height(XtPointer)>
}
void
CUIscrolledlist::set_lbtitle_leftOffset(XtPointer value)
{
    Arg	args[10];
    Cardinal ac = 0;
    
    XtSetArg(args[ac], XmNleftOffset, value); ac++;
    XtSetValues(_lbTitle, args, ac);
    
    // Begin user code block <set_lbtitle_leftOffset(XtPointer)>
    // End user code block <set_lbtitle_leftOffset(XtPointer)>
}

// Begin user code block <tail>

void
CUIscrolledlist::vAddItem(const Cstring &rsItem, const int nPositionIn)
{
//  cout << "vAddItem called.\n";
  XmString stxTemp;
  stxTemp = XmStringCreateLtoR(rsItem.string(),
#if (XmVersion >= 1002)
			       XmFONTLIST_DEFAULT_TAG);
#else
			       XmSTRING_DEFAULT_CHARSET);
#endif
  if (NULL != stxTemp)
    {
      int nPosn;
      nPosn = nPositionIn;
      if (0 > nPosn) nPosn = 0;
      XmListAddItemUnselected(_liList, stxTemp, nPosn);
      XmStringFree(stxTemp);
    }
}

void
CUIscrolledlist::vDeleteItem(const Cstring &rsItem)
{
  cout << "vDeleteItem called.\n";
}

void
CUIscrolledlist::vDeleteItem(const int nPosition)
{
  cout << "vDeleteItem nPos called.\n";
}
void
CUIscrolledlist::vDeleteAll(void)
{
//  cout << "vDeleteAll called.\n";
  XmListDeleteAllItems(_liList);
}


void
CUIscrolledlist::vAddOtherList(const Widget hOtherList)
{
  // Add the items to the end of the list that are found in another XmList

  if (!XmIsList(hOtherList))
    return;                   // Do nothing input widget is not a XmList 

  int       i;
  int       nNumItems;
  XmString *pstxTemp;

  XtVaGetValues(hOtherList, XmNitems, &pstxTemp, 
		            XmNitemCount, &nNumItems, NULL);
  Cstring  sTemp;
  XmString stxTemp;
  char     *pcTemp;
  for (i = 0; i < nNumItems; i++)
    {
      XmStringGetLtoR(pstxTemp[i],
#if (XmVersion >= 1002)
		      XmFONTLIST_DEFAULT_TAG,
#else
		      XmSTRING_DEFAULT_CHARSET,
#endif
		      &pcTemp);
      if ('\0' != *pcTemp) 
	{
	  sTemp = pcTemp;
	  vAddItem(sFileGetBasename(sTemp));
	}
      XtFree(pcTemp);
    }
}

void
CUIscrolledlist::vGetSelection(int *pnNumItems, Cstring **ppsItems)
{
  // Get the items (filenames) selected in the list.

  int       i;
  Cstring  *psItems;
  XtVaGetValues(_liList, XmNselectedItemCount, pnNumItems, NULL);
  if (0 >= *pnNumItems)
    {
//      cerr << "WARNING in CUIscrolledlist::vGetSelection, no selections!\n";
    }
  else
    {
      XmString *pstxTemp;
      char     *pcTemp;
      Cstring   sTemp;

      XtVaGetValues(_liList, XmNselectedItems, &pstxTemp, NULL);
      if (NULL != *ppsItems)
	{
	  cerr << "WARNING in CUIscrolledlist::vGetSelection, memory leak!\n";
	}
      psItems = new Cstring [*pnNumItems];
      *ppsItems = psItems;
      for (i = 0; i < *pnNumItems; i++)
	{
	  XmStringGetLtoR(pstxTemp[i],
#if (XmVersion >= 1002)
			  XmFONTLIST_DEFAULT_TAG,
#else
			  XmSTRING_DEFAULT_CHARSET,
#endif
			  &pcTemp);
	  if ('\0' != *pcTemp)
	    {
	      sTemp = pcTemp;
	      psItems[i] = pcTemp;
	    }
	  XtFree(pcTemp);
	}
    }
/*
  cout << "vGetSelection called.\n" << "Selections are:\n";
  for (i = 0; i < *pnNumItems; i++)
    {
      cout << psItems[i] << '\n';
    }
  cout << endl;
*/
}

void
CUIscrolledlist::vShowButtons(const Boolean bYesNo)
{
  if (bYesNo)
    {
      XtManageChild(_pbSelectAll);
      XtManageChild(_pbDeselectAll);
      XtVaSetValues(_swList, XmNbottomOffset, 40, NULL);
    }
  else
    {
      XtUnmanageChild(_pbSelectAll);
      XtUnmanageChild(_pbDeselectAll);
      XtVaSetValues(_swList, XmNbottomOffset, 2, NULL);
    }
}

void
CUIscrolledlist::vSetSelectPolicy(const unsigned char ucPolicy)
{
  XtVaSetValues(_liList, XmNselectionPolicy, ucPolicy, NULL);
}

void
CUIscrolledlist::vSetSelection(int nPosition, Boolean bNotify, Boolean bMultiple)
{
  // Set selection to position in list.  1 is first position, 0 last position
  if (!bMultiple)
    XmListDeselectAllItems(_liList);
  XmListSelectPos(_liList, nPosition, bNotify);
  
  // Make sure position is visible

  int nTop, nVisible;

  XtVaGetValues(_liList, XmNtopItemPosition, &nTop, 
		XmNvisibleItemCount, &nVisible, NULL);
  if (nPosition < nTop)
    {
      XmListSetPos(_liList, nPosition);
    }
  else if (nPosition >= nTop + nVisible)
    {
      XmListSetPos(_liList, nPosition);
    }
}

void
CUIscrolledlist::vSetSelection(XmString sxString, Boolean bNotify, Boolean bMultiple)
{
  if (!bMultiple)
    XmListDeselectAllItems(_liList);
  XmListSelectItem(_liList, sxString, bNotify);
  XmListSetItem(_liList, sxString);
}

void
CUIscrolledlist::vSetSelection(Cstring &rsString, Boolean bNotify, Boolean bMultiple)
{
  XmString sxString;
  sxString = XmStringCreateLtoR(rsString.string(), 
#if (XmVersion >= 1002)
				XmFONTLIST_DEFAULT_TAG);
#else
                                XmSTRING_DEFAULT_CHARSET);
#endif
  vSetSelection(sxString, bNotify, bMultiple);
  XmStringFree(sxString);
}

Widget
CUIscrolledlist::wGetListWidget(void)
{
  return (_liList);
}

void
CUIscrolledlist::vSetSelectionAll(Boolean bNotify)
{
  XmString *psxItems;
  int       nNumItems;

  XtVaGetValues(_liList, XmNitems, &psxItems, XmNitemCount, &nNumItems, NULL);
  XtVaSetValues(_liList, XmNselectedItems, psxItems,
		XmNselectedItemCount, nNumItems, NULL);
//  if (bNotify) ...
}

void
CUIscrolledlist::vDeleteNonImages(Cstring& rsTemplateIn)
{
  // Delete items in the list that cannot be images in the input scan template

  XmString *psxItems;
  int       nNumItems;
  int       nx;

  char     *pcTemp;
  Cstring   sTemp;

  Cstring sTemplateIn;
  Cstring sTemplateFound;
  int nPlaces;

  sTemplateIn = sFileGetBasename(rsTemplateIn);
  nPlaces = 0;
  for (nx = 0; nx < sTemplateIn.length(); nx++)
    if ('?' == sTemplateIn.GetAt(nx)) nPlaces++;

  XtVaGetValues(_liList, XmNitems, &psxItems, XmNitemCount, &nNumItems, NULL);
  if (0 >= nNumItems)
    return;

  for (nx = nNumItems-1; nx >= 0; nx--)
    {
      XmStringGetLtoR(psxItems[nx],
#if (XmVersion >= 1002)
		      XmFONTLIST_DEFAULT_TAG,
#else
		      XmSTRING_DEFAULT_CHARSET,
#endif
		      &pcTemp);
      sTemp = "";
      if ('\0' != *pcTemp)
	{
	  sTemp = pcTemp;
	}
      XtFree(pcTemp);
      //      cout << "nx: " << nx << " item: " << sTemp << endl;
      sTemplateFound = sBuildScanTemplate(sTemp, nPlaces);
      sTemplateFound = sFileGetBasename(sTemplateFound);
      if (sTemplateFound != sTemplateIn) 
	{
	  // Delete this item from the list

	  //	  cout << "deleting item: " << sTemp << endl;
	  XmListDeletePos(_liList, nx+1);
	}
    }
}

void
CUIscrolledlist::vAddOtherList(const Widget hOtherList, const Cstring& rsTemplateIn)
{
  // Add the items to the end of the list that are found in another XmList,
  // but only if they have the same scan template: sTemplateIn

  if (!XmIsList(hOtherList))
    return;                   // Do nothing input widget is not a XmList 

  int       i;
  int       nNumItems;
  XmString *pstxTemp;

  Cstring sTemplateIn;
  Cstring sTemplateFound;
  int nPlaces;

  sTemplateIn = sFileGetBasename(rsTemplateIn);
  nPlaces = 0;
  for (i = 0; i < sTemplateIn.length(); i++)
    if ('?' == sTemplateIn.GetAt(i)) nPlaces++;

  XtVaGetValues(hOtherList, XmNitems, &pstxTemp, 
		            XmNitemCount, &nNumItems, NULL);
  Cstring  sTemp;
  XmString stxTemp;
  char     *pcTemp = NULL;
  for (i = 0; i < nNumItems; i++)
    {
      XmStringGetLtoR(pstxTemp[i],
#if (XmVersion >= 1002)
		      XmFONTLIST_DEFAULT_TAG,
#else
		      XmSTRING_DEFAULT_CHARSET,
#endif
		      &pcTemp);
      if (NULL != pcTemp)
	{
	  if ('\0' != *pcTemp) 
	    {
	      sTemp = pcTemp;
	      sTemplateFound = sBuildScanTemplate(sTemp, nPlaces);
	      sTemplateFound = sFileGetBasename(sTemplateFound);
	      if (sTemplateFound == sTemplateIn) 
		{
		  vAddItem(sFileGetBasename(sTemp));
		}
	    }
	  XtFree(pcTemp);
	}
    }
}


/*
   add multiple to list
   get from list
   delete
   select
*/
// End user code block <tail>
