//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for CUIfileFilter
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
//
// Copyright (c) 1997 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// CUIfileFilter.cc        Initial author: J.W. Pflugrath           9-Apr-1997
//    This file implements the class for CUIfileFilter which
//    implements a file selection dialog for dtprocess.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/FileSB.h>
#include <Xm/Form.h>
#include <Xm/Label.h>
#include <Xm/RowColumn.h>
#include <Xm/PushB.h>
#include "CUIfileFilter.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>
#include <Xm/List.h>
#include "dtreksys.h"
// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean CUIfileFilter::_initAppDefaults = True;
UIAppDefault  CUIfileFilter::_appDefaults[] = {
    {"lbFileFilterQuick", NULL, "labelString", NULL},
    {"pbFileFilterStar", NULL, "labelString", NULL},
    {"pbFileFilterHead", NULL, "labelString", NULL},
    {"pbFileFilterImage", NULL, "labelString", NULL},
    {"pbFileFilterRef", NULL, "labelString", NULL},
    {"pbFileFilterUser", NULL, "labelString", NULL},
    {"pbFileFilterHead1", NULL, "labelString", NULL},
    {"pbFileFilterRef1", NULL, "labelString", NULL},
    {"pbFileFilterUser1", NULL, "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  CUIfileFilter::_defaultCUIfileFilterResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
CUIfileFilter::CUIfileFilter(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
CUIfileFilter::CUIfileFilter(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>
  m_pObj            = NULL;
  m_prvFileCallback = NULL;
    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
CUIfileFilter::~CUIfileFilter() 
{
    
    // Begin user code block <destructor>
    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void CUIfileFilter::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[12];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultCUIfileFilterResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "CUIfileFilter", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmFileSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmPushButtonWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 784); ac++;
    XtSetArg(args[ac], XmNy, 494); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 479); ac++;
    _CUIfileFilter = XmCreateFileSelectionBox(parent,
        _name,
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIfileFilter,
        XmNhelpCallback,
        CUIfileFilter::vFileFilterCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIfileFilter,
        XmNokCallback,
        CUIfileFilter::vFileFilterCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIfileFilter,
        XmNcancelCallback,
        CUIfileFilter::vFileFilterCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_CUIfileFilter,
        XmNapplyCallback,
        CUIfileFilter::vFileFilterCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    _w = _CUIfileFilter;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 295); ac++;
    XtSetArg(args[ac], XmNwidth, 416); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _foFileFilter = XmCreateForm(_CUIfileFilter,
        "foFileFilter",
        args, 
        ac);
    XtManageChild(_foFileFilter);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbFileFilterQuick = XmCreateLabel(_foFileFilter,
        "lbFileFilterQuick",
        args, 
        ac);
    XtManageChild(_lbFileFilterQuick);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 105); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 147); ac++;
    XtSetArg(args[ac], XmNheight, 37); ac++;
    _omFileFilter = XmCreateOptionMenu(_foFileFilter,
        "omFileFilter",
        args, 
        ac);
    XtManageChild(_omFileFilter);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 916); ac++;
    XtSetArg(args[ac], XmNy, 792); ac++;
    XtSetArg(args[ac], XmNwidth, 98); ac++;
    XtSetArg(args[ac], XmNheight, 220); ac++;
    _pdFileFilter = XmCreatePulldownMenu(XtParent(_omFileFilter),
        "pdFileFilter",
        args, 
        ac);
    
    ac = 0;
    _pbFileFilterStar = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterStar",
        args, 
        ac);
    XtManageChild(_pbFileFilterStar);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterStar,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterHead = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterHead",
        args, 
        ac);
    XtManageChild(_pbFileFilterHead);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterHead,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterImage = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterImage",
        args, 
        ac);
    XtManageChild(_pbFileFilterImage);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterImage,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterRef = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterRef",
        args, 
        ac);
    XtManageChild(_pbFileFilterRef);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterRef,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterUser = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterUser",
        args, 
        ac);
    XtManageChild(_pbFileFilterUser);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterUser,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterHead1 = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterHead1",
        args, 
        ac);
    XtManageChild(_pbFileFilterHead1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterHead1,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterRef1 = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterRef1",
        args, 
        ac);
    XtManageChild(_pbFileFilterRef1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterRef1,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileFilterUser1 = XmCreatePushButton(_pdFileFilter,
        "pbFileFilterUser1",
        args, 
        ac);
    XtManageChild(_pbFileFilterUser1);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileFilterUser1,
        XmNactivateCallback,
        CUIfileFilter::vFilterSelectCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pdFileFilter); ac++;
    XtSetValues(_omFileFilter, args, ac);
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbFileFilterQuick); ac++;
    XtSetValues(_omFileFilter, args, ac);
    
    
    // Begin user code block <endcreate>

    // Fix up file selection

//    XtUnmanageChild(XmFileSelectionBoxGetChild(_CUIfileFilter, XmDIALOG_TEXT));
//    XtUnmanageChild(XmFileSelectionBoxGetChild(_CUIfileFilter, 
//					   XmDIALOG_SELECTION_LABEL));
    m_wListWidget = XmFileSelectionBoxGetChild(_CUIfileFilter,
					       XmDIALOG_LIST);
    XtUnmanageChild(XmFileSelectionBoxGetChild(baseWidget(), 
					       XmDIALOG_FILTER_TEXT));
    XtUnmanageChild(XmFileSelectionBoxGetChild(baseWidget(), 
					       XmDIALOG_FILTER_LABEL));

    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const CUIfileFilter::className()
{
    return ("CUIfileFilter");
}

void CUIfileFilter::vFileFilterCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIfileFilter *obj = (CUIfileFilter *)data->object;
    obj->vFileFilterCB(w, (XtPointer) data->client_data, callData);
}

void CUIfileFilter::vFileFilterCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFileFilterCB>
  XmFileSelectionBoxCallbackStruct *pCBS
    = (XmFileSelectionBoxCallbackStruct *) callData;

  if (XmCR_CANCEL == pCBS->reason)
    {
      XtUnmanageChild(w);
    }
  else if (XmCR_OK == pCBS->reason)
    {
      // Ok selected, look for wildcards in the selection,
      // if found,
//+ 4-Apr-2002
      Cstring sFilename;
      char    *pcTemp;
      pcTemp  = NULL;
      if (XmStringGetLtoR(pCBS->value,
#if (XmVersion >= 1002)
			   XmFONTLIST_DEFAULT_TAG,
#else
			   XmSTRING_DEFAULT_CHARSET,
#endif
			   &pcTemp))
	{
	  sFilename = pcTemp;   // There is a problem here if MSCstring class
	                        //   is compiled optimized? 
	}
      if (NULL != pcTemp) XtFree(pcTemp);
      pcTemp  = NULL;
      int nLen;
      nLen = sFilename.length();
      if (   (sFilename.contains('*')) 
          || (0 == nLen)
          || (sFilename.contains('?'))
          || ( nLen-2 == sFilename.index(".."))
          || ( sFilename.GetAt(nLen-1) == '/') )
	{
	  // Filename contains an asterisk or question mark,
	  // or ends in .. or /
	  // Do search with new filter
          if ( sFilename.length()-1 == sFilename.index("/"))
	    sFilename += '*';
	  else if (sFilename.length()-2 == sFilename.index(".."))
	    sFilename += "/*";
	  bDoSearch(sFilename);
	  // Place search filter into filename
	  if (!sFilename.contains('/'))
	    sFilename = sFileGetDirectory(sFilename)
	      + sFileGetBasename(sFilename);
	  vSetFilename(sFilename);
	  return;
        }

      //- 4-Apr-2002
      if (NULL != m_prvFileCallback)
	{
	  // Get selected item

	  int nPosition     = -1;
	  int *pnPositions;
          int nCount;
	  XmString sxString = NULL;
	  if (XmListGetSelectedPos(m_wListWidget, &pnPositions, &nCount))
	    {
	      if (0 < nCount)
		{
		  nPosition = *pnPositions;
		  XtFree((char *)pnPositions);
		}
	    }
	  else
	    {
	      nPosition = -1;
	    }
	      
	  m_prvFileCallback(m_pObj, m_wListWidget, nPosition, callData);
	}
      XtUnmanageChild(w);
    }
  else if (XmCR_APPLY == pCBS->reason)
    {
      // Apply selected
    }
  else if (XmCR_HELP == pCBS->reason)
    {
    }
    // End user code block <vFileFilterCB>
}

void CUIfileFilter::vFilterSelectCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    CUIfileFilter *obj = (CUIfileFilter *)data->object;
    obj->vFilterSelect(w, (XtPointer) data->client_data, callData);
}

void CUIfileFilter::vFilterSelect(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFilterSelect>

  XmString sxLabel;
  XmString sxDirectory;

  // Get button label

  XtVaGetValues(w, XmNlabelString, &sxLabel, NULL);
  
  // Get directory

  XtVaGetValues(_CUIfileFilter, XmNdirectory, &sxDirectory, NULL);  

  // Set filter

  XtVaSetValues(_CUIfileFilter, XmNpattern, sxLabel, NULL);

  // ... and do the search

  XmFileSelectionDoSearch(_CUIfileFilter, NULL);  
    // End user code block <vFilterSelect>
}

// Begin user code block <tail>
void
CUIfileFilter::manage()
{
  // Force re-filtering before every manage operation, so list is updated

  XmFileSelectionDoSearch(_CUIfileFilter, NULL);
  UIComponent::manage();
}

bool
CUIfileFilter::bDoSearch(const Cstring& rsSearch)
{
  bool     bReturnValue = False;

  XmString  sxDirMask;
  XmString  sxNoMatch;
  XmString *psxItems;

  sxDirMask = XmStringCreateLtoR(
				   rsSearch.string(),
#if (XmVersion >= 1002)
				   XmFONTLIST_DEFAULT_TAG);
#else
                                   XmSTRING_DEFAULT_CHARSET);
#endif
  if (NULL != sxDirMask)
   {
     XmFileSelectionDoSearch(_CUIfileFilter, sxDirMask);  
     XmStringFree(sxDirMask);
     XtVaGetValues(_CUIfileFilter, XmNlistUpdated, &bReturnValue, 
		   XmNnoMatchString, &sxNoMatch, NULL);
     XtVaGetValues(m_wListWidget, XmNitemCount, &m_nItemCount, NULL);
     if (1 == m_nItemCount)
       {
	 // Check if the item is truly an item and not a no match string

	 XtVaGetValues(m_wListWidget, XmNitems, &psxItems, NULL);
	 if (XmStringCompare(sxNoMatch, *psxItems))
	   {
	     // First item is the no match item, so no match!

	     m_nItemCount = 0;
	   }
       }
     XmStringFree(sxNoMatch);     
   }
  return (bReturnValue);
}
Widget
CUIfileFilter::wGetListWidget(void)
{
  return (m_wListWidget);
}

int
CUIfileFilter::nGetItemCount(void)
{
  return (m_nItemCount);
}

void
CUIfileFilter::vSetFilename(const Cstring& sFilename)
{
  //m_sFilename = sFilename;
  XmString stxTemp;
  
  stxTemp = XmStringCreateLtoR(sFilename.string(),
#if (XmVersion >= 1002)
			       XmFONTLIST_DEFAULT_TAG);
#else
			       XmSTRING_DEFAULT_CHARSET);
#endif
  if (NULL != stxTemp)
    {
      XtVaSetValues(_CUIfileFilter, XmNtextString, stxTemp, NULL);
      XmStringFree(stxTemp);
    }
}

// End user code block <tail>
