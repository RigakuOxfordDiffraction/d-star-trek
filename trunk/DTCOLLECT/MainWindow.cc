//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
/////////////////////////////////////////////////////////////
//
// Source file for MainWindow
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
/////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
// Copyright (c) 1996, 1995 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// MainWindow.cc   Initial author: J.W. Pflugrath           16-Dec-1995
//    This file was automatically generated by ICS Builder Xcessory.
//    It is the mainwindow of the dtcollect program.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#include <X11/StringDefs.h>
#include <Xm/MainW.h>
#include <Xm/DialogS.h>
#include <Xm/MwmUtil.h>
#include <Xm/MessageB.h>
#include <Xm/SelectioB.h>
#include <Xm/FileSB.h>
#include <Xm/ToggleB.h>
#include <Xm/Form.h>
#include <Xm/TextF.h>
#include <Xm/Label.h>
#include <Xm/Frame.h>
#include <Xm/Scale.h>
#include <Xm/ScrolledW.h>
#include <Xm/Text.h>
#include <Xm/RowColumn.h>
#include <Xm/CascadeB.h>
#include <Xm/PushB.h>
#include <Xm/Separator.h>
#include <Xm/ArrowB.h>
#include <Xm/ScrollBar.h>
#include "MainWindow.h"
#include "CUIheaderEdit.h"
#include "CUIeditdetector.h"
#include "CUIviewheader.h"
#include "CUIimagefileSelect.h"
#include "CUIwavelength.h"

//
// Convenience functions from utilities file.
//
extern void RegisterBxConverters(XtAppContext);
extern XtPointer BX_CONVERT(Widget, char *, char *, int, Boolean *);
extern XtPointer BX_DOUBLE(double);
extern XtPointer BX_SINGLE(float);
extern void BX_MENU_POST(Widget, XtPointer, XEvent *, Boolean *);
extern Pixmap XPM_PIXMAP(Widget, char **);
extern void BX_SET_BACKGROUND_COLOR(Widget, ArgList, Cardinal *, Pixel);


// Begin user code block <head>

#include <Xm/Protocols.h>
#include <ctype.h>

int MainWindow::ms_nShutter      = 0;
int MainWindow::ms_nRotStart     = 1;
int MainWindow::ms_nRotEnd       = 2;
int MainWindow::ms_nRotIncr      = 3;
int MainWindow::ms_nRotTime      = 4;
int MainWindow::ms_nRotAxis      = 5;
int MainWindow::ms_nTemplate     = 6;
int MainWindow::ms_nSeqStart     = 7;
int MainWindow::ms_nSeqIncr      = 8;
int MainWindow::ms_nRelStart     = 9;
int MainWindow::ms_nWavelength   = 10;
int MainWindow::ms_nNumOsc       = 11;
int MainWindow::ms_nNumDarkIntvl = 12;
int MainWindow::ms_nNumImgs      = 13;
Cstring MainWindow::ms_sDefaultHeaderTemplateFile = "DTCOLLECT_HEADER";
Cstring MainWindow::ms_sDtdisplay = "";

// End user code block <head>

//
// This table is used to define class resources that are placed
// in app-defaults. This table is necessary so each instance
// of this class has the proper default resource values set.
// This eliminates the need for each instance to have
// its own app-defaults values. This table must be NULL terminated.
//
#if defined(cxx_bx_compat)

Boolean MainWindow::_initAppDefaults = True;
UIAppDefault  MainWindow::_appDefaults[] = {
    {"mbWarnPosition", NULL, "dialogTitle", NULL},
    {"mbWarnPosition", NULL, "okLabelString", NULL},
    {"mbWarnPosition", NULL, "cancelLabelString", NULL},
    {"mbWarnPosition", NULL, "messageString", NULL},
    {"xmDialogShellFileOpenSave", NULL, "title", NULL},
    {"tbFileOpenSave", NULL, "set", NULL},
    {"tbFileOpenSave", NULL, "labelString", NULL},
    {"xmDialogShellViewHeader", NULL, "title", NULL},
    {"cUIimagefileSelect", "", "dialogTitle", NULL},
    {"cUIimagefileSelect", "", "selectionLabelString", NULL},
    {"cUIimagefileSelect", "", "okLabelString", NULL},
    {"cUIimagefileSelect", "", "filterLabelString", NULL},
    {"mbError", NULL, "dialogTitle", NULL},
    {"mbError", NULL, "cancelLabelString", NULL},
    {"mbError", NULL, "messageString", NULL},
    {"sdCollectScan", NULL, "dialogTitle", NULL},
    {"sdCollectScan", NULL, "okLabelString", NULL},
    {"sdCollectScan", NULL, "helpLabelString", NULL},
    {"sdCollectScan", NULL, "cancelLabelString", NULL},
    {"sdCollectScan", NULL, "applyLabelString", NULL},
    {"fsdCollectScanFile", NULL, "dialogTitle", NULL},
    {"lbDatumTheta", NULL, "labelString", NULL},
    {"lbDatumDist", NULL, "labelString", NULL},
    {"lbDatumPhi", NULL, "labelString", NULL},
    {"lbDatumChi", NULL, "labelString", NULL},
    {"lbDatumOmega", NULL, "labelString", NULL},
    {"lbScanPercent", NULL, "labelString", NULL},
    {"lbScanTimeRemCurr", NULL, "labelString", NULL},
    {"lbScanTimeElapsedCurr", NULL, "labelString", NULL},
    {"lbScanTimeElapsed", NULL, "labelString", NULL},
    {"lbScanTimeRem", NULL, "labelString", NULL},
    {"lbImagePercent", NULL, "labelString", NULL},
    {"lbImageTimeRemCurr", NULL, "labelString", NULL},
    {"lbImageTimeElapsedCurr", NULL, "labelString", NULL},
    {"lbImageTimeElapsed", NULL, "labelString", NULL},
    {"lbImageTimeRem", NULL, "labelString", NULL},
    {"cbScanFile", NULL, "mnemonic", NULL},
    {"cbScanFile", NULL, "labelString", NULL},
    {"pbScanFileOpen", NULL, "mnemonic", NULL},
    {"pbScanFileOpen", NULL, "labelString", NULL},
    {"pbScanFileSave", NULL, "mnemonic", NULL},
    {"pbScanFileSave", NULL, "labelString", NULL},
    {"pbScanFileSaveAs", NULL, "mnemonic", NULL},
    {"pbScanFileSaveAs", NULL, "labelString", NULL},
    {"pbScanFileClose", NULL, "mnemonic", NULL},
    {"pbScanFileClose", NULL, "labelString", NULL},
    {"cbScanEdit", NULL, "mnemonic", NULL},
    {"cbScanEdit", NULL, "labelString", NULL},
    {"pbScanEditCopy", NULL, "mnemonic", NULL},
    {"pbScanEditCopy", NULL, "labelString", NULL},
    {"pbScanEditCut", NULL, "mnemonic", NULL},
    {"pbScanEditCut", NULL, "labelString", NULL},
    {"pbScanEditPaste", NULL, "mnemonic", NULL},
    {"pbScanEditPaste", NULL, "labelString", NULL},
    {"pbScanEditInsert", NULL, "mnemonic", NULL},
    {"pbScanEditInsert", NULL, "labelString", NULL},
    {"pbScanEditDelete", NULL, "mnemonic", NULL},
    {"pbScanEditDelete", NULL, "labelString", NULL},
    {"pbScanEditPasteMW", NULL, "mnemonic", NULL},
    {"pbScanEditPasteMW", NULL, "labelString", NULL},
    {"pbScanEditDeleteAll", NULL, "mnemonic", NULL},
    {"pbScanEditDeleteAll", NULL, "labelString", NULL},
    {"cbScanEditMulti", NULL, "labelString", NULL},
    {"pbScanEditMulti2", NULL, "labelString", NULL},
    {"pbScanEditMulti3", NULL, "labelString", NULL},
    {"pbScanEditMulti3i", NULL, "labelString", NULL},
    {"cbScanView", NULL, "mnemonic", NULL},
    {"cbScanView", NULL, "labelString", NULL},
    {"pbScanViewEnlarge", NULL, "mnemonic", NULL},
    {"pbScanViewEnlarge", NULL, "labelString", NULL},
    {"pbScanViewShrink", NULL, "mnemonic", NULL},
    {"pbScanViewShrink", NULL, "labelString", NULL},
    {"pbScanViewNarrow", NULL, "mnemonic", NULL},
    {"pbScanViewNarrow", NULL, "labelString", NULL},
    {"pbScanViewWiden", NULL, "mnemonic", NULL},
    {"pbScanViewWiden", NULL, "labelString", NULL},
    {"cbScanHelp", NULL, "mnemonic", NULL},
    {"cbScanHelp", NULL, "labelString", NULL},
    {"pbScanHelpHTML", NULL, "mnemonic", NULL},
    {"pbScanHelpHTML", NULL, "labelString", NULL},
    {"lbScanSelected", NULL, "labelString", NULL},
    {"lbScanNumCurr", NULL, "labelString", NULL},
    {"lbShutter1Curr", NULL, "labelString", NULL},
    {"lbRotStartCurr", NULL, "labelString", NULL},
    {"lbRotEndCurr", NULL, "labelString", NULL},
    {"lbRotIncrCurr", NULL, "labelString", NULL},
    {"lbTimeCurr", NULL, "labelString", NULL},
    {"lbAxisCurr", NULL, "labelString", NULL},
    {"lbTemplateCurr", NULL, "labelString", NULL},
    {"lbSeqStartCurr", NULL, "labelString", NULL},
    {"lbSeqIncrCurr", NULL, "labelString", NULL},
    {"lbDatumCurr", NULL, "labelString", NULL},
    {"lbWavelengthCurr", NULL, "labelString", NULL},
    {"lbNumOscCurr", NULL, "labelString", NULL},
    {"lbDarkIntvlCurr", NULL, "labelString", NULL},
    {"pbWavelength", NULL, "labelString", NULL},
    {"pbDatum", NULL, "labelString", NULL},
    {"tbShutterOpen", NULL, "labelString", NULL},
    {"tbShutterOpen", NULL, "selectColor", NULL},
    {"tbShutterClosed", NULL, "labelString", NULL},
    {"tbShutterClosed", NULL, "selectColor", NULL},
    {"pbTemplate", NULL, "labelString", NULL},
    {"sbDarkIntvl", NULL, "value", NULL},
    {"sbNumOsc", NULL, "value", NULL},
    {"sbSeqIncr", NULL, "value", NULL},
    {"sbSeqStart", NULL, "value", NULL},
    {"sbTime", NULL, "value", NULL},
    {"sbRotIncr", NULL, "value", NULL},
    {"sbRotEnd", NULL, "value", NULL},
    {"tbPhi", NULL, "labelString", NULL},
    {"tbPhi", NULL, "selectColor", NULL},
    {"tbOmega", NULL, "labelString", NULL},
    {"tbOmega", NULL, "selectColor", NULL},
    {"lbScanNum", NULL, "labelString", NULL},
    {"lbDarkIntvl", NULL, "labelString", NULL},
    {"lbNumOsc", NULL, "labelString", NULL},
    {"lbWavelength", NULL, "labelString", NULL},
    {"lbDatum", NULL, "labelString", NULL},
    {"lbSeqIncr", NULL, "labelString", NULL},
    {"lbSeqStart", NULL, "labelString", NULL},
    {"lbAxis", NULL, "labelString", NULL},
    {"lbTemplate", NULL, "labelString", NULL},
    {"lbTime", NULL, "labelString", NULL},
    {"lbRotIncr", NULL, "labelString", NULL},
    {"lbRotEnd", NULL, "labelString", NULL},
    {"lbRotStart", NULL, "labelString", NULL},
    {"lbShutter1", NULL, "labelString", NULL},
    {"frScanNum", NULL, "width", NULL},
    {"frShutter1", NULL, "width", NULL},
    {"frRotStart", NULL, "width", NULL},
    {"frRotEnd", NULL, "width", NULL},
    {"frRotIncr", NULL, "width", NULL},
    {"frTime", NULL, "width", NULL},
    {"frAxis", NULL, "width", NULL},
    {"frTemplate", NULL, "width", NULL},
    {"frSeqStart", NULL, "width", NULL},
    {"frSeqIncr", NULL, "width", NULL},
    {"frDatum", NULL, "width", NULL},
    {"frWavelength", NULL, "width", NULL},
    {"frNumOsc", NULL, "width", NULL},
    {"frDarkIntvl", NULL, "width", NULL},
    {"tbScan", NULL, "width", NULL},
    {"tfShutter", NULL, "width", NULL},
    {"tfRotStart", NULL, "value", NULL},
    {"tfRotStart", NULL, "width", NULL},
    {"tfRotEnd", NULL, "value", NULL},
    {"tfRotEnd", NULL, "width", NULL},
    {"tfRotIncr", NULL, "value", NULL},
    {"tfRotIncr", NULL, "width", NULL},
    {"tfTime", NULL, "value", NULL},
    {"tfTime", NULL, "width", NULL},
    {"tfAxis", NULL, "value", NULL},
    {"tfAxis", NULL, "width", NULL},
    {"tfTemplate", NULL, "value", NULL},
    {"tfTemplate", NULL, "width", NULL},
    {"tfSeqStart", NULL, "value", NULL},
    {"tfSeqStart", NULL, "width", NULL},
    {"tfSeqIncr", NULL, "value", NULL},
    {"tfSeqIncr", NULL, "width", NULL},
    {"tfDatum", NULL, "width", NULL},
    {"tfWavelength", NULL, "width", NULL},
    {"tfNumOsc", NULL, "value", NULL},
    {"tfNumOsc", NULL, "width", NULL},
    {"tfDarkIntvl", NULL, "value", NULL},
    {"tfDarkIntvl", NULL, "width", NULL},
    {"cbFile", NULL, "mnemonic", NULL},
    {"cbFile", NULL, "labelString", NULL},
    {"cbFileNew", NULL, "mnemonic", NULL},
    {"cbFileNew", NULL, "labelString", NULL},
    {"pbFileNewCrysGon", NULL, "mnemonic", NULL},
    {"pbFileNewCrysGon", NULL, "labelString", NULL},
    {"pbFileNewDetGon", NULL, "mnemonic", NULL},
    {"pbFileNewDetGon", NULL, "labelString", NULL},
    {"pbFileNewDet", NULL, "mnemonic", NULL},
    {"pbFileNewDet", NULL, "labelString", NULL},
    {"pbFileNewShutter", NULL, "mnemonic", NULL},
    {"pbFileNewShutter", NULL, "labelString", NULL},
    {"pbFileNewSensor", NULL, "mnemonic", NULL},
    {"pbFileNewSensor", NULL, "labelString", NULL},
    {"pbFileNewSource", NULL, "mnemonic", NULL},
    {"pbFileNewSource", NULL, "labelString", NULL},
    {"pbFileNewAll", NULL, "mnemonic", NULL},
    {"pbFileNewAll", NULL, "labelString", NULL},
    {"pbFileOpen", NULL, "mnemonic", NULL},
    {"pbFileOpen", NULL, "labelString", NULL},
    {"pbFileSaveAs", NULL, "mnemonic", NULL},
    {"pbFileSaveAs", NULL, "labelString", NULL},
    {"pbFilePref", NULL, "mnemonic", NULL},
    {"pbFilePref", NULL, "labelString", NULL},
    {"pbFilePrint", NULL, "labelString", NULL},
    {"pbFileExit", NULL, "mnemonic", NULL},
    {"pbFileExit", NULL, "labelString", NULL},
    {"cbEdit", NULL, "mnemonic", NULL},
    {"cbEdit", NULL, "labelString", NULL},
    {"pbEditHeader", NULL, "mnemonic", NULL},
    {"pbEditHeader", NULL, "labelString", NULL},
    {"pbEditDetector", NULL, "mnemonic", NULL},
    {"pbEditDetector", NULL, "labelString", NULL},
    {"cbEditClear", NULL, "labelString", NULL},
    {"pbEditClearAll", NULL, "labelString", NULL},
    {"pbEditClearSel", NULL, "labelString", NULL},
    {"cbView", NULL, "mnemonic", NULL},
    {"cbView", NULL, "labelString", NULL},
    {"pbViewHeader", NULL, "mnemonic", NULL},
    {"pbViewHeader", NULL, "labelString", NULL},
    {"cbCollect", NULL, "mnemonic", NULL},
    {"cbCollect", NULL, "labelString", NULL},
    {"pbCollectScan", NULL, "mnemonic", NULL},
    {"pbCollectScan", NULL, "labelString", NULL},
    {"pbCollect2", NULL, "labelString", NULL},
    {"pbCollect3", NULL, "labelString", NULL},
    {"pbCollect4", NULL, "labelString", NULL},
    {"cbHelp", NULL, "mnemonic", NULL},
    {"cbHelp", NULL, "labelString", NULL},
    {"pbHelpHTML", NULL, "mnemonic", NULL},
    {"pbHelpHTML", NULL, "labelString", NULL},
    {"pbHelpAbout", NULL, "labelString", NULL},
    {"lbCommand", NULL, "labelString", NULL},
    {"twOutput", NULL, "value", NULL},
    {"lbSens6Curr", NULL, "labelString", NULL},
    {"lbSens6Curr", NULL, "marginHeight", NULL},
    {"lbSens5Curr", NULL, "labelString", NULL},
    {"lbSens5Curr", NULL, "marginHeight", NULL},
    {"lbSens4Curr", NULL, "labelString", NULL},
    {"lbSens4Curr", NULL, "marginHeight", NULL},
    {"lbSens6", NULL, "labelString", NULL},
    {"lbSens5", NULL, "labelString", NULL},
    {"lbSens4", NULL, "labelString", NULL},
    {"lbSens3Curr", NULL, "labelString", NULL},
    {"lbSens3Curr", NULL, "marginHeight", NULL},
    {"lbSens2Curr", NULL, "labelString", NULL},
    {"lbSens2Curr", NULL, "marginHeight", NULL},
    {"lbSens1Curr", NULL, "labelString", NULL},
    {"lbSens1Curr", NULL, "marginHeight", NULL},
    {"lbSens3", NULL, "labelString", NULL},
    {"lbSens2", NULL, "labelString", NULL},
    {"lbSens1", NULL, "labelString", NULL},
    {"pbSourceChoose", NULL, "labelString", NULL},
    {"lbSourceCurr", NULL, "marginBottom", NULL},
    {"lbSourceCurr", NULL, "labelString", NULL},
    {"lbSourceCurr", NULL, "marginHeight", NULL},
    {"pbSourceMove", NULL, "labelString", NULL},
    {"tfSource", NULL, "value", NULL},
    {"lbSource", NULL, "labelString", NULL},
    {"lbExpCurr", NULL, "labelString", NULL},
    {"lbExpSet", NULL, "labelString", NULL},
    {"pbScanTemplate", NULL, "labelString", NULL},
    {"lbScanTemplate", NULL, "labelString", NULL},
    {"lbScanNumImgs", NULL, "labelString", NULL},
    {"lbScanSeqStart", NULL, "labelString", NULL},
    {"lbScanLastFile", NULL, "labelString", NULL},
    {"tfScanTemplate", NULL, "value", NULL},
    {"tfScanNumImgs", NULL, "value", NULL},
    {"tfScanSeqStart", NULL, "value", NULL},
    {"pbScan", NULL, "mnemonic", NULL},
    {"pbScan", NULL, "labelString", NULL},
    {"lbScanNumImgsCurr", NULL, "marginBottom", NULL},
    {"lbScanNumImgsCurr", NULL, "labelString", NULL},
    {"lbScanNumImgsCurr", NULL, "marginHeight", NULL},
    {"lbScanSeqCurr", NULL, "marginBottom", NULL},
    {"lbScanSeqCurr", NULL, "labelString", NULL},
    {"lbScanSeqCurr", NULL, "marginHeight", NULL},
    {"lbScanLastFileCurr", NULL, "marginBottom", NULL},
    {"lbScanLastFileCurr", NULL, "labelString", NULL},
    {"lbScanLastFileCurr", NULL, "marginHeight", NULL},
    {"lbExpWidthCurr", NULL, "marginBottom", NULL},
    {"lbExpWidthCurr", NULL, "labelString", NULL},
    {"lbExpWidthCurr", NULL, "marginHeight", NULL},
    {"lbExpTimeCurr", NULL, "marginBottom", NULL},
    {"lbExpTimeCurr", NULL, "labelString", NULL},
    {"lbExpTimeCurr", NULL, "marginHeight", NULL},
    {"pbExpose", NULL, "mnemonic", NULL},
    {"pbExpose", NULL, "labelString", NULL},
    {"tfExpWidth", NULL, "value", NULL},
    {"tfExpTime", NULL, "value", NULL},
    {"omExpose", NULL, "leftOffset", NULL},
    {"pbExpDark", NULL, "labelString", NULL},
    {"pbExpStill", NULL, "labelString", NULL},
    {"pbExpPhi", NULL, "labelString", NULL},
    {"pbExpOmega", NULL, "labelString", NULL},
    {"lbExpWidth", NULL, "labelString", NULL},
    {"lbExpTime", NULL, "labelString", NULL},
    {"lbDetThetaCurr", NULL, "marginBottom", NULL},
    {"lbDetThetaCurr", NULL, "labelString", NULL},
    {"lbDetThetaCurr", NULL, "marginHeight", NULL},
    {"lbDetDistCurr", NULL, "marginBottom", NULL},
    {"lbDetDistCurr", NULL, "labelString", NULL},
    {"lbDetDistCurr", NULL, "marginHeight", NULL},
    {"pbDetMove", NULL, "mnemonic", NULL},
    {"pbDetMove", NULL, "labelString", NULL},
    {"tfDetDist", NULL, "value", NULL},
    {"tfDetTheta", NULL, "value", NULL},
    {"lbDetTheta", NULL, "labelString", NULL},
    {"lbDetDist", NULL, "labelString", NULL},
    {"lbDetMoveTo", NULL, "labelString", NULL},
    {"lbDetCurr", NULL, "labelString", NULL},
    {"lbDetector", NULL, "labelString", NULL},
    {"lbCrysPhiCurr", NULL, "marginBottom", NULL},
    {"lbCrysPhiCurr", NULL, "labelString", NULL},
    {"lbCrysPhiCurr", NULL, "marginHeight", NULL},
    {"lbCrysChiCurr", NULL, "marginBottom", NULL},
    {"lbCrysChiCurr", NULL, "labelString", NULL},
    {"lbCrysChiCurr", NULL, "marginHeight", NULL},
    {"lbCrysOmegaCurr", NULL, "marginBottom", NULL},
    {"lbCrysOmegaCurr", NULL, "labelString", NULL},
    {"lbCrysOmegaCurr", NULL, "marginHeight", NULL},
    {"pbCrysMove", NULL, "mnemonic", NULL},
    {"pbCrysMove", NULL, "labelString", NULL},
    {"tfCrysPhi", NULL, "value", NULL},
    {"tfCrysChi", NULL, "value", NULL},
    {"tfCrysOmega", NULL, "value", NULL},
    {"lbCrysPhi", NULL, "labelString", NULL},
    {"lbCrysChi", NULL, "labelString", NULL},
    {"lbCrysOmega", NULL, "labelString", NULL},
    {"lbCrysCurr", NULL, "labelString", NULL},
    {"lbCrysMoveTo", NULL, "labelString", NULL},
    {"lbCrystal", NULL, "labelString", NULL},
    {"pbShutter", NULL, "mnemonic", NULL},
    {"pbShutter", NULL, "labelString", NULL},
    {"lbShutter", NULL, "labelString", NULL},
    {"lbShutterYes", NULL, "labelString", NULL},
    {"pbShutterYes", NULL, "labelString", NULL},
    {NULL, NULL, NULL, NULL}
};
#endif

// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  MainWindow::_defaultMainWindowResources[] = {
        NULL
};

//
// Old style constructor, for compatibility only.
//
MainWindow::MainWindow(const char *name, Widget parent) : 
    UIComponent(name)

// Begin user code block <alt_superclass>
// End user code block <alt_superclass>
{
    
    // Begin user code block <alt_constructor>
    // End user code block <alt_constructor>
    create(parent);
}

//
// Class Constructor.
//
MainWindow::MainWindow(const char *name) : UIComponent(name)

// Begin user code block <superclass>
// End user code block <superclass>
{
    
    // Begin user code block <constructor>

    m_sTitle         = "Default title";
    m_poXhelp        = NULL;
    m_poXcursor      = NULL;
    m_scrollbar      = NULL;
    m_nNextScan      = 0;
    m_nPrevScan      = -1;
    m_nNumScans      = 0;
    m_nNumRows       = 1;
    m_nCurrentRow    = 0;
    m_nPrevRow       = 0;
    m_pptTextRow     = new tagTextRow* [m_nNumRows];
    *m_pptTextRow    = new tagTextRow;
    m_ptCurrentTextRow = *m_pptTextRow;
    for (int i = 0; i < 13; i++)
      {
	m_pcTextValue[i] = NULL;
      }

    m_sScanFile      = "";
    m_poScan         = new Cscan ();  // Start with a default scan

    m_poRotation     = NULL;
    m_poDetector     = NULL;
    m_poGoniometer   = NULL;
    m_poSource       = NULL;
    m_poCrystal      = NULL;
    m_hIntervalId    = 0;
    m_hFilePB        = 0;

    m_poDevDet       = NULL;
    m_poDevShutter   = NULL;
    m_poDevCounter   = NULL;
    m_poDevGonCrys   = NULL;
    m_poDevGonDet    = NULL;
    m_poDevSource    = NULL;
    m_poDevScan      = NULL;

    // Set up some pointers for convenience

    m_pdValues[0]    = &m_dExpTime;
    m_pdValues[1]    = &m_dExpWidth;
    m_pdValues[2]    = &m_dCrysOmega;
    m_pdValues[3]    = &m_dCrysChi;
    m_pdValues[4]    = &m_dCrysPhi;
    m_pdValues[5]    = &m_dDetDist;
    m_pdValues[6]    = &m_dDetTheta;
    m_pdValues[7]    = &m_dSource;

    // Set current hardware values to some bogus values so users
    // can see that things were not initialized if these numbers appear

    m_dExpTimeCurr   = -999.0;
    m_dExpWidthCurr  = -999.0;
    m_dCrysOmegaCurr = -999.0;
    m_dCrysChiCurr   = -999.0;
    m_dCrysPhiCurr   = -999.0;
    m_dDetDistCurr   = -999.0;
    m_dDetThetaCurr  = -999.0;
    m_dSourceCurr    = -999.0;
    m_sFormat1       = "%.4lf";
    m_sFormat2       = "%.3lf";

    m_nDetWasActive    = 0;
    m_nShutterWasActive= 0;
    m_nCounterWasActive= 0;
    m_nCrysGonWasActive= 0;
    m_nDetGonWasActive = 0;
    m_nSourceWasActive = 0;
    m_nScanWasActive   = 0;

    // Variables to deal with newly exposed images and how they are named
    // Maybe get these with vGetRequestedValues, so that user can specify
    // things with resource file

    m_sMainTemplate = "./image?.???";
    m_nMainSeqStart = 1;
    m_nMainSeqIncr  = 1;
    m_nMainNumImgs  = 1;

    m_poRemote      = NULL;
    char *pcTemp;

    pcTemp = getenv(ms_sDtdisplay.string());
    if (NULL != pcTemp)
      {
	ms_sDtdisplay = pcTemp;
      }
    m_poXprop       = new CXprop("DTDISPLAY_WINDOW_ID", ms_sDtdisplay.string());

    pcTemp = getenv(ms_sDefaultHeaderTemplateFile.string());

    if (NULL != pcTemp)
      {
	ms_sDefaultHeaderTemplateFile = pcTemp;
      }

    m_poDefaultHeader = new Cimage_header(ms_sDefaultHeaderTemplateFile);

    m_a255cTemp[255] = '\0'; // Make string array is NULL terminated

    m_nDefaultImageSize = 1024 * 1024 * 2  + 2048;

    m_ptClientDataStructs = new UICallbackStruct[400];
    m_nCDC = 0;

    // End user code block <constructor>
}


//
// Minimal Destructor. Base class destroys widgets.
//
MainWindow::~MainWindow() 
{
    
    // Begin user code block <destructor>

  if (NULL != m_poXhelp)
    {
      delete m_poXhelp;
      m_poXhelp = NULL;
    }
  if (NULL != m_poXcursor)
    {
      delete m_poXcursor;
      m_poXcursor = NULL;
    }
  if (NULL != m_poXprop)
    {
      delete m_poXprop;
      m_poXprop = NULL;
    }

  register int i;
  for (i = 0; i < m_nNumRows; i++)
    {
      delete m_pptTextRow[i];
      m_pptTextRow[i] = NULL;
    }
  delete [] m_pptTextRow;
  m_pptTextRow = NULL;
  m_nNumRows = 0;
  m_ptCurrentTextRow = NULL;

  for (i = 0; i < 13; i++)
      {
	if (NULL != m_pcTextValue[i])
	  {
	    XtFree(m_pcTextValue[i]);
	  }
      }
  if (NULL != m_poDetector)
    {
      delete m_poDetector;
      m_poDetector = NULL;
    }
  if (NULL != m_poGoniometer)
    {
      delete m_poGoniometer;
      m_poGoniometer = NULL;
    }
  if (NULL != m_poSource)
    {
      delete m_poSource;
      m_poSource = NULL;
    }
  if (NULL != m_poCrystal)
    {
      delete m_poCrystal;
      m_poCrystal = NULL;
    }

  if (NULL != m_poScan)
    {
      delete m_poScan;
      m_poScan = NULL;
    }
  if (NULL != m_poRotation)
    {
      delete m_poRotation;
      m_poRotation = NULL;
    }

  if (NULL != m_poDevScan)
    {
      delete m_poDevScan;
      m_poDevScan = NULL;
    }
  if (NULL != m_poDevSource)
    { 
      delete m_poDevSource;
      m_poDevSource = NULL;
    }
  if (NULL != m_poDevShutter)
    { 
      delete m_poDevShutter;
      m_poDevShutter = NULL;
    }
  if (NULL != m_poDevDet)
    { 
      delete m_poDevDet;
      m_poDevDet = NULL;
    }
  if (NULL != m_poDevCounter)
    { 
      delete m_poDevCounter;
      m_poDevCounter = NULL;
    }
  if (NULL != m_poDevGonDet)
    { 
      delete m_poDevGonDet;
      m_poDevGonDet = NULL;
    }
  if (NULL != m_poDevGonCrys)
    { 
      delete m_poDevGonCrys;
      m_poDevGonCrys = NULL;
    }

  if (NULL != m_poDefaultHeader)
    {
      delete m_poDefaultHeader;
      m_poDefaultHeader = NULL;
    }

    // End user code block <destructor>
    delete []  _clientDataStructs;
}

//
// Handle creation of all widgets in the class.
//
void MainWindow::create(Widget parent) 
{
    Cardinal ac = 0;
    Arg      args[256];
    Cardinal cdc = 0;
    Boolean  argok = False;
    
    _clientDataStructs = new UICallbackStruct[351];
    
    //
    // Load any class-defaulted resources for this object.
    //
    setDefaultResources(parent, _defaultMainWindowResources);
    
#if defined(cxx_bx_compat)
    //
    // Setup app-defaults fallback table if not already done.
    //
    if (_initAppDefaults)
    {
        initAppDefaults(parent, "MainWindow", _appDefaults);
        _initAppDefaults = False;
    }
    //
    // Now set the app-defaults for this instance.
    //
    setAppDefaults(parent, _appDefaults, _name, False);
#endif
    
    //
    // Register the converters for the widgets.
    //
    RegisterBxConverters(XtWidgetToApplicationContext(parent));
    XtInitializeWidgetClass((WidgetClass)xmMainWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmDialogShellWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmMessageBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFileSelectionBoxWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmToggleButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFormWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextFieldWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmLabelWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmFrameWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScaleWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScrolledWindowWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmTextWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmCascadeButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmPushButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmSeparatorWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmArrowButtonWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmScrollBarWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    XtInitializeWidgetClass((WidgetClass)xmRowColumnWidgetClass);
    
    //
    // Create an unmanaged widget as the top of the hierarchy.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 192); ac++;
    XtSetArg(args[ac], XmNy, 122); ac++;
    XtSetArg(args[ac], XmNwidth, 880); ac++;
    XtSetArg(args[ac], XmNheight, 746); ac++;
    _MainWindow = XmCreateMainWindow(parent,
        _name,
        args, 
        ac);
    
    _w = _MainWindow;
    //
    // Add a callback to guard against widget destruction..
    //
    installDestroyHandler();
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 666); ac++;
    XtSetArg(args[ac], XmNheight, 303); ac++;
    _xmDialogShellWarnPosition = XtCreatePopupShell("xmDialogShellWarnPosition",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNdialogStyle, XmDIALOG_FULL_APPLICATION_MODAL); ac++;
    XtSetArg(args[ac], XmNx, 495); ac++;
    XtSetArg(args[ac], XmNy, 1024); ac++;
    XtSetArg(args[ac], XmNwidth, 666); ac++;
    XtSetArg(args[ac], XmNheight, 303); ac++;
    _mbWarnPosition = XmCreateMessageBox(_xmDialogShellWarnPosition,
        "mbWarnPosition",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_mbWarnPosition,
        XmNokCallback,
        MainWindow::vWarnPositionCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_mbWarnPosition,
        XmNcancelCallback,
        MainWindow::vWarnPositionCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    XtUnmanageChild(XtNameToWidget(_mbWarnPosition, "*Help"));
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 277); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _xmDialogShellHeaderEdit = XtCreatePopupShell("xmDialogShellHeaderEdit",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellHeaderEdit, _appDefaults, "cUIheaderEdit", True);
#endif
    _cUIheaderEdit = new CUIheaderEdit("cUIheaderEdit");
    
    // Begin user code block <new_cUIheaderEdit>
    // End user code block <new_cUIheaderEdit>
    
    _cUIheaderEdit->create(_xmDialogShellHeaderEdit);
    
    //
    // Set exposed resources.
    //
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 686); ac++;
    XtSetArg(args[ac], XmNheight, 545); ac++;
    _xmDialogShellEditDetector = XtCreatePopupShell("xmDialogShellEditDetector",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellEditDetector, _appDefaults, "cUIeditdetector", True);
#endif
    _cUIeditdetector = new CUIeditdetector("cUIeditdetector");
    
    // Begin user code block <new_cUIeditdetector>
    // End user code block <new_cUIeditdetector>
    
    _cUIeditdetector->create(_xmDialogShellEditDetector);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 435); ac++;
    XtSetArg(args[ac], XmNy, 1024); ac++;
    XtSetArg(args[ac], XmNwidth, 686); ac++;
    XtSetArg(args[ac], XmNheight, 545); ac++;
    XtSetValues(_cUIeditdetector->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 471); ac++;
    _xmDialogShellFileOpenSave = XtCreatePopupShell("xmDialogShellFileOpenSave",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 610); ac++;
    XtSetArg(args[ac], XmNy, 900); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 471); ac++;
    _fsdFileOpenSave = XmCreateFileSelectionBox(_xmDialogShellFileOpenSave,
        "fsdFileOpenSave",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_fsdFileOpenSave,
        XmNhelpCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_fsdFileOpenSave,
        XmNokCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_fsdFileOpenSave,
        XmNcancelCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_fsdFileOpenSave,
        XmNapplyCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 298); ac++;
    XtSetArg(args[ac], XmNwidth, 416); ac++;
    XtSetArg(args[ac], XmNheight, 29); ac++;
    _tbFileOpenSave = XmCreateToggleButton(_fsdFileOpenSave,
        "tbFileOpenSave",
        args, 
        ac);
    XtManageChild(_tbFileOpenSave);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 566); ac++;
    XtSetArg(args[ac], XmNheight, 362); ac++;
    _xmDialogShellViewHeader = XtCreatePopupShell("xmDialogShellViewHeader",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellViewHeader, _appDefaults, "cUIviewheader", True);
#endif
    _cUIviewheader = new CUIviewheader("cUIviewheader");
    
    // Begin user code block <new_cUIviewheader>
    // End user code block <new_cUIviewheader>
    
    _cUIviewheader->create(_xmDialogShellViewHeader);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 542); ac++;
    XtSetArg(args[ac], XmNy, 1024); ac++;
    XtSetArg(args[ac], XmNwidth, 566); ac++;
    XtSetArg(args[ac], XmNheight, 362); ac++;
    XtSetValues(_cUIviewheader->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 552); ac++;
    _xmDialogShellImageFile = XtCreatePopupShell("xmDialogShellImageFile",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellImageFile, _appDefaults, "cUIimagefileSelect", True);
#endif
    _cUIimagefileSelect = new CUIimagefileSelect("cUIimagefileSelect");
    
    // Begin user code block <new_cUIimagefileSelect>
    // End user code block <new_cUIimagefileSelect>
    
    _cUIimagefileSelect->create(_xmDialogShellImageFile);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 613); ac++;
    XtSetArg(args[ac], XmNy, 1024); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 552); ac++;
    XtSetValues(_cUIimagefileSelect->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 370); ac++;
    XtSetArg(args[ac], XmNheight, 118); ac++;
    _xmDialogShellError = XtCreatePopupShell("xmDialogShellError",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 631); ac++;
    XtSetArg(args[ac], XmNy, 1024); ac++;
    XtSetArg(args[ac], XmNwidth, 370); ac++;
    XtSetArg(args[ac], XmNheight, 118); ac++;
    _mbError = XmCreateMessageBox(_xmDialogShellError,
        "mbError",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 632); ac++;
    XtSetArg(args[ac], XmNheight, 457); ac++;
    _xmDialogShellWavelength = XtCreatePopupShell("xmDialogShellWavelength",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
#if defined(cxx_bx_compat)
    setAppDefaults(_xmDialogShellWavelength, _appDefaults, "cUIwavelength", True);
#endif
    _cUIwavelength = new CUIwavelength("cUIwavelength");
    
    // Begin user code block <new_cUIwavelength>
    // End user code block <new_cUIwavelength>
    
    _cUIwavelength->create(_xmDialogShellWavelength);
    
    //
    // Set exposed resources.
    //
    ac = 0;
    XtSetArg(args[ac], XmNx, 512); ac++;
    XtSetArg(args[ac], XmNy, 931); ac++;
    XtSetArg(args[ac], XmNwidth, 632); ac++;
    XtSetArg(args[ac], XmNheight, 457); ac++;
    XtSetValues(_cUIwavelength->baseWidget(), args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 1244); ac++;
    XtSetArg(args[ac], XmNheight, 714); ac++;
    _xmDialogShellCollectScan = XtCreatePopupShell("xmDialogShellCollectScan",
        xmDialogShellWidgetClass,
        _MainWindow,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNdialogType, XmDIALOG_PROMPT); ac++;
    XtSetArg(args[ac], XmNautoUnmanage, False); ac++;
    XtSetArg(args[ac], XmNx, 60); ac++;
    XtSetArg(args[ac], XmNy, 1006); ac++;
    XtSetArg(args[ac], XmNwidth, 1244); ac++;
    XtSetArg(args[ac], XmNheight, 714); ac++;
    _sdCollectScan = XmCreateSelectionBox(_xmDialogShellCollectScan,
        "sdCollectScan",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdCollectScan,
        XmNhelpCallback,
        MainWindow::vScanCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdCollectScan,
        XmNokCallback,
        MainWindow::vScanCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdCollectScan,
        XmNcancelCallback,
        MainWindow::vScanCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdCollectScan,
        XmNapplyCallback,
        MainWindow::vScanCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 403); ac++;
    XtSetArg(args[ac], XmNy, 141); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 432); ac++;
    _xmDialogShellCollectScanFile = XtCreatePopupShell("xmDialogShellCollectScanFile",
        xmDialogShellWidgetClass,
        _sdCollectScan,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNautoUnmanage, True); ac++;
    XtSetArg(args[ac], XmNx, 403); ac++;
    XtSetArg(args[ac], XmNy, 141); ac++;
    XtSetArg(args[ac], XmNwidth, 438); ac++;
    XtSetArg(args[ac], XmNheight, 432); ac++;
    _fsdCollectScanFile = XmCreateFileSelectionBox(_xmDialogShellCollectScanFile,
        "fsdCollectScanFile",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_fsdCollectScanFile,
        XmNokCallback,
        MainWindow::vScanSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 454); ac++;
    XtSetArg(args[ac], XmNy, 167); ac++;
    XtSetArg(args[ac], XmNwidth, 335); ac++;
    XtSetArg(args[ac], XmNheight, 379); ac++;
    _xmDialogShellDatum = XtCreatePopupShell("xmDialogShellDatum",
        xmDialogShellWidgetClass,
        _sdCollectScan,
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNdialogTitle, 
        BX_CONVERT(_xmDialogShellDatum, "d*TREK - dtcollect: Enter datum (relative zero) position", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNdialogType, XmDIALOG_PROMPT); ac++;
    XtSetArg(args[ac], XmNx, 454); ac++;
    XtSetArg(args[ac], XmNy, 167); ac++;
    XtSetArg(args[ac], XmNwidth, 335); ac++;
    XtSetArg(args[ac], XmNheight, 379); ac++;
    _sdDatum = XmCreateSelectionBox(_xmDialogShellDatum,
        "sdDatum",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdDatum,
        XmNokCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_sdDatum,
        XmNapplyCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 11); ac++;
    XtSetArg(args[ac], XmNwidth, 313); ac++;
    XtSetArg(args[ac], XmNheight, 220); ac++;
    _fmDatum = XmCreateForm(_sdDatum,
        "fmDatum",
        args, 
        ac);
    XtManageChild(_fmDatum);
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 99); ac++;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 160); ac++;
    XtSetArg(args[ac], XmNwidth, 154); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfDatumTheta = XmCreateTextField(_fmDatum,
        "tfDatumTheta",
        args, 
        ac);
    XtManageChild(_tfDatumTheta);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumTheta,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumTheta,
        XmNlosingFocusCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 99); ac++;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 154); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfDatumDist = XmCreateTextField(_fmDatum,
        "tfDatumDist",
        args, 
        ac);
    XtManageChild(_tfDatumDist);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumDist,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumDist,
        XmNlosingFocusCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 99); ac++;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 154); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfDatumPhi = XmCreateTextField(_fmDatum,
        "tfDatumPhi",
        args, 
        ac);
    XtManageChild(_tfDatumPhi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumPhi,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumPhi,
        XmNlosingFocusCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 99); ac++;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 154); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfDatumChi = XmCreateTextField(_fmDatum,
        "tfDatumChi",
        args, 
        ac);
    XtManageChild(_tfDatumChi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumChi,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumChi,
        XmNlosingFocusCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 99); ac++;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 154); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _tfDatumOmega = XmCreateTextField(_fmDatum,
        "tfDatumOmega",
        args, 
        ac);
    XtManageChild(_tfDatumOmega);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumOmega,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatumOmega,
        XmNlosingFocusCallback,
        MainWindow::vScanDatumCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 160); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbDatumTheta = XmCreateLabel(_fmDatum,
        "lbDatumTheta",
        args, 
        ac);
    XtManageChild(_lbDatumTheta);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbDatumDist = XmCreateLabel(_fmDatum,
        "lbDatumDist",
        args, 
        ac);
    XtManageChild(_lbDatumDist);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbDatumPhi = XmCreateLabel(_fmDatum,
        "lbDatumPhi",
        args, 
        ac);
    XtManageChild(_lbDatumPhi);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbDatumChi = XmCreateLabel(_fmDatum,
        "lbDatumChi",
        args, 
        ac);
    XtManageChild(_lbDatumChi);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _lbDatumOmega = XmCreateLabel(_fmDatum,
        "lbDatumOmega",
        args, 
        ac);
    XtManageChild(_lbDatumOmega);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_ANY); ac++;
    XtSetArg(args[ac], XmNx, 11); ac++;
    XtSetArg(args[ac], XmNy, 13); ac++;
    XtSetArg(args[ac], XmNwidth, 1222); ac++;
    XtSetArg(args[ac], XmNheight, 542); ac++;
    _form9 = XmCreateForm(_sdCollectScan,
        "form9",
        args, 
        ac);
    XtManageChild(_form9);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 417); ac++;
    XtSetArg(args[ac], XmNwidth, 360); ac++;
    XtSetArg(args[ac], XmNheight, 125); ac++;
    _frScanProgress = XmCreateFrame(_form9,
        "frScanProgress",
        args, 
        ac);
    XtManageChild(_frScanProgress);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 354); ac++;
    XtSetArg(args[ac], XmNheight, 119); ac++;
    _foScanProgress = XmCreateForm(_frScanProgress,
        "foScanProgress",
        args, 
        ac);
    XtManageChild(_foScanProgress);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 75); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanPercent = XmCreateLabel(_foScanProgress,
        "lbScanPercent",
        args, 
        ac);
    XtManageChild(_lbScanPercent);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNscaleHeight, 25); ac++;
    XtSetArg(args[ac], XmNshowValue, True); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 72); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _scScanTime = XmCreateScale(_foScanProgress,
        "scScanTime",
        args, 
        ac);
    XtManageChild(_scScanTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 36); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _frScanTimeRem = XmCreateFrame(_foScanProgress,
        "frScanTimeRem",
        args, 
        ac);
    XtManageChild(_frScanTimeRem);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 123); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanTimeRemCurr = XmCreateLabel(_frScanTimeRem,
        "lbScanTimeRemCurr",
        args, 
        ac);
    XtManageChild(_lbScanTimeRemCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _frScanTimeElapsed = XmCreateFrame(_foScanProgress,
        "frScanTimeElapsed",
        args, 
        ac);
    XtManageChild(_frScanTimeElapsed);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 123); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanTimeElapsedCurr = XmCreateLabel(_frScanTimeElapsed,
        "lbScanTimeElapsedCurr",
        args, 
        ac);
    XtManageChild(_lbScanTimeElapsedCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanTimeElapsed = XmCreateLabel(_foScanProgress,
        "lbScanTimeElapsed",
        args, 
        ac);
    XtManageChild(_lbScanTimeElapsed);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanTimeRem = XmCreateLabel(_foScanProgress,
        "lbScanTimeRem",
        args, 
        ac);
    XtManageChild(_lbScanTimeRem);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 292); ac++;
    XtSetArg(args[ac], XmNwidth, 360); ac++;
    XtSetArg(args[ac], XmNheight, 125); ac++;
    _frImageProgress = XmCreateFrame(_form9,
        "frImageProgress",
        args, 
        ac);
    XtManageChild(_frImageProgress);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 354); ac++;
    XtSetArg(args[ac], XmNheight, 119); ac++;
    _foImageProgress = XmCreateForm(_frImageProgress,
        "foImageProgress",
        args, 
        ac);
    XtManageChild(_foImageProgress);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 75); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbImagePercent = XmCreateLabel(_foImageProgress,
        "lbImagePercent",
        args, 
        ac);
    XtManageChild(_lbImagePercent);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNscaleHeight, 25); ac++;
    XtSetArg(args[ac], XmNshowValue, True); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 72); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _scImageTime = XmCreateScale(_foImageProgress,
        "scImageTime",
        args, 
        ac);
    XtManageChild(_scImageTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 36); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _frImageTimeRem = XmCreateFrame(_foImageProgress,
        "frImageTimeRem",
        args, 
        ac);
    XtManageChild(_frImageTimeRem);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 123); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbImageTimeRemCurr = XmCreateLabel(_frImageTimeRem,
        "lbImageTimeRemCurr",
        args, 
        ac);
    XtManageChild(_lbImageTimeRemCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 225); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 129); ac++;
    XtSetArg(args[ac], XmNheight, 36); ac++;
    _frImageTimeElapsed = XmCreateFrame(_foImageProgress,
        "frImageTimeElapsed",
        args, 
        ac);
    XtManageChild(_frImageTimeElapsed);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 123); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbImageTimeElapsedCurr = XmCreateLabel(_frImageTimeElapsed,
        "lbImageTimeElapsedCurr",
        args, 
        ac);
    XtManageChild(_lbImageTimeElapsedCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbImageTimeElapsed = XmCreateLabel(_foImageProgress,
        "lbImageTimeElapsed",
        args, 
        ac);
    XtManageChild(_lbImageTimeElapsed);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 205); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbImageTimeRem = XmCreateLabel(_foImageProgress,
        "lbImageTimeRem",
        args, 
        ac);
    XtManageChild(_lbImageTimeRem);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNx, 362); ac++;
    XtSetArg(args[ac], XmNy, 292); ac++;
    XtSetArg(args[ac], XmNwidth, 859); ac++;
    XtSetArg(args[ac], XmNheight, 250); ac++;
    _swScan1 = XmCreateScrolledWindow(_form9,
        "swScan1",
        args, 
        ac);
    XtManageChild(_swScan1);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    XtSetArg(args[ac], XmNvalue, "This scrolled text window contains\n\
additional information about scans, \n\
such as disk space usage."); ac++;
    _twScan = XmCreateText(_swScan1,
        "twScan",
        args, 
        ac);
    XtManageChild(_twScan);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 266); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _mnScan = XmCreateMenuBar(_form9,
        "mnScan",
        args, 
        ac);
    XtManageChild(_mnScan);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 5); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbScanFile = XmCreateCascadeButton(_mnScan,
        "cbScanFile",
        args, 
        ac);
    XtManageChild(_cbScanFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 132); ac++;
    XtSetArg(args[ac], XmNheight, 106); ac++;
    _pmScanFile = XmCreatePulldownMenu(XtParent(_cbScanFile),
        "pmScanFile",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmScanFile,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Load and save scan table files";
    XtAddCallback(_pmScanFile,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanFileOpen = XmCreatePushButton(_pmScanFile,
        "pbScanFileOpen",
        args, 
        ac);
    XtManageChild(_pbScanFileOpen);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileOpen,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Load a scan table file";
    XtAddCallback(_pbScanFileOpen,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileOpen,
        XmNactivateCallback,
        MainWindow::vScanFileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanFileSave = XmCreatePushButton(_pmScanFile,
        "pbScanFileSave",
        args, 
        ac);
    XtManageChild(_pbScanFileSave);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileSave,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Save a scan table to the same file";
    XtAddCallback(_pbScanFileSave,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileSave,
        XmNactivateCallback,
        MainWindow::vScanFileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanFileSaveAs = XmCreatePushButton(_pmScanFile,
        "pbScanFileSaveAs",
        args, 
        ac);
    XtManageChild(_pbScanFileSaveAs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileSaveAs,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Save a scan table to a new file";
    XtAddCallback(_pbScanFileSaveAs,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileSaveAs,
        XmNactivateCallback,
        MainWindow::vScanFileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spScanFile = XmCreateSeparator(_pmScanFile,
        "spScanFile",
        args, 
        ac);
    XtManageChild(_spScanFile);
    
    ac = 0;
    _pbScanFileClose = XmCreatePushButton(_pmScanFile,
        "pbScanFileClose",
        args, 
        ac);
    XtManageChild(_pbScanFileClose);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileClose,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Close this scan dialog window";
    XtAddCallback(_pbScanFileClose,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanFileClose,
        XmNactivateCallback,
        MainWindow::vScanFileCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmScanFile); ac++;
    XtSetValues(_cbScanFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 69); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbScanEdit = XmCreateCascadeButton(_mnScan,
        "cbScanEdit",
        args, 
        ac);
    XtManageChild(_cbScanEdit);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 187); ac++;
    XtSetArg(args[ac], XmNheight, 208); ac++;
    _pmScanEdit = XmCreatePulldownMenu(XtParent(_cbScanEdit),
        "pmScanEdit",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmScanEdit,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit whole scans in the scan table";
    XtAddCallback(_pmScanEdit,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanEditCopy = XmCreatePushButton(_pmScanEdit,
        "pbScanEditCopy",
        args, 
        ac);
    XtManageChild(_pbScanEditCopy);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditCopy,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Copy a scan to buffer";
    XtAddCallback(_pbScanEditCopy,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditCopy,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanEditCut = XmCreatePushButton(_pmScanEdit,
        "pbScanEditCut",
        args, 
        ac);
    XtManageChild(_pbScanEditCut);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditCut,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Cut a scan to buffer";
    XtAddCallback(_pbScanEditCut,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_pbScanEditCut,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbScanEditPaste = XmCreatePushButton(_pmScanEdit,
        "pbScanEditPaste",
        args, 
        ac);
    XtManageChild(_pbScanEditPaste);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditPaste,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Paste a saved scan into current scan";
    XtAddCallback(_pbScanEditPaste,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_pbScanEditPaste,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanEditInsert = XmCreatePushButton(_pmScanEdit,
        "pbScanEditInsert",
        args, 
        ac);
    XtManageChild(_pbScanEditInsert);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditInsert,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Insert a new scan after current scan";
    XtAddCallback(_pbScanEditInsert,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_pbScanEditInsert,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 4); ac++;
    _pbScanEditDelete = XmCreatePushButton(_pmScanEdit,
        "pbScanEditDelete",
        args, 
        ac);
    XtManageChild(_pbScanEditDelete);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditDelete,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Delete current scan";
    XtAddCallback(_pbScanEditDelete,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_pbScanEditDelete,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spScanEdit = XmCreateSeparator(_pmScanEdit,
        "spScanEdit",
        args, 
        ac);
    XtManageChild(_spScanEdit);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    _pbScanEditPasteMW = XmCreatePushButton(_pmScanEdit,
        "pbScanEditPasteMW",
        args, 
        ac);
    XtManageChild(_pbScanEditPasteMW);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditPasteMW,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Paste scan from main window into current scan";
    XtAddCallback(_pbScanEditPasteMW,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)5;
    XtAddCallback(_pbScanEditPasteMW,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 4); ac++;
    _pbScanEditDeleteAll = XmCreatePushButton(_pmScanEdit,
        "pbScanEditDeleteAll",
        args, 
        ac);
    XtManageChild(_pbScanEditDeleteAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditDeleteAll,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Delete all scans";
    XtAddCallback(_pbScanEditDeleteAll,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)6;
    XtAddCallback(_pbScanEditDeleteAll,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spScanEdit1 = XmCreateSeparator(_pmScanEdit,
        "spScanEdit1",
        args, 
        ac);
    XtManageChild(_spScanEdit1);
    
    ac = 0;
    _cbScanEditMulti = XmCreateCascadeButton(_pmScanEdit,
        "cbScanEditMulti",
        args, 
        ac);
    XtManageChild(_cbScanEditMulti);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 228); ac++;
    XtSetArg(args[ac], XmNheight, 79); ac++;
    _pmScanEditMulti = XmCreatePulldownMenu(XtParent(_cbScanEditMulti),
        "pmScanEditMulti",
        args, 
        ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 7); ac++;
    _pbScanEditMulti2 = XmCreatePushButton(_pmScanEditMulti,
        "pbScanEditMulti2",
        args, 
        ac);
    XtManageChild(_pbScanEditMulti2);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditMulti2,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make selected scan a 2 wavelength experiment";
    XtAddCallback(_pbScanEditMulti2,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_pbScanEditMulti2,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 7); ac++;
    _pbScanEditMulti3 = XmCreatePushButton(_pmScanEditMulti,
        "pbScanEditMulti3",
        args, 
        ac);
    XtManageChild(_pbScanEditMulti3);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditMulti3,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make selected scan a 3 wavelength experiment";
    XtAddCallback(_pbScanEditMulti3,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_pbScanEditMulti3,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 7); ac++;
    _pbScanEditMulti3i = XmCreatePushButton(_pmScanEditMulti,
        "pbScanEditMulti3i",
        args, 
        ac);
    XtManageChild(_pbScanEditMulti3i);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanEditMulti3i,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make selected scan a 3-wavelength inverse beam experiment";
    XtAddCallback(_pbScanEditMulti3i,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)9;
    XtAddCallback(_pbScanEditMulti3i,
        XmNactivateCallback,
        MainWindow::vScanEditCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmScanEditMulti); ac++;
    XtSetValues(_cbScanEditMulti, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmScanEdit); ac++;
    XtSetValues(_cbScanEdit, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 133); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbScanView = XmCreateCascadeButton(_mnScan,
        "cbScanView",
        args, 
        ac);
    XtManageChild(_cbScanView);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 288); ac++;
    XtSetArg(args[ac], XmNheight, 104); ac++;
    _pmScanView = XmCreatePulldownMenu(XtParent(_cbScanView),
        "pmScanView",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmScanView,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Change number of scans viewed";
    XtAddCallback(_pmScanView,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanViewEnlarge = XmCreatePushButton(_pmScanView,
        "pbScanViewEnlarge",
        args, 
        ac);
    XtManageChild(_pbScanViewEnlarge);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewEnlarge,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Enlarge the view of scans";
    XtAddCallback(_pbScanViewEnlarge,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewEnlarge,
        XmNactivateCallback,
        MainWindow::vScanViewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanViewShrink = XmCreatePushButton(_pmScanView,
        "pbScanViewShrink",
        args, 
        ac);
    XtManageChild(_pbScanViewShrink);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewShrink,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Shrink the view of scans";
    XtAddCallback(_pbScanViewShrink,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_pbScanViewShrink,
        XmNactivateCallback,
        MainWindow::vScanViewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanViewNarrow = XmCreatePushButton(_pmScanView,
        "pbScanViewNarrow",
        args, 
        ac);
    XtManageChild(_pbScanViewNarrow);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewNarrow,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make the scan dialog window smaller horizontally";
    XtAddCallback(_pbScanViewNarrow,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewNarrow,
        XmNactivateCallback,
        MainWindow::vScanArrowCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanViewWiden = XmCreatePushButton(_pmScanView,
        "pbScanViewWiden",
        args, 
        ac);
    XtManageChild(_pbScanViewWiden);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewWiden,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make the scan dialog window wider horizontally";
    XtAddCallback(_pbScanViewWiden,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanViewWiden,
        XmNactivateCallback,
        MainWindow::vScanArrowCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmScanView); ac++;
    XtSetValues(_cbScanView, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 197); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbScanHelp = XmCreateCascadeButton(_mnScan,
        "cbScanHelp",
        args, 
        ac);
    XtManageChild(_cbScanHelp);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 192); ac++;
    XtSetArg(args[ac], XmNheight, 29); ac++;
    _pmScanHelp = XmCreatePulldownMenu(XtParent(_cbScanHelp),
        "pmScanHelp",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get help on this dialog";
    XtAddCallback(_pmScanHelp,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbScanHelpHTML = XmCreatePushButton(_pmScanHelp,
        "pbScanHelpHTML",
        args, 
        ac);
    XtManageChild(_pbScanHelpHTML);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanHelpHTML,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get help via HTML viewer";
    XtAddCallback(_pbScanHelpHTML,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"ScanHelpHTML$$";
    XtAddCallback(_pbScanHelpHTML,
        XmNactivateCallback,
        MainWindow::vHTMLHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmScanHelp); ac++;
    XtSetValues(_cbScanHelp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNarrowDirection, XmARROW_LEFT); ac++;
    XtSetArg(args[ac], XmNx, 700); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 25); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _abScan = XmCreateArrowButton(_form9,
        "abScan",
        args, 
        ac);
    XtManageChild(_abScan);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abScan,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Enlarge or shrink horizontal window size";
    XtAddCallback(_abScan,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_abScan,
        XmNactivateCallback,
        MainWindow::vScanArrowCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 280); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    _lbScanSelected = XmCreateLabel(_form9,
        "lbScanSelected",
        args, 
        ac);
    XtManageChild(_lbScanSelected);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 260); ac++;
    XtSetArg(args[ac], XmNwidth, 1222); ac++;
    XtSetArg(args[ac], XmNheight, 32); ac++;
    _spScan = XmCreateSeparator(_form9,
        "spScan",
        args, 
        ac);
    XtManageChild(_spScan);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_ANY); ac++;
    XtSetArg(args[ac], XmNx, 18); ac++;
    XtSetArg(args[ac], XmNy, 106); ac++;
    XtSetArg(args[ac], XmNwidth, 1185); ac++;
    XtSetArg(args[ac], XmNheight, 145); ac++;
    _form18 = XmCreateForm(_form9,
        "form18",
        args, 
        ac);
    XtManageChild(_form18);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 2); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _lbScanNumCurr = XmCreateLabel(_form18,
        "lbScanNumCurr",
        args, 
        ac);
    XtManageChild(_lbScanNumCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 82); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _lbShutter1Curr = XmCreateLabel(_form18,
        "lbShutter1Curr",
        args, 
        ac);
    XtManageChild(_lbShutter1Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 162); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbRotStartCurr = XmCreateLabel(_form18,
        "lbRotStartCurr",
        args, 
        ac);
    XtManageChild(_lbRotStartCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 252); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbRotEndCurr = XmCreateLabel(_form18,
        "lbRotEndCurr",
        args, 
        ac);
    XtManageChild(_lbRotEndCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 342); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbRotIncrCurr = XmCreateLabel(_form18,
        "lbRotIncrCurr",
        args, 
        ac);
    XtManageChild(_lbRotIncrCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 412); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbTimeCurr = XmCreateLabel(_form18,
        "lbTimeCurr",
        args, 
        ac);
    XtManageChild(_lbTimeCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 482); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbAxisCurr = XmCreateLabel(_form18,
        "lbAxisCurr",
        args, 
        ac);
    XtManageChild(_lbAxisCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 562); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 156); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbTemplateCurr = XmCreateLabel(_form18,
        "lbTemplateCurr",
        args, 
        ac);
    XtManageChild(_lbTemplateCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 727); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSeqStartCurr = XmCreateLabel(_form18,
        "lbSeqStartCurr",
        args, 
        ac);
    XtManageChild(_lbSeqStartCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 787); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSeqIncrCurr = XmCreateLabel(_form18,
        "lbSeqIncrCurr",
        args, 
        ac);
    XtManageChild(_lbSeqIncrCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 847); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 136); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDatumCurr = XmCreateLabel(_form18,
        "lbDatumCurr",
        args, 
        ac);
    XtManageChild(_lbDatumCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 987); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbWavelengthCurr = XmCreateLabel(_form18,
        "lbWavelengthCurr",
        args, 
        ac);
    XtManageChild(_lbWavelengthCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 1067); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbNumOscCurr = XmCreateLabel(_form18,
        "lbNumOscCurr",
        args, 
        ac);
    XtManageChild(_lbNumOscCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 1127); ac++;
    XtSetArg(args[ac], XmNy, 95); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDarkIntvlCurr = XmCreateLabel(_form18,
        "lbDarkIntvlCurr",
        args, 
        ac);
    XtManageChild(_lbDarkIntvlCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNx, 987); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _pbWavelength = XmCreatePushButton(_form18,
        "pbWavelength",
        args, 
        ac);
    XtManageChild(_pbWavelength);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbWavelength,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit wavelength for this scan";
    XtAddCallback(_pbWavelength,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNx, 847); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 136); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _pbDatum = XmCreatePushButton(_form18,
        "pbDatum",
        args, 
        ac);
    XtManageChild(_pbDatum);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbDatum,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit datum (relative zero, home) angles for this scan";
    XtAddCallback(_pbDatum,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 82); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 59); ac++;
    XtSetArg(args[ac], XmNisHomogeneous, False); ac++;
    _rbShutter = XmCreateRadioBox(_form18,
        "rbShutter",
        args, 
        ac);
    XtManageChild(_rbShutter);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginLeft, 16); ac++;
    XtSetArg(args[ac], XmNindicatorSize, 12); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _tbShutterOpen = XmCreateToggleButton(_rbShutter,
        "tbShutterOpen",
        args, 
        ac);
    XtManageChild(_tbShutterOpen);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbShutterOpen,
        XmNarmCallback,
        MainWindow::vScanRadioCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginLeft, 16); ac++;
    XtSetArg(args[ac], XmNindicatorSize, 12); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _tbShutterClosed = XmCreateToggleButton(_rbShutter,
        "tbShutterClosed",
        args, 
        ac);
    XtManageChild(_tbShutterClosed);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_tbShutterClosed,
        XmNarmCallback,
        MainWindow::vScanRadioCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNx, 562); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 156); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _pbTemplate = XmCreatePushButton(_form18,
        "pbTemplate",
        args, 
        ac);
    XtManageChild(_pbTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbTemplate,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit the image file template and directory";
    XtAddCallback(_pbTemplate,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmaximum, 555); ac++;
    XtSetArg(args[ac], XmNuserData, 12); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 1127); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbDarkIntvl = XmCreateScrollBar(_form18,
        "sbDarkIntvl",
        args, 
        ac);
    XtManageChild(_sbDarkIntvl);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)12;
    XtAddCallback(_sbDarkIntvl,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmaximum, 111); ac++;
    XtSetArg(args[ac], XmNuserData, 11); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 1067); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbNumOsc = XmCreateScrollBar(_form18,
        "sbNumOsc",
        args, 
        ac);
    XtManageChild(_sbNumOsc);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)11;
    XtAddCallback(_sbNumOsc,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNminimum, -100); ac++;
    XtSetArg(args[ac], XmNmaximum, 122); ac++;
    XtSetArg(args[ac], XmNuserData, 8); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 787); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbSeqIncr = XmCreateScrollBar(_form18,
        "sbSeqIncr",
        args, 
        ac);
    XtManageChild(_sbSeqIncr);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)8;
    XtAddCallback(_sbSeqIncr,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNminimum, -500); ac++;
    XtSetArg(args[ac], XmNmaximum, 611); ac++;
    XtSetArg(args[ac], XmNuserData, 7); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 727); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbSeqStart = XmCreateScrollBar(_form18,
        "sbSeqStart",
        args, 
        ac);
    XtManageChild(_sbSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)7;
    XtAddCallback(_sbSeqStart,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmaximum, 4000); ac++;
    XtSetArg(args[ac], XmNuserData, 4); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 412); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbTime = XmCreateScrollBar(_form18,
        "sbTime",
        args, 
        ac);
    XtManageChild(_sbTime);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)4;
    XtAddCallback(_sbTime,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmaximum, 111); ac++;
    XtSetArg(args[ac], XmNuserData, 3); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 342); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbRotIncr = XmCreateScrollBar(_form18,
        "sbRotIncr",
        args, 
        ac);
    XtManageChild(_sbRotIncr);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_sbRotIncr,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNminimum, -360); ac++;
    XtSetArg(args[ac], XmNmaximum, 440); ac++;
    XtSetArg(args[ac], XmNuserData, 2); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 252); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbRotEnd = XmCreateScrollBar(_form18,
        "sbRotEnd",
        args, 
        ac);
    XtManageChild(_sbRotEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_sbRotEnd,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNminimum, -360); ac++;
    XtSetArg(args[ac], XmNmaximum, 440); ac++;
    XtSetArg(args[ac], XmNuserData, 1); ac++;
    XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
    XtSetArg(args[ac], XmNx, 162); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _sbRotStart = XmCreateScrollBar(_form18,
        "sbRotStart",
        args, 
        ac);
    XtManageChild(_sbRotStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNvalueChangedCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNtoTopCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNtoBottomCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNpageIncrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNpageDecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNincrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNdragCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_sbRotStart,
        XmNdecrementCallback,
        MainWindow::vScanScrollBarCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 482); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 59); ac++;
    XtSetArg(args[ac], XmNisHomogeneous, False); ac++;
    _rbAxis = XmCreateRadioBox(_form18,
        "rbAxis",
        args, 
        ac);
    XtManageChild(_rbAxis);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginLeft, 16); ac++;
    XtSetArg(args[ac], XmNindicatorSize, 12); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _tbPhi = XmCreateToggleButton(_rbAxis,
        "tbPhi",
        args, 
        ac);
    XtManageChild(_tbPhi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)50;
    XtAddCallback(_tbPhi,
        XmNarmCallback,
        MainWindow::vScanRadioCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginLeft, 16); ac++;
    XtSetArg(args[ac], XmNmarginHeight, 2); ac++;
    XtSetArg(args[ac], XmNindicatorSize, 12); ac++;
    XtSetArg(args[ac], XmNwidth, 70); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _tbOmega = XmCreateToggleButton(_rbAxis,
        "tbOmega",
        args, 
        ac);
    XtManageChild(_tbOmega);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)51;
    XtAddCallback(_tbOmega,
        XmNarmCallback,
        MainWindow::vScanRadioCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 2); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbScanNum = XmCreateLabel(_form18,
        "lbScanNum",
        args, 
        ac);
    XtManageChild(_lbScanNum);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 1127); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbDarkIntvl = XmCreateLabel(_form18,
        "lbDarkIntvl",
        args, 
        ac);
    XtManageChild(_lbDarkIntvl);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 1067); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbNumOsc = XmCreateLabel(_form18,
        "lbNumOsc",
        args, 
        ac);
    XtManageChild(_lbNumOsc);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 987); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbWavelength = XmCreateLabel(_form18,
        "lbWavelength",
        args, 
        ac);
    XtManageChild(_lbWavelength);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 847); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 136); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbDatum = XmCreateLabel(_form18,
        "lbDatum",
        args, 
        ac);
    XtManageChild(_lbDatum);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 787); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbSeqIncr = XmCreateLabel(_form18,
        "lbSeqIncr",
        args, 
        ac);
    XtManageChild(_lbSeqIncr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 727); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 56); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbSeqStart = XmCreateLabel(_form18,
        "lbSeqStart",
        args, 
        ac);
    XtManageChild(_lbSeqStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 482); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbAxis = XmCreateLabel(_form18,
        "lbAxis",
        args, 
        ac);
    XtManageChild(_lbAxis);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 562); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 156); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbTemplate = XmCreateLabel(_form18,
        "lbTemplate",
        args, 
        ac);
    XtManageChild(_lbTemplate);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 412); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbTime = XmCreateLabel(_form18,
        "lbTime",
        args, 
        ac);
    XtManageChild(_lbTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 342); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 66); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbRotIncr = XmCreateLabel(_form18,
        "lbRotIncr",
        args, 
        ac);
    XtManageChild(_lbRotIncr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 252); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbRotEnd = XmCreateLabel(_form18,
        "lbRotEnd",
        args, 
        ac);
    XtManageChild(_lbRotEnd);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 162); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 86); ac++;
    XtSetArg(args[ac], XmNheight, 45); ac++;
    _lbRotStart = XmCreateLabel(_form18,
        "lbRotStart",
        args, 
        ac);
    XtManageChild(_lbRotStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 82); ac++;
    XtSetArg(args[ac], XmNy, 2); ac++;
    XtSetArg(args[ac], XmNwidth, 76); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbShutter1 = XmCreateLabel(_form18,
        "lbShutter1",
        args, 
        ac);
    XtManageChild(_lbShutter1);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frScanNum = XmCreateFrame(_form18,
        "frScanNum",
        args, 
        ac);
    XtManageChild(_frScanNum);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 80); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frShutter1 = XmCreateFrame(_form18,
        "frShutter1",
        args, 
        ac);
    XtManageChild(_frShutter1);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frRotStart = XmCreateFrame(_form18,
        "frRotStart",
        args, 
        ac);
    XtManageChild(_frRotStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 250); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frRotEnd = XmCreateFrame(_form18,
        "frRotEnd",
        args, 
        ac);
    XtManageChild(_frRotEnd);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 340); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frRotIncr = XmCreateFrame(_form18,
        "frRotIncr",
        args, 
        ac);
    XtManageChild(_frRotIncr);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 410); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frTime = XmCreateFrame(_form18,
        "frTime",
        args, 
        ac);
    XtManageChild(_frTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 480); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frAxis = XmCreateFrame(_form18,
        "frAxis",
        args, 
        ac);
    XtManageChild(_frAxis);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 560); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frTemplate = XmCreateFrame(_form18,
        "frTemplate",
        args, 
        ac);
    XtManageChild(_frTemplate);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 725); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frSeqStart = XmCreateFrame(_form18,
        "frSeqStart",
        args, 
        ac);
    XtManageChild(_frSeqStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 785); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frSeqIncr = XmCreateFrame(_form18,
        "frSeqIncr",
        args, 
        ac);
    XtManageChild(_frSeqIncr);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 845); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frDatum = XmCreateFrame(_form18,
        "frDatum",
        args, 
        ac);
    XtManageChild(_frDatum);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 985); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frWavelength = XmCreateFrame(_form18,
        "frWavelength",
        args, 
        ac);
    XtManageChild(_frWavelength);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 1065); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frNumOsc = XmCreateFrame(_form18,
        "frNumOsc",
        args, 
        ac);
    XtManageChild(_frNumOsc);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 1125); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 90); ac++;
    _frDarkIntvl = XmCreateFrame(_form18,
        "frDarkIntvl",
        args, 
        ac);
    XtManageChild(_frDarkIntvl);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAUTOMATIC); ac++;
    XtSetArg(args[ac], XmNscrollBarPlacement, XmTOP_LEFT); ac++;
    XtSetArg(args[ac], XmNscrollBarDisplayPolicy, XmSTATIC); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 36); ac++;
    XtSetArg(args[ac], XmNwidth, 1213); ac++;
    XtSetArg(args[ac], XmNheight, 70); ac++;
    _swScan = XmCreateScrolledWindow(_form9,
        "swScan",
        args, 
        ac);
    XtManageChild(_swScan);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_ANY); ac++;
    XtSetArg(args[ac], XmNwidth, 1175); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _form11 = XmCreateForm(_swScan,
        "form11",
        args, 
        ac);
    XtManageChild(_form11);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNset, True); ac++;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_form11, "1", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, True); ac++;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tbScan = XmCreateToggleButton(_form11,
        "tbScan",
        args, 
        ac);
    XtManageChild(_tbScan);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tbScan,
        XmNarmCallback,
        MainWindow::vScanToggleCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 70); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfShutter = XmCreateTextField(_form11,
        "tfShutter",
        args, 
        ac);
    XtManageChild(_tfShutter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfShutter,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfShutter,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 150); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfRotStart = XmCreateTextField(_form11,
        "tfRotStart",
        args, 
        ac);
    XtManageChild(_tfRotStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotStart,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotStart,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 240); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfRotEnd = XmCreateTextField(_form11,
        "tfRotEnd",
        args, 
        ac);
    XtManageChild(_tfRotEnd);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotEnd,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotEnd,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 330); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfRotIncr = XmCreateTextField(_form11,
        "tfRotIncr",
        args, 
        ac);
    XtManageChild(_tfRotIncr);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotIncr,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfRotIncr,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 400); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfTime = XmCreateTextField(_form11,
        "tfTime",
        args, 
        ac);
    XtManageChild(_tfTime);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfTime,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfTime,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 470); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfAxis = XmCreateTextField(_form11,
        "tfAxis",
        args, 
        ac);
    XtManageChild(_tfAxis);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfAxis,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfAxis,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 550); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfTemplate = XmCreateTextField(_form11,
        "tfTemplate",
        args, 
        ac);
    XtManageChild(_tfTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfTemplate,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfTemplate,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 715); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfSeqStart = XmCreateTextField(_form11,
        "tfSeqStart",
        args, 
        ac);
    XtManageChild(_tfSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSeqStart,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 775); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfSeqIncr = XmCreateTextField(_form11,
        "tfSeqIncr",
        args, 
        ac);
    XtManageChild(_tfSeqIncr);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSeqIncr,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSeqIncr,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 835); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfDatum = XmCreateTextField(_form11,
        "tfDatum",
        args, 
        ac);
    XtManageChild(_tfDatum);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatum,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDatum,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 975); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfWavelength = XmCreateTextField(_form11,
        "tfWavelength",
        args, 
        ac);
    XtManageChild(_tfWavelength);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfWavelength,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfWavelength,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 1055); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfNumOsc = XmCreateTextField(_form11,
        "tfNumOsc",
        args, 
        ac);
    XtManageChild(_tfNumOsc);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfNumOsc,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfNumOsc,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 1115); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfDarkIntvl = XmCreateTextField(_form11,
        "tfDarkIntvl",
        args, 
        ac);
    XtManageChild(_tfDarkIntvl);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDarkIntvl,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDarkIntvl,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNwidth, 880); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _menuBar = XmCreateMenuBar(_MainWindow,
        "menuBar",
        args, 
        ac);
    XtManageChild(_menuBar);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 5); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbFile = XmCreateCascadeButton(_menuBar,
        "cbFile",
        args, 
        ac);
    XtManageChild(_cbFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 199); ac++;
    XtSetArg(args[ac], XmNheight, 160); ac++;
    _pmFile = XmCreatePulldownMenu(XtParent(_cbFile),
        "pmFile",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmFile,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Perform various tasks with image files or exit from dtcollect";
    XtAddCallback(_pmFile,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _cbFileNew = XmCreateCascadeButton(_pmFile,
        "cbFileNew",
        args, 
        ac);
    XtManageChild(_cbFileNew);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 240); ac++;
    XtSetArg(args[ac], XmNheight, 183); ac++;
    _pmFileNew = XmCreatePulldownMenu(XtParent(_cbFileNew),
        "pmFileNew",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmFileNew,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize various devices";
    XtAddCallback(_pmFileNew,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileNewCrysGon = XmCreatePushButton(_pmFileNew,
        "pbFileNewCrysGon",
        args, 
        ac);
    XtManageChild(_pbFileNewCrysGon);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewCrysGon,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize the crystal goniometer";
    XtAddCallback(_pbFileNewCrysGon,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewCrysGon,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileNewDetGon = XmCreatePushButton(_pmFileNew,
        "pbFileNewDetGon",
        args, 
        ac);
    XtManageChild(_pbFileNewDetGon);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewDetGon,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize the detector goniometer";
    XtAddCallback(_pbFileNewDetGon,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewDetGon,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileNewDet = XmCreatePushButton(_pmFileNew,
        "pbFileNewDet",
        args, 
        ac);
    XtManageChild(_pbFileNewDet);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewDet,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize the detector(s)";
    XtAddCallback(_pbFileNewDet,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewDet,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileNewShutter = XmCreatePushButton(_pmFileNew,
        "pbFileNewShutter",
        args, 
        ac);
    XtManageChild(_pbFileNewShutter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewShutter,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize the shutter";
    XtAddCallback(_pbFileNewShutter,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewShutter,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbFileNewSensor = XmCreatePushButton(_pmFileNew,
        "pbFileNewSensor",
        args, 
        ac);
    XtManageChild(_pbFileNewSensor);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewSensor,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize any sensors";
    XtAddCallback(_pbFileNewSensor,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewSensor,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _separator = XmCreateSeparator(_pmFileNew,
        "separator",
        args, 
        ac);
    XtManageChild(_separator);
    
    ac = 0;
    _pbFileNewSource = XmCreatePushButton(_pmFileNew,
        "pbFileNewSource",
        args, 
        ac);
    XtManageChild(_pbFileNewSource);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewSource,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize all available devices";
    XtAddCallback(_pbFileNewSource,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewSource,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _separator1 = XmCreateSeparator(_pmFileNew,
        "separator1",
        args, 
        ac);
    XtManageChild(_separator1);
    
    ac = 0;
    _pbFileNewAll = XmCreatePushButton(_pmFileNew,
        "pbFileNewAll",
        args, 
        ac);
    XtManageChild(_pbFileNewAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewAll,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Initialize all available devices";
    XtAddCallback(_pbFileNewAll,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileNewAll,
        XmNactivateCallback,
        MainWindow::vFileNewCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmFileNew); ac++;
    XtSetValues(_cbFileNew, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    _pbFileOpen = XmCreatePushButton(_pmFile,
        "pbFileOpen",
        args, 
        ac);
    XtManageChild(_pbFileOpen);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileOpen,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select an image header to open and read";
    XtAddCallback(_pbFileOpen,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileOpen,
        XmNactivateCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    _pbFileSaveAs = XmCreatePushButton(_pmFile,
        "pbFileSaveAs",
        args, 
        ac);
    XtManageChild(_pbFileSaveAs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileSaveAs,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Save the header to a new file";
    XtAddCallback(_pbFileSaveAs,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileSaveAs,
        XmNactivateCallback,
        MainWindow::vFileOpenSaveCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spFile1 = XmCreateSeparator(_pmFile,
        "spFile1",
        args, 
        ac);
    XtManageChild(_spFile1);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbFilePref = XmCreatePushButton(_pmFile,
        "pbFilePref",
        args, 
        ac);
    XtManageChild(_pbFilePref);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFilePref,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbFilePrint = XmCreatePushButton(_pmFile,
        "pbFilePrint",
        args, 
        ac);
    XtManageChild(_pbFilePrint);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFilePrint,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Print an image file in PostScript format to a file";
    XtAddCallback(_pbFilePrint,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _spFile2 = XmCreateSeparator(_pmFile,
        "spFile2",
        args, 
        ac);
    XtManageChild(_spFile2);
    
    ac = 0;
    _spFile3 = XmCreateSeparator(_pmFile,
        "spFile3",
        args, 
        ac);
    XtManageChild(_spFile3);
    
    ac = 0;
    _pbFileExit = XmCreatePushButton(_pmFile,
        "pbFileExit",
        args, 
        ac);
    XtManageChild(_pbFileExit);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileExit,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Exit from dtcollect";
    XtAddCallback(_pbFileExit,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbFileExit,
        XmNactivateCallback,
        MainWindow::vExitCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmFile); ac++;
    XtSetValues(_cbFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 69); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbEdit = XmCreateCascadeButton(_menuBar,
        "cbEdit",
        args, 
        ac);
    XtManageChild(_cbEdit);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 283); ac++;
    XtSetArg(args[ac], XmNheight, 79); ac++;
    _pmEdit = XmCreatePulldownMenu(XtParent(_cbEdit),
        "pmEdit",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmEdit,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit various properties of dtcollect";
    XtAddCallback(_pmEdit,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbEditHeader = XmCreatePushButton(_pmEdit,
        "pbEditHeader",
        args, 
        ac);
    XtManageChild(_pbEditHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditHeader,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit items that go in all image headers";
    XtAddCallback(_pbEditHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditHeader,
        XmNactivateCallback,
        MainWindow::vEditHeaderCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    _pbEditDetector = XmCreatePushButton(_pmEdit,
        "pbEditDetector",
        args, 
        ac);
    XtManageChild(_pbEditDetector);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditDetector,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Edit detector properties";
    XtAddCallback(_pbEditDetector,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _cbEditClear = XmCreateCascadeButton(_pmEdit,
        "cbEditClear",
        args, 
        ac);
    XtManageChild(_cbEditClear);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 168); ac++;
    XtSetArg(args[ac], XmNheight, 54); ac++;
    _pmEditClear = XmCreatePulldownMenu(XtParent(_cbEditClear),
        "pmEditClear",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmEditClear,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear output window";
    XtAddCallback(_pmEditClear,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbEditClearAll = XmCreatePushButton(_pmEditClear,
        "pbEditClearAll",
        args, 
        ac);
    XtManageChild(_pbEditClearAll);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearAll,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear entire output text";
    XtAddCallback(_pbEditClearAll,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearAll,
        XmNactivateCallback,
        MainWindow::vEditClearCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbEditClearSel = XmCreatePushButton(_pmEditClear,
        "pbEditClearSel",
        args, 
        ac);
    XtManageChild(_pbEditClearSel);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearSel,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Clear entire output text";
    XtAddCallback(_pbEditClearSel,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbEditClearSel,
        XmNactivateCallback,
        MainWindow::vEditClearCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmEditClear); ac++;
    XtSetValues(_cbEditClear, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmEdit); ac++;
    XtSetValues(_cbEdit, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 133); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbView = XmCreateCascadeButton(_menuBar,
        "cbView",
        args, 
        ac);
    XtManageChild(_cbView);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 192); ac++;
    XtSetArg(args[ac], XmNheight, 29); ac++;
    _pmView = XmCreatePulldownMenu(XtParent(_cbView),
        "pmView",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmView,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"View various properties of a scan or image display";
    XtAddCallback(_pmView,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbViewHeader = XmCreatePushButton(_pmView,
        "pbViewHeader",
        args, 
        ac);
    XtManageChild(_pbViewHeader);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbViewHeader,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"View the image header in another window";
    XtAddCallback(_pbViewHeader,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmView); ac++;
    XtSetValues(_cbView, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 197); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbCollect = XmCreateCascadeButton(_menuBar,
        "cbCollect",
        args, 
        ac);
    XtManageChild(_cbCollect);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 144); ac++;
    XtSetArg(args[ac], XmNheight, 104); ac++;
    _pmCollect = XmCreatePulldownMenu(XtParent(_cbCollect),
        "pmCollect",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmCollect,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Select various data collection methods";
    XtAddCallback(_pmCollect,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbCollectScan = XmCreatePushButton(_pmCollect,
        "pbCollectScan",
        args, 
        ac);
    XtManageChild(_pbCollectScan);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCollectScan,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Pop-up the Scan Table dialog";
    XtAddCallback(_pbCollectScan,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCollectScan,
        XmNactivateCallback,
        MainWindow::vCollectScanCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbCollect2 = XmCreatePushButton(_pmCollect,
        "pbCollect2",
        args, 
        ac);
    XtManageChild(_pbCollect2);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbCollect3 = XmCreatePushButton(_pmCollect,
        "pbCollect3",
        args, 
        ac);
    XtManageChild(_pbCollect3);
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, False); ac++;
    _pbCollect4 = XmCreatePushButton(_pmCollect,
        "pbCollect4",
        args, 
        ac);
    XtManageChild(_pbCollect4);
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmCollect); ac++;
    XtSetValues(_cbCollect, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 297); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 64); ac++;
    XtSetArg(args[ac], XmNheight, 25); ac++;
    _cbHelp = XmCreateCascadeButton(_menuBar,
        "cbHelp",
        args, 
        ac);
    XtManageChild(_cbHelp);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 252); ac++;
    XtSetArg(args[ac], XmNheight, 54); ac++;
    _pmHelp = XmCreatePulldownMenu(XtParent(_cbHelp),
        "pmHelp",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmHelp,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get help various ways";
    XtAddCallback(_pmHelp,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbHelpHTML = XmCreatePushButton(_pmHelp,
        "pbHelpHTML",
        args, 
        ac);
    XtManageChild(_pbHelpHTML);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpHTML,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Get help with a HTML viewer in another window";
    XtAddCallback(_pbHelpHTML,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"dtcollect$$";
    XtAddCallback(_pbHelpHTML,
        XmNactivateCallback,
        MainWindow::vHTMLHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    _pbHelpAbout = XmCreatePushButton(_pmHelp,
        "pbHelpAbout",
        args, 
        ac);
    XtManageChild(_pbHelpAbout);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpAbout,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"List version number";
    XtAddCallback(_pbHelpAbout,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbHelpAbout,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmHelp); ac++;
    XtSetValues(_cbHelp, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNwidth, 880); ac++;
    XtSetArg(args[ac], XmNheight, 711); ac++;
    _fmMain = XmCreateForm(_MainWindow,
        "fmMain",
        args, 
        ac);
    XtManageChild(_fmMain);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 440); ac++;
    XtSetArg(args[ac], XmNy, 406); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 55); ac++;
    _frCommand = XmCreateFrame(_fmMain,
        "frCommand",
        args, 
        ac);
    XtManageChild(_frCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 49); ac++;
    _fmCommand = XmCreateForm(_frCommand,
        "fmCommand",
        args, 
        ac);
    XtManageChild(_fmCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 15000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 300); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfCommand = XmCreateTextField(_fmCommand,
        "tfCommand",
        args, 
        ac);
    XtManageChild(_tfCommand);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCommand,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCommand,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 10); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCommand = XmCreateLabel(_fmCommand,
        "lbCommand",
        args, 
        ac);
    XtManageChild(_lbCommand);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAPPLICATION_DEFINED); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 461); ac++;
    XtSetArg(args[ac], XmNwidth, 880); ac++;
    XtSetArg(args[ac], XmNheight, 250); ac++;
    _swOutput = XmCreateScrolledWindow(_fmMain,
        "swOutput",
        args, 
        ac);
    XtManageChild(_swOutput);
    
    ac = 0;
    XtSetArg(args[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
    XtSetArg(args[ac], XmNbackground, 
        BX_CONVERT(_swOutput, "white", 
        XmRPixel, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNscrollLeftSide, True); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNeditable, False); ac++;
    _twOutput = XmCreateText(_swOutput,
        "twOutput",
        args, 
        ac);
    XtManageChild(_twOutput);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 352); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 109); ac++;
    _frSensor = XmCreateFrame(_fmMain,
        "frSensor",
        args, 
        ac);
    XtManageChild(_frSensor);
    
    ac = 0;
    XtSetArg(args[ac], XmNscrollingPolicy, XmAUTOMATIC); ac++;
    XtSetArg(args[ac], XmNscrollBarPlacement, XmBOTTOM_LEFT); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 103); ac++;
    _swSensor = XmCreateScrolledWindow(_frSensor,
        "swSensor",
        args, 
        ac);
    XtManageChild(_swSensor);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNwidth, 400); ac++;
    XtSetArg(args[ac], XmNheight, 100); ac++;
    _fmSensor = XmCreateForm(_swSensor,
        "fmSensor",
        args, 
        ac);
    XtManageChild(_fmSensor);
    
    ac = 0;
    XtSetArg(args[ac], XmNorientation, XmVERTICAL); ac++;
    XtSetArg(args[ac], XmNx, 195); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 10); ac++;
    XtSetArg(args[ac], XmNheight, 100); ac++;
    _spSensor = XmCreateSeparator(_fmSensor,
        "spSensor",
        args, 
        ac);
    XtManageChild(_spSensor);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens6Curr = XmCreateLabel(_fmSensor,
        "lbSens6Curr",
        args, 
        ac);
    XtManageChild(_lbSens6Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens5Curr = XmCreateLabel(_fmSensor,
        "lbSens5Curr",
        args, 
        ac);
    XtManageChild(_lbSens5Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens4Curr = XmCreateLabel(_fmSensor,
        "lbSens4Curr",
        args, 
        ac);
    XtManageChild(_lbSens4Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 205); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens6 = XmCreateLabel(_fmSensor,
        "lbSens6",
        args, 
        ac);
    XtManageChild(_lbSens6);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 205); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens5 = XmCreateLabel(_fmSensor,
        "lbSens5",
        args, 
        ac);
    XtManageChild(_lbSens5);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 205); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens4 = XmCreateLabel(_fmSensor,
        "lbSens4",
        args, 
        ac);
    XtManageChild(_lbSens4);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 95); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens3Curr = XmCreateLabel(_fmSensor,
        "lbSens3Curr",
        args, 
        ac);
    XtManageChild(_lbSens3Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 95); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens2Curr = XmCreateLabel(_fmSensor,
        "lbSens2Curr",
        args, 
        ac);
    XtManageChild(_lbSens2Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNmarginBottom, 2); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 95); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 100); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens1Curr = XmCreateLabel(_fmSensor,
        "lbSens1Curr",
        args, 
        ac);
    XtManageChild(_lbSens1Curr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 60); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens3 = XmCreateLabel(_fmSensor,
        "lbSens3",
        args, 
        ac);
    XtManageChild(_lbSens3);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 30); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens2 = XmCreateLabel(_fmSensor,
        "lbSens2",
        args, 
        ac);
    XtManageChild(_lbSens2);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 90); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSens1 = XmCreateLabel(_fmSensor,
        "lbSens1",
        args, 
        ac);
    XtManageChild(_lbSens1);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 440); ac++;
    XtSetArg(args[ac], XmNy, 351); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 55); ac++;
    _frSource = XmCreateFrame(_fmMain,
        "frSource",
        args, 
        ac);
    XtManageChild(_frSource);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 49); ac++;
    _fmSource = XmCreateForm(_frSource,
        "fmSource",
        args, 
        ac);
    XtManageChild(_fmSource);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 80); ac++;
    XtSetArg(args[ac], XmNy, 8); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbSourceChoose = XmCreatePushButton(_fmSource,
        "pbSourceChoose",
        args, 
        ac);
    XtManageChild(_pbSourceChoose);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbSourceChoose,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Pop-up wavelength chooser";
    XtAddCallback(_pbSourceChoose,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frSourceCurr = XmCreateFrame(_fmSource,
        "frSourceCurr",
        args, 
        ac);
    XtManageChild(_frSourceCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbSourceCurr = XmCreateLabel(_frSourceCurr,
        "lbSourceCurr",
        args, 
        ac);
    XtManageChild(_lbSourceCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 248); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 40); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _pbSourceMove = XmCreatePushButton(_fmSource,
        "pbSourceMove",
        args, 
        ac);
    XtManageChild(_pbSourceMove);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbSourceMove,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Move the source to the requested wavelength or energy";
    XtAddCallback(_pbSourceMove,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbSourceMove,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 14000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfSource = XmCreateTextField(_fmSource,
        "tfSource",
        args, 
        ac);
    XtManageChild(_tfSource);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSource,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSource,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfSource,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbSource = XmCreateLabel(_fmSource,
        "lbSource",
        args, 
        ac);
    XtManageChild(_lbSource);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 352); ac++;
    _frExpose = XmCreateFrame(_fmMain,
        "frExpose",
        args, 
        ac);
    XtManageChild(_frExpose);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 346); ac++;
    _fmExpose = XmCreateForm(_frExpose,
        "fmExpose",
        args, 
        ac);
    XtManageChild(_fmExpose);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 300); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbExpCurr = XmCreateLabel(_fmExpose,
        "lbExpCurr",
        args, 
        ac);
    XtManageChild(_lbExpCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 50); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbExpSet = XmCreateLabel(_fmExpose,
        "lbExpSet",
        args, 
        ac);
    XtManageChild(_lbExpSet);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 253); ac++;
    XtSetArg(args[ac], XmNwidth, 35); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbScanTemplate = XmCreatePushButton(_fmExpose,
        "pbScanTemplate",
        args, 
        ac);
    XtManageChild(_pbScanTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScanTemplate,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Pop-up template chooser";
    XtAddCallback(_pbScanTemplate,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 255); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanTemplate = XmCreateLabel(_fmExpose,
        "lbScanTemplate",
        args, 
        ac);
    XtManageChild(_lbScanTemplate);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 210); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanNumImgs = XmCreateLabel(_fmExpose,
        "lbScanNumImgs",
        args, 
        ac);
    XtManageChild(_lbScanNumImgs);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 170); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanSeqStart = XmCreateLabel(_fmExpose,
        "lbScanSeqStart",
        args, 
        ac);
    XtManageChild(_lbScanSeqStart);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 305); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbScanLastFile = XmCreateLabel(_fmExpose,
        "lbScanLastFile",
        args, 
        ac);
    XtManageChild(_lbScanLastFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 11000); ac++;
    XtSetArg(args[ac], XmNx, 160); ac++;
    XtSetArg(args[ac], XmNy, 250); ac++;
    XtSetArg(args[ac], XmNwidth, 260); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfScanTemplate = XmCreateTextField(_fmExpose,
        "tfScanTemplate",
        args, 
        ac);
    XtManageChild(_tfScanTemplate);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanTemplate,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanTemplate,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanTemplate,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 11000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 205); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfScanNumImgs = XmCreateTextField(_fmExpose,
        "tfScanNumImgs",
        args, 
        ac);
    XtManageChild(_tfScanNumImgs);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanNumImgs,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanNumImgs,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanNumImgs,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 11000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 165); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfScanSeqStart = XmCreateTextField(_fmExpose,
        "tfScanSeqStart",
        args, 
        ac);
    XtManageChild(_tfScanSeqStart);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanSeqStart,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfScanSeqStart,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 245); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 40); ac++;
    XtSetArg(args[ac], XmNheight, 80); ac++;
    _pbScan = XmCreatePushButton(_fmExpose,
        "pbScan",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScan,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make an exposure at current position of given rotation angle width and time";
    XtAddCallback(_pbScan,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbScan,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 205); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frScanNumImgsCurr = XmCreateFrame(_fmExpose,
        "frScanNumImgsCurr",
        args, 
        ac);
    XtManageChild(_frScanNumImgsCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbScanNumImgsCurr = XmCreateLabel(_frScanNumImgsCurr,
        "lbScanNumImgsCurr",
        args, 
        ac);
    XtManageChild(_lbScanNumImgsCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 165); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frScanSeqCurr = XmCreateFrame(_fmExpose,
        "frScanSeqCurr",
        args, 
        ac);
    XtManageChild(_frScanSeqCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbScanSeqCurr = XmCreateLabel(_frScanSeqCurr,
        "lbScanSeqCurr",
        args, 
        ac);
    XtManageChild(_lbScanSeqCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 300); ac++;
    XtSetArg(args[ac], XmNwidth, 300); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frScanLastFile = XmCreateFrame(_fmExpose,
        "frScanLastFile",
        args, 
        ac);
    XtManageChild(_frScanLastFile);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 294); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbScanLastFileCurr = XmCreateLabel(_frScanLastFile,
        "lbScanLastFileCurr",
        args, 
        ac);
    XtManageChild(_lbScanLastFileCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNlabelString, 
        BX_CONVERT(_fmExpose, "Expose", 
        XmRXmString, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 107); ac++;
    XtSetArg(args[ac], XmNheight, 31); ac++;
    _lbExpose = XmCreateLabel(_fmExpose,
        "lbExpose",
        args, 
        ac);
    XtManageChild(_lbExpose);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frExpWidthCurr = XmCreateFrame(_fmExpose,
        "frExpWidthCurr",
        args, 
        ac);
    XtManageChild(_frExpWidthCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbExpWidthCurr = XmCreateLabel(_frExpWidthCurr,
        "lbExpWidthCurr",
        args, 
        ac);
    XtManageChild(_lbExpWidthCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frExpTimeCurr = XmCreateFrame(_fmExpose,
        "frExpTimeCurr",
        args, 
        ac);
    XtManageChild(_frExpTimeCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbExpTimeCurr = XmCreateLabel(_frExpTimeCurr,
        "lbExpTimeCurr",
        args, 
        ac);
    XtManageChild(_lbExpTimeCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 248); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 40); ac++;
    XtSetArg(args[ac], XmNheight, 165); ac++;
    _pbExpose = XmCreatePushButton(_fmExpose,
        "pbExpose",
        args, 
        ac);
    XtManageChild(_pbExpose);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpose,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make an exposure at current position of given rotation angle width and time";
    XtAddCallback(_pbExpose,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpose,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 11001); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfExpWidth = XmCreateTextField(_fmExpose,
        "tfExpWidth",
        args, 
        ac);
    XtManageChild(_tfExpWidth);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpWidth,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpWidth,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpWidth,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 11000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfExpTime = XmCreateTextField(_fmExpose,
        "tfExpTime",
        args, 
        ac);
    XtManageChild(_tfExpTime);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpTime,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpTime,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfExpTime,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 95); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 339); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _omExpose = XmCreateOptionMenu(_fmExpose,
        "omExpose",
        args, 
        ac);
    XtManageChild(_omExpose);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_omExpose,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Enter the type of exposure to create";
    XtAddCallback(_omExpose,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 360); ac++;
    XtSetArg(args[ac], XmNheight, 104); ac++;
    _pmExpose = XmCreatePulldownMenu(XtParent(_omExpose),
        "pmExpose",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pmExpose,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"ExposeType$Select the type of exposure";
    XtAddCallback(_pmExpose,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    _pbExpDark = XmCreatePushButton(_pmExpose,
        "pbExpDark",
        args, 
        ac);
    XtManageChild(_pbExpDark);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpDark,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make a dark image with the shutter closed";
    XtAddCallback(_pbExpDark,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpDark,
        XmNactivateCallback,
        MainWindow::vExposeTypeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    _pbExpStill = XmCreatePushButton(_pmExpose,
        "pbExpStill",
        args, 
        ac);
    XtManageChild(_pbExpStill);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpStill,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make a still image with the shutter open";
    XtAddCallback(_pbExpStill,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)1;
    XtAddCallback(_pbExpStill,
        XmNactivateCallback,
        MainWindow::vExposeTypeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    _pbExpPhi = XmCreatePushButton(_pmExpose,
        "pbExpPhi",
        args, 
        ac);
    XtManageChild(_pbExpPhi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpPhi,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make a rotation image with the shutter open while rotating around phi";
    XtAddCallback(_pbExpPhi,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)2;
    XtAddCallback(_pbExpPhi,
        XmNactivateCallback,
        MainWindow::vExposeTypeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsensitive, True); ac++;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    _pbExpOmega = XmCreatePushButton(_pmExpose,
        "pbExpOmega",
        args, 
        ac);
    XtManageChild(_pbExpOmega);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbExpOmega,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Make a rotation image with the shutter open while rotating around omega";
    XtAddCallback(_pbExpOmega,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)3;
    XtAddCallback(_pbExpOmega,
        XmNactivateCallback,
        MainWindow::vExposeTypeCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNsubMenuId, _pmExpose); ac++;
    XtSetValues(_omExpose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbExpWidth = XmCreateLabel(_fmExpose,
        "lbExpWidth",
        args, 
        ac);
    XtManageChild(_lbExpWidth);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbExpTime = XmCreateLabel(_fmExpose,
        "lbExpTime",
        args, 
        ac);
    XtManageChild(_lbExpTime);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 440); ac++;
    XtSetArg(args[ac], XmNy, 225); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 126); ac++;
    _frDetector = XmCreateFrame(_fmMain,
        "frDetector",
        args, 
        ac);
    XtManageChild(_frDetector);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 120); ac++;
    _fmDetector = XmCreateForm(_frDetector,
        "fmDetector",
        args, 
        ac);
    XtManageChild(_fmDetector);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 75); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frDetTheta = XmCreateFrame(_fmDetector,
        "frDetTheta",
        args, 
        ac);
    XtManageChild(_frDetTheta);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbDetThetaCurr = XmCreateLabel(_frDetTheta,
        "lbDetThetaCurr",
        args, 
        ac);
    XtManageChild(_lbDetThetaCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 35); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frDetDist = XmCreateFrame(_fmDetector,
        "frDetDist",
        args, 
        ac);
    XtManageChild(_frDetDist);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbDetDistCurr = XmCreateLabel(_frDetDist,
        "lbDetDistCurr",
        args, 
        ac);
    XtManageChild(_lbDetDistCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 248); ac++;
    XtSetArg(args[ac], XmNy, 35); ac++;
    XtSetArg(args[ac], XmNwidth, 40); ac++;
    XtSetArg(args[ac], XmNheight, 80); ac++;
    _pbDetMove = XmCreatePushButton(_fmDetector,
        "pbDetMove",
        args, 
        ac);
    XtManageChild(_pbDetMove);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbDetMove,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Move the detector to the requested position";
    XtAddCallback(_pbDetMove,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbDetMove,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 13000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 35); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfDetDist = XmCreateTextField(_fmDetector,
        "tfDetDist",
        args, 
        ac);
    XtManageChild(_tfDetDist);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetDist,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetDist,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetDist,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 13001); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 75); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfDetTheta = XmCreateTextField(_fmDetector,
        "tfDetTheta",
        args, 
        ac);
    XtManageChild(_tfDetTheta);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetTheta,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetTheta,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfDetTheta,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDetTheta = XmCreateLabel(_fmDetector,
        "lbDetTheta",
        args, 
        ac);
    XtManageChild(_lbDetTheta);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDetDist = XmCreateLabel(_fmDetector,
        "lbDetDist",
        args, 
        ac);
    XtManageChild(_lbDetDist);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 110); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDetMoveTo = XmCreateLabel(_fmDetector,
        "lbDetMoveTo",
        args, 
        ac);
    XtManageChild(_lbDetMoveTo);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 300); ac++;
    XtSetArg(args[ac], XmNy, 5); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDetCurr = XmCreateLabel(_fmDetector,
        "lbDetCurr",
        args, 
        ac);
    XtManageChild(_lbDetCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbDetector = XmCreateLabel(_fmDetector,
        "lbDetector",
        args, 
        ac);
    XtManageChild(_lbDetector);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 440); ac++;
    XtSetArg(args[ac], XmNy, 55); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 170); ac++;
    _frCrystal = XmCreateFrame(_fmMain,
        "frCrystal",
        args, 
        ac);
    XtManageChild(_frCrystal);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 164); ac++;
    _fmCrystal = XmCreateForm(_frCrystal,
        "fmCrystal",
        args, 
        ac);
    XtManageChild(_fmCrystal);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frCrysPhi = XmCreateFrame(_fmCrystal,
        "frCrysPhi",
        args, 
        ac);
    XtManageChild(_frCrysPhi);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbCrysPhiCurr = XmCreateLabel(_frCrysPhi,
        "lbCrysPhiCurr",
        args, 
        ac);
    XtManageChild(_lbCrysPhiCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frCrysChi = XmCreateFrame(_fmCrystal,
        "frCrysChi",
        args, 
        ac);
    XtManageChild(_frCrysChi);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbCrysChiCurr = XmCreateLabel(_frCrysChi,
        "lbCrysChiCurr",
        args, 
        ac);
    XtManageChild(_lbCrysChiCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 295); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 126); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _frCrysOmega = XmCreateFrame(_fmCrystal,
        "frCrysOmega",
        args, 
        ac);
    XtManageChild(_frCrysOmega);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 34); ac++;
    _lbCrysOmegaCurr = XmCreateLabel(_frCrysOmega,
        "lbCrysOmegaCurr",
        args, 
        ac);
    XtManageChild(_lbCrysOmegaCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 250); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 40); ac++;
    XtSetArg(args[ac], XmNheight, 120); ac++;
    _pbCrysMove = XmCreatePushButton(_fmCrystal,
        "pbCrysMove",
        args, 
        ac);
    XtManageChild(_pbCrysMove);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCrysMove,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Move the crystal goniometer to the requested position";
    XtAddCallback(_pbCrysMove,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbCrysMove,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 12002); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 120); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfCrysPhi = XmCreateTextField(_fmCrystal,
        "tfCrysPhi",
        args, 
        ac);
    XtManageChild(_tfCrysPhi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysPhi,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysPhi,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysPhi,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 12001); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 80); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfCrysChi = XmCreateTextField(_fmCrystal,
        "tfCrysChi",
        args, 
        ac);
    XtManageChild(_tfCrysChi);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysChi,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysChi,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysChi,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNuserData, 12000); ac++;
    XtSetArg(args[ac], XmNx, 120); ac++;
    XtSetArg(args[ac], XmNy, 40); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 40); ac++;
    _tfCrysOmega = XmCreateTextField(_fmCrystal,
        "tfCrysOmega",
        args, 
        ac);
    XtManageChild(_tfCrysOmega);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysOmega,
        XmNlosingFocusCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysOmega,
        XmNlosingFocusCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_tfCrysOmega,
        XmNactivateCallback,
        MainWindow::vTextFieldCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 125); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrysPhi = XmCreateLabel(_fmCrystal,
        "lbCrysPhi",
        args, 
        ac);
    XtManageChild(_lbCrysPhi);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 85); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrysChi = XmCreateLabel(_fmCrystal,
        "lbCrysChi",
        args, 
        ac);
    XtManageChild(_lbCrysChi);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_END); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 45); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrysOmega = XmCreateLabel(_fmCrystal,
        "lbCrysOmega",
        args, 
        ac);
    XtManageChild(_lbCrysOmega);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 300); ac++;
    XtSetArg(args[ac], XmNy, 10); ac++;
    XtSetArg(args[ac], XmNwidth, 120); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrysCurr = XmCreateLabel(_fmCrystal,
        "lbCrysCurr",
        args, 
        ac);
    XtManageChild(_lbCrysCurr);
    
    ac = 0;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 110); ac++;
    XtSetArg(args[ac], XmNy, 10); ac++;
    XtSetArg(args[ac], XmNwidth, 130); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrysMoveTo = XmCreateLabel(_fmCrystal,
        "lbCrysMoveTo",
        args, 
        ac);
    XtManageChild(_lbCrysMoveTo);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 110); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbCrystal = XmCreateLabel(_fmCrystal,
        "lbCrystal",
        args, 
        ac);
    XtManageChild(_lbCrystal);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 440); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 440); ac++;
    XtSetArg(args[ac], XmNheight, 55); ac++;
    _frShutter = XmCreateFrame(_fmMain,
        "frShutter",
        args, 
        ac);
    XtManageChild(_frShutter);
    
    ac = 0;
    XtSetArg(args[ac], XmNresizePolicy, XmRESIZE_GROW); ac++;
    XtSetArg(args[ac], XmNx, 3); ac++;
    XtSetArg(args[ac], XmNy, 3); ac++;
    XtSetArg(args[ac], XmNwidth, 434); ac++;
    XtSetArg(args[ac], XmNheight, 49); ac++;
    _fmShutter = XmCreateForm(_frShutter,
        "fmShutter",
        args, 
        ac);
    XtManageChild(_fmShutter);
    
    ac = 0;
    XtSetArg(args[ac], XmNbackground, 
        BX_CONVERT(_fmShutter, "green", 
        XmRPixel, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNuserData, 0); ac++;
    XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
    XtSetArg(args[ac], XmNresizable, False); ac++;
    XtSetArg(args[ac], XmNx, 115); ac++;
    XtSetArg(args[ac], XmNy, 7); ac++;
    XtSetArg(args[ac], XmNwidth, 310); ac++;
    XtSetArg(args[ac], XmNheight, 35); ac++;
    _pbShutter = XmCreatePushButton(_fmShutter,
        "pbShutter",
        args, 
        ac);
    XtManageChild(_pbShutter);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbShutter,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Open or close the shutter";
    XtAddCallback(_pbShutter,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbShutter,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNtraversalOn, False); ac++;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 139); ac++;
    XtSetArg(args[ac], XmNheight, 30); ac++;
    _lbShutter = XmCreateLabel(_fmShutter,
        "lbShutter",
        args, 
        ac);
    XtManageChild(_lbShutter);
    
    ac = 0;
    XtSetArg(args[ac], XmNx, 0); ac++;
    XtSetArg(args[ac], XmNy, 0); ac++;
    XtSetArg(args[ac], XmNwidth, 296); ac++;
    XtSetArg(args[ac], XmNheight, 50); ac++;
    _ppShutter = XmCreatePopupMenu(_MainWindow,
        "ppShutter",
        args, 
        ac);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_ppShutter,
        XmNunmapCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"Double-check: Really open the shutter?";
    XtAddCallback(_ppShutter,
        XmNmapCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    XtAddEventHandler(XtParent(XtParent(_ppShutter)), 
        ButtonPressMask, False, BX_MENU_POST, (XtPointer)_ppShutter);
    
    ac = 0;
    _lbShutterYes = XmCreateLabel(_ppShutter,
        "lbShutterYes",
        args, 
        ac);
    XtManageChild(_lbShutterYes);
    
    ac = 0;
    XtSetArg(args[ac], XmNalignment, XmALIGNMENT_BEGINNING); ac++;
    XtSetArg(args[ac], XmNbackground, 
        BX_CONVERT(_ppShutter, "red", 
        XmRPixel, 0, &argok)); if (argok) ac++;
    XtSetArg(args[ac], XmNmnemonic, 'O'); ac++;
    XtSetArg(args[ac], XmNarmColor, 
        BX_CONVERT(_ppShutter, "red", 
        XmRPixel, 0, &argok)); if (argok) ac++;
    _pbShutterYes = XmCreatePushButton(_ppShutter,
        "pbShutterYes",
        args, 
        ac);
    XtManageChild(_pbShutterYes);
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbShutterYes,
        XmNdisarmCallback,
        MainWindow::vUnPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)"WARNING!  Shutter will be opened!";
    XtAddCallback(_pbShutterYes,
        XmNarmCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    _clientDataStructs[cdc].object = this;
    _clientDataStructs[cdc].client_data = (XtPointer)0;
    XtAddCallback(_pbShutterYes,
        XmNactivateCallback,
        MainWindow::vMainCBCallback,
        (XtPointer)&_clientDataStructs[cdc]);
    cdc++;
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 150); ac++;
    XtSetArg(args[ac], XmNtopOffset, 160); ac++;
    XtSetValues(_tfDatumTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 150); ac++;
    XtSetArg(args[ac], XmNtopOffset, 120); ac++;
    XtSetValues(_tfDatumDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 150); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetValues(_tfDatumPhi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 150); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_tfDatumChi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 150); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_tfDatumOmega, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 160); ac++;
    XtSetValues(_lbDatumTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 120); ac++;
    XtSetValues(_lbDatumDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 80); ac++;
    XtSetValues(_lbDatumPhi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_lbDatumChi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frImageProgress); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frImageProgress); ac++;
    XtSetValues(_frScanProgress, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 75); ac++;
    XtSetValues(_lbScanPercent, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmNONE); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanTimeRem); ac++;
    XtSetValues(_scScanTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanTimeElapsed); ac++;
    XtSetValues(_frScanTimeRem, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_frScanTimeElapsed, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetValues(_lbScanTimeElapsed, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_lbScanTimeRem, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _spScan); ac++;
    XtSetValues(_frImageProgress, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 75); ac++;
    XtSetValues(_lbImagePercent, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmNONE); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frImageTimeRem); ac++;
    XtSetValues(_scImageTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frImageTimeElapsed); ac++;
    XtSetValues(_frImageTimeRem, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 225); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_frImageTimeElapsed, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetValues(_lbImageTimeElapsed, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_lbImageTimeRem, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frScanProgress); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 1); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frImageProgress); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frImageProgress); ac++;
    XtSetValues(_swScan1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_mnScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 700); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_abScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 280); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbScanSelected, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 9); ac++;
    XtSetArg(args[ac], XmNtopWidget, _form18); ac++;
    XtSetValues(_spScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 18); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _swScan); ac++;
    XtSetValues(_form18, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frScanNum); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frScanNum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanNum); ac++;
    XtSetValues(_lbScanNumCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frShutter1); ac++;
    XtSetValues(_lbShutter1Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotStart); ac++;
    XtSetValues(_lbRotStartCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotEnd); ac++;
    XtSetValues(_lbRotEndCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotIncr); ac++;
    XtSetValues(_lbRotIncrCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTime); ac++;
    XtSetValues(_lbTimeCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frAxis); ac++;
    XtSetValues(_lbAxisCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTemplate); ac++;
    XtSetValues(_lbTemplateCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqStart); ac++;
    XtSetValues(_lbSeqStartCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqIncr); ac++;
    XtSetValues(_lbSeqIncrCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDatum); ac++;
    XtSetValues(_lbDatumCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frWavelength); ac++;
    XtSetValues(_lbWavelengthCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frNumOsc); ac++;
    XtSetValues(_lbNumOscCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 95); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDarkIntvl); ac++;
    XtSetValues(_lbDarkIntvlCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frWavelength); ac++;
    XtSetValues(_pbWavelength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDatum); ac++;
    XtSetValues(_pbDatum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frShutter1); ac++;
    XtSetValues(_rbShutter, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTemplate); ac++;
    XtSetValues(_pbTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDarkIntvl); ac++;
    XtSetValues(_sbDarkIntvl, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frNumOsc); ac++;
    XtSetValues(_sbNumOsc, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqIncr); ac++;
    XtSetValues(_sbSeqIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqStart); ac++;
    XtSetValues(_sbSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTime); ac++;
    XtSetValues(_sbTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotIncr); ac++;
    XtSetValues(_sbRotIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotEnd); ac++;
    XtSetValues(_sbRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotStart); ac++;
    XtSetValues(_sbRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frAxis); ac++;
    XtSetValues(_rbAxis, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frScanNum); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frScanNum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanNum); ac++;
    XtSetValues(_lbScanNum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDarkIntvl); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDarkIntvl); ac++;
    XtSetValues(_lbDarkIntvl, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frNumOsc); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frNumOsc); ac++;
    XtSetValues(_lbNumOsc, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frWavelength); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frWavelength); ac++;
    XtSetValues(_lbWavelength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frDatum); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDatum); ac++;
    XtSetValues(_lbDatum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqIncr); ac++;
    XtSetValues(_lbSeqIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frSeqStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSeqStart); ac++;
    XtSetValues(_lbSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frAxis); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frAxis); ac++;
    XtSetValues(_lbAxis, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTemplate); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTemplate); ac++;
    XtSetValues(_lbTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frTime); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frTime); ac++;
    XtSetValues(_lbTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotIncr); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotIncr); ac++;
    XtSetValues(_lbRotIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotEnd); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotEnd); ac++;
    XtSetValues(_lbRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frRotStart); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frRotStart); ac++;
    XtSetValues(_lbRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 2); ac++;
    XtSetArg(args[ac], XmNrightOffset, 2); ac++;
    XtSetArg(args[ac], XmNtopOffset, 2); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNrightWidget, _frShutter1); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frShutter1); ac++;
    XtSetValues(_lbShutter1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetValues(_frScanNum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frScanNum); ac++;
    XtSetValues(_frShutter1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frShutter1); ac++;
    XtSetValues(_frRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotStart); ac++;
    XtSetValues(_frRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotEnd); ac++;
    XtSetValues(_frRotIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frRotIncr); ac++;
    XtSetValues(_frTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTime); ac++;
    XtSetValues(_frAxis, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frAxis); ac++;
    XtSetValues(_frTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frTemplate); ac++;
    XtSetValues(_frSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqStart); ac++;
    XtSetValues(_frSeqIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frSeqIncr); ac++;
    XtSetValues(_frDatum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frDatum); ac++;
    XtSetValues(_frWavelength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frWavelength); ac++;
    XtSetValues(_frNumOsc, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frNumOsc); ac++;
    XtSetValues(_frDarkIntvl, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 9); ac++;
    XtSetArg(args[ac], XmNtopOffset, 36); ac++;
    XtSetValues(_swScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_tbScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tbScan); ac++;
    XtSetValues(_tfShutter, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfShutter); ac++;
    XtSetValues(_tfRotStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRotStart); ac++;
    XtSetValues(_tfRotEnd, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRotEnd); ac++;
    XtSetValues(_tfRotIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfRotIncr); ac++;
    XtSetValues(_tfTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfTime); ac++;
    XtSetValues(_tfAxis, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfAxis); ac++;
    XtSetValues(_tfTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfTemplate); ac++;
    XtSetValues(_tfSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfSeqStart); ac++;
    XtSetValues(_tfSeqIncr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfSeqIncr); ac++;
    XtSetValues(_tfDatum, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfDatum); ac++;
    XtSetValues(_tfWavelength, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfWavelength); ac++;
    XtSetValues(_tfNumOsc, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _tfNumOsc); ac++;
    XtSetValues(_tfDarkIntvl, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frSource); ac++;
    XtSetValues(_frCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNrightOffset, 14); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_tfCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCommand); ac++;
    XtSetValues(_lbCommand, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frCommand); ac++;
    XtSetValues(_swOutput, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frExpose); ac++;
    XtSetValues(_frSensor, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNbottomWidget, _frSensor); ac++;
    XtSetArg(args[ac], XmNleftOffset, 195); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_spSensor, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 60); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens6); ac++;
    XtSetValues(_lbSens6Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens5); ac++;
    XtSetValues(_lbSens5Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens4); ac++;
    XtSetValues(_lbSens4Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 60); ac++;
    XtSetArg(args[ac], XmNleftWidget, _spSensor); ac++;
    XtSetValues(_lbSens6, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _spSensor); ac++;
    XtSetValues(_lbSens5, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _spSensor); ac++;
    XtSetValues(_lbSens4, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 60); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens3); ac++;
    XtSetValues(_lbSens3Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens2); ac++;
    XtSetValues(_lbSens2Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 5); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _lbSens1); ac++;
    XtSetValues(_lbSens1Curr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 60); ac++;
    XtSetValues(_lbSens3, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 30); ac++;
    XtSetValues(_lbSens2, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbSens1, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDetector); ac++;
    XtSetValues(_frSource, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 80); ac++;
    XtSetArg(args[ac], XmNtopOffset, 3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfSource); ac++;
    XtSetValues(_pbSourceChoose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_frSourceCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 248); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_pbSourceMove, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_tfSource, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbSource, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_frExpose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 300); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetValues(_lbExpCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 50); ac++;
    XtSetValues(_lbExpSet, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 3); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanTemplate); ac++;
    XtSetValues(_pbScanTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanTemplate); ac++;
    XtSetValues(_lbScanTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanNumImgs); ac++;
    XtSetValues(_lbScanNumImgs, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanSeqStart); ac++;
    XtSetValues(_lbScanSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanLastFile); ac++;
    XtSetValues(_lbScanLastFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 160); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _pbExpose); ac++;
    XtSetValues(_tfScanTemplate, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanSeqStart); ac++;
    XtSetValues(_tfScanNumImgs, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfExpWidth); ac++;
    XtSetValues(_tfScanSeqStart, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 245); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanSeqStart); ac++;
    XtSetValues(_pbScan, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frScanSeqCurr); ac++;
    XtSetValues(_frScanNumImgsCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanSeqStart); ac++;
    XtSetValues(_frScanSeqCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfScanTemplate); ac++;
    XtSetValues(_frScanLastFile, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbExpose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frExpTimeCurr); ac++;
    XtSetValues(_frExpWidthCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _pbExpose); ac++;
    XtSetValues(_frExpTimeCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 248); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfExpTime); ac++;
    XtSetValues(_pbExpose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfExpTime); ac++;
    XtSetValues(_tfExpWidth, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetArg(args[ac], XmNtopWidget, _omExpose); ac++;
    XtSetValues(_tfExpTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_omExpose, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfExpWidth); ac++;
    XtSetValues(_lbExpWidth, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfExpTime); ac++;
    XtSetValues(_lbExpTime, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frCrystal); ac++;
    XtSetValues(_frDetector, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frDetDist); ac++;
    XtSetValues(_frDetTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfDetDist); ac++;
    XtSetValues(_frDetDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 248); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfDetDist); ac++;
    XtSetValues(_pbDetMove, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbDetMoveTo); ac++;
    XtSetValues(_tfDetDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfDetDist); ac++;
    XtSetValues(_tfDetTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfDetTheta); ac++;
    XtSetValues(_lbDetTheta, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfDetDist); ac++;
    XtSetValues(_lbDetDist, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 110); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetValues(_lbDetMoveTo, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 300); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbDetMoveTo); ac++;
    XtSetValues(_lbDetCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbDetector, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNrightOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frShutter); ac++;
    XtSetValues(_frCrystal, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frCrysChi); ac++;
    XtSetValues(_frCrysPhi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _frCrysOmega); ac++;
    XtSetValues(_frCrysChi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 295); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysOmega); ac++;
    XtSetValues(_frCrysOmega, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 250); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysOmega); ac++;
    XtSetValues(_pbCrysMove, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysChi); ac++;
    XtSetValues(_tfCrysPhi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysOmega); ac++;
    XtSetValues(_tfCrysChi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 120); ac++;
    XtSetArg(args[ac], XmNtopOffset, 40); ac++;
    XtSetValues(_tfCrysOmega, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysPhi); ac++;
    XtSetValues(_lbCrysPhi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysChi); ac++;
    XtSetValues(_lbCrysChi, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 5); ac++;
    XtSetArg(args[ac], XmNtopWidget, _tfCrysOmega); ac++;
    XtSetValues(_lbCrysOmega, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNbottomOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftOffset, 300); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopWidget, _lbCrysMoveTo); ac++;
    XtSetValues(_lbCrysCurr, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 110); ac++;
    XtSetArg(args[ac], XmNtopOffset, 10); ac++;
    XtSetValues(_lbCrysMoveTo, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetValues(_lbCrystal, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
    XtSetArg(args[ac], XmNleftOffset, 0); ac++;
    XtSetArg(args[ac], XmNtopOffset, 0); ac++;
    XtSetArg(args[ac], XmNleftWidget, _frExpose); ac++;
    XtSetValues(_frShutter, args, ac);
    
    ac = 0;
    XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
    XtSetArg(args[ac], XmNleftOffset, 115); ac++;
    XtSetArg(args[ac], XmNrightOffset, 9); ac++;
    XtSetArg(args[ac], XmNtopOffset, 7); ac++;
    XtSetValues(_pbShutter, args, ac);
    
    
    // Begin user code block <endcreate>

    // Some stuff to look things up in the resource database
    
    String pcName;
    String pcClass, pcProgname;

    XtGetApplicationNameAndClass(XtDisplay(parent), &pcProgname, &pcClass);

    // Get any changes to the default formats

    pcName = XGetDefault (XtDisplay(parent), pcProgname, "format1");
    if (NULL != pcName)
      m_sFormat1 = pcName;
    pcName = XGetDefault (XtDisplay(parent), pcProgname, "format2");
    if (NULL != pcName)
      m_sFormat2 = pcName;

    // Remove the eventhandler added by Builder Xcessory for the shutter
    // popup menu

    XtRemoveEventHandler(XtParent(XtParent(_ppShutter)), 
        ButtonPressMask, False, BX_MENU_POST, (XtPointer)_ppShutter);
    
    // Set callback stuff for the _cUIimagefileSelect object

    _cUIimagefileSelect->m_pObj = (XtPointer)this;
    _cUIimagefileSelect->m_prvFileCallback = MainWindow::vImageFileCBCallback;

    pcName = XGetDefault(XtDisplay(parent), pcProgname, "imageSize");
    if (NULL != pcName)
      {
	int nStat, nTemp;
	nStat = sscanf(pcName, "%d", &nTemp);
	if (1 == nStat) m_nDefaultImageSize = nTemp;
      }
    _cUIimagefileSelect->vSetImageSize(m_nDefaultImageSize);

    // Set callback stuff for the _cUIwavelength object

#ifndef __NUTC__
    _cUIwavelength->m_pObj = (XtPointer)this;
    _cUIwavelength->m_prvOKCallback = MainWindow::vWavelengthCBCallback;
#endif
    
    // Set callback stuff for the _cUIimagefileSelect object

    _cUIimagefileSelect->m_pObj = (XtPointer)this;
    _cUIimagefileSelect->m_prvFileCallback = MainWindow::vImageFileCBCallback;

    // Set callback stuff for the _cUIeditheader object

    _cUIheaderEdit->m_pObj = (XtPointer)this;
    _cUIheaderEdit->m_prvHeaderModNotifyCallback
      = MainWindow::vHeaderEditCBCallback;

    // Set callback stuff for the _cUIeditdetector object

    _cUIeditdetector->m_pObj = (XtPointer)this;
    _cUIeditdetector->m_prvCallback = MainWindow::vEditDetectorOKCBCallback;

    m_hFilePB        = _pbScanTemplate;

    // Create the help object

    m_poXhelp     = new CXhelp (_w);     // Methods for on-line help

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"ScanFileHTML$$";
    XtAddCallback(_fsdCollectScanFile,
        XmNhelpCallback,
        MainWindow::vHTMLHelpCallback,
        (XtPointer)_clientDataStructs);

    // Motif 1.1 does not have the focusCallbacks
    // so add them only if Motif 1.2 or higher
#if (XmVersion >= 1002)

    m_ptCurrentTextRow->ptCBS[ms_nShutter] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nShutter]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nShutter]->client_data = (XtPointer)"Shutter status for the scan";
    XtAddCallback(_tfShutter,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nShutter]);
    
    m_ptCurrentTextRow->ptCBS[ms_nRotStart] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRotStart]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRotStart]->client_data
      = (XtPointer)"Rotation angle start in degrees relative to relative zero position";
    XtAddCallback(_tfRotStart,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRotStart]);
    
    m_ptCurrentTextRow->ptCBS[ms_nRotEnd] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRotEnd]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRotEnd]->client_data
      = (XtPointer)"Rotation angle end in degrees relative to relative zero position";
    XtAddCallback(_tfRotEnd,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRotEnd]);
    
    m_ptCurrentTextRow->ptCBS[ms_nRotIncr] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRotIncr]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRotIncr]->client_data 
      = (XtPointer)"Rotation angle increment in degrees per image";
    XtAddCallback(_tfRotIncr,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRotIncr]);

    m_ptCurrentTextRow->ptCBS[ms_nRotTime] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRotTime]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRotTime]->client_data
      = (XtPointer)"Integration/Exposure time per image in seconds";
    XtAddCallback(_tfTime,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRotTime]);

    m_ptCurrentTextRow->ptCBS[ms_nRotAxis] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRotAxis]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRotAxis]->client_data 
      = (XtPointer)"Rotation axis for the scan";
    XtAddCallback(_tfAxis,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRotAxis]);

    m_ptCurrentTextRow->ptCBS[ms_nTemplate] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nTemplate]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nTemplate]->client_data 
      = (XtPointer)"File template name for images written to disk";
    XtAddCallback(_tfTemplate,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nTemplate]);

    m_ptCurrentTextRow->ptCBS[ms_nSeqStart] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nSeqStart]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nSeqStart]->client_data 
      = (XtPointer)"Starting image sequence number for template name";
    XtAddCallback(_tfSeqStart,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nSeqStart]);

    m_ptCurrentTextRow->ptCBS[ms_nSeqIncr] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nSeqIncr]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nSeqIncr]->client_data
      = (XtPointer)"Increment added to image sequence number for each subsequent image";
    XtAddCallback(_tfSeqIncr,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nSeqIncr]);

    m_ptCurrentTextRow->ptCBS[ms_nRelStart] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nRelStart]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nRelStart]->client_data 
      = (XtPointer)"Relative zero position for scan rotation start and end; also detector position for this scan";
    XtAddCallback(_tfDatum,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nRelStart]);

    m_ptCurrentTextRow->ptCBS[ms_nWavelength] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nWavelength]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nWavelength]->client_data
      = (XtPointer)"Wavelength in Angstroms or eV";
    XtAddCallback(_tfWavelength,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nWavelength]);

    m_ptCurrentTextRow->ptCBS[ms_nNumOsc] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nNumOsc]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nNumOsc]->client_data
      = (XtPointer)"Number of rotation axis oscillations per image";
    XtAddCallback(_tfNumOsc,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nNumOsc]);
    
    m_ptCurrentTextRow->ptCBS[ms_nNumDarkIntvl] = new UICallbackStruct;
    m_ptCurrentTextRow->ptCBS[ms_nNumDarkIntvl]->object = this;
    m_ptCurrentTextRow->ptCBS[ms_nNumDarkIntvl]->client_data
      = (XtPointer)"Dark (shutter-closed) images re-collected at this interval";
    XtAddCallback(_tfDarkIntvl,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)m_ptCurrentTextRow->ptCBS[ms_nNumDarkIntvl]);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Enter a simple command";
    XtAddCallback(_tfCommand,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested source wavelength (in Angstroms) or energy (in eV)";
    XtAddCallback(_tfSource,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the rotation angle width in degrees (centered at current position)";
    XtAddCallback(_tfExpWidth,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the exposure time in seconds";
    XtAddCallback(_tfExpTime,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested detector to sample distance in millimeters";
    XtAddCallback(_tfDetDist,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested detector two-theta (swing angle) in degrees";
    XtAddCallback(_tfDetTheta,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested phi axis position";
    XtAddCallback(_tfCrysPhi,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested chi axis position";
    XtAddCallback(_tfCrysChi,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);
    
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the requested omega axis position";
    XtAddCallback(_tfCrysOmega,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the omega axis angle when the scan rotation angle is 0.0";
    XtAddCallback(_tfDatumOmega,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the chi axis angle when the scan rotation angle is 0.0";
    XtAddCallback(_tfDatumChi,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the phi axis angle when the scan rotation angle is 0.0";
    XtAddCallback(_tfDatumPhi,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the detector distance for this scan in millimeters";
    XtAddCallback(_tfDatumDist,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)"Set the detector swing angle for this scan";
    XtAddCallback(_tfDatumTheta,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data 
      = (XtPointer)"File template name for images written to disk";
    XtAddCallback(_tfScanTemplate,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data 
      = (XtPointer)"Starting image sequence number for template name";
    XtAddCallback(_tfScanSeqStart,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data 
      = (XtPointer)"Number of images for the scan";
    XtAddCallback(_tfScanNumImgs,
        XmNfocusCallback,
        MainWindow::vPostHelpCallback,
        (XtPointer)_clientDataStructs);


#endif    

    // Methods for cursor manipulation
    
    m_poXcursor   = new CXcursor (_w); 

    // Fix up _sdCollectScan display

    XtManageChild(XmSelectionBoxGetChild(_sdCollectScan,
					   XmDIALOG_APPLY_BUTTON));

    XtVaSetValues(XmSelectionBoxGetChild(_sdCollectScan,
					 XmDIALOG_CANCEL_BUTTON),
		  XmNsensitive, False,  XmNresizable, False, NULL);
    XtSetSensitive(XmSelectionBoxGetChild(_sdCollectScan,
					 XmDIALOG_HELP_BUTTON), False);

//    XtUnmanageChild(XmSelectionBoxGetChild(_sdCollectScan, XmDIALOG_OK_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(_sdCollectScan, XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(_sdCollectScan, 
					   XmDIALOG_SELECTION_LABEL));

    // Fix up _sdDatum display

    XtManageChild(XmSelectionBoxGetChild(_sdDatum, 
					   XmDIALOG_APPLY_BUTTON));
    XtVaSetValues(_sdDatum, XmNdefaultButton,
		  XmSelectionBoxGetChild(_sdDatum,
					 XmDIALOG_APPLY_BUTTON),
		  NULL);

    XtUnmanageChild(XmSelectionBoxGetChild(_sdDatum, 
					   XmDIALOG_SELECTION_LABEL));
    XtUnmanageChild(XmSelectionBoxGetChild(_sdDatum,
					   XmDIALOG_TEXT));

    // Fix up mbError message box display

    XtUnmanageChild(XmMessageBoxGetChild(_mbError, XmDIALOG_OK_BUTTON));
    XtUnmanageChild(XmMessageBoxGetChild(_mbError, XmDIALOG_HELP_BUTTON));

    // Get horizontal scrollbar widget for _swScan

    XtVaGetValues(_swScan,
		  XmNhorizontalScrollBar, &m_scrollbar,
		  NULL);

    // Now add callbacks to the scrollbar

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(m_scrollbar,
		  XmNvalueChangedCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNdecrementCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNincrementCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNpageIncrementCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNpageDecrementCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNdragCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNtoTopCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);
    XtAddCallback(m_scrollbar,
		  XmNtoBottomCallback,
		  MainWindow::vScrollbarCBCallback,
		  (XtPointer)_clientDataStructs);

    // These should be desensitized at the start
    
    XtSetSensitive(_tfExpWidth,     FALSE);
    XtSetSensitive(_lbExpWidth,     FALSE);
    XtSetSensitive(_lbExpWidthCurr, FALSE);

    // Scan View Shrink should be desensitized

    XtSetSensitive(_pbScanViewShrink, FALSE);

    // Add some vPopDialogCB callbacks

/*
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIimagefileSelect;
    XtAddCallback(_pbFileOpen,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIimagefileSelect;
    XtAddCallback(_pbFileSaveAs,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);
*/
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIimagefileSelect;
    XtAddCallback(_pbScanTemplate,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIimagefileSelect;
    XtAddCallback(_pbTemplate,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIwavelength;
    XtAddCallback(_pbSourceChoose,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_cUIwavelength;
    XtAddCallback(_pbWavelength,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)_sdDatum;
    XtAddCallback(_pbDatum,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_pbViewHeader,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    XtAddCallback(_pbEditDetector,
        XmNactivateCallback,
        MainWindow::vPopDialogCBCallback,
        (XtPointer)_clientDataStructs);

    m_ptCurrentTextRow->wToggle                      = _tbScan;
    m_ptCurrentTextRow->wTextField[ms_nShutter]      = _tfShutter;
    m_ptCurrentTextRow->wTextField[ms_nRotStart]     = _tfRotStart;
    m_ptCurrentTextRow->wTextField[ms_nRotEnd]       = _tfRotEnd;
    m_ptCurrentTextRow->wTextField[ms_nRotIncr]      = _tfRotIncr;
    m_ptCurrentTextRow->wTextField[ms_nRotTime]      = _tfTime;
    m_ptCurrentTextRow->wTextField[ms_nRotAxis]      = _tfAxis;
    m_ptCurrentTextRow->wTextField[ms_nTemplate]     = _tfTemplate;
    m_ptCurrentTextRow->wTextField[ms_nSeqStart]     = _tfSeqStart;
    m_ptCurrentTextRow->wTextField[ms_nSeqIncr]      = _tfSeqIncr;
    m_ptCurrentTextRow->wTextField[ms_nRelStart]     = _tfDatum;
    m_ptCurrentTextRow->wTextField[ms_nWavelength]   = _tfWavelength;
    m_ptCurrentTextRow->wTextField[ms_nNumOsc]       = _tfNumOsc;
    m_ptCurrentTextRow->wTextField[ms_nNumDarkIntvl] = _tfDarkIntvl;

    vScanRowColor(m_nCurrentRow, "white");

    m_frControl[ms_nShutter]      = _frShutter1;
    m_frControl[ms_nRotStart]     = _frRotStart;
    m_frControl[ms_nRotEnd]       = _frRotEnd;
    m_frControl[ms_nRotIncr]      = _frRotIncr;
    m_frControl[ms_nRotTime]      = _frTime;
    m_frControl[ms_nRotAxis]      = _frAxis;
    m_frControl[ms_nTemplate]     = _frTemplate;
    m_frControl[ms_nSeqStart]     = _frSeqStart;
    m_frControl[ms_nSeqIncr]      = _frSeqIncr;
    m_frControl[ms_nRelStart]     = _frDatum;
    m_frControl[ms_nWavelength]   = _frWavelength;
    m_frControl[ms_nNumOsc]       = _frNumOsc;
    m_frControl[ms_nNumDarkIntvl] = _frDarkIntvl;
    m_frControl[ms_nNumImgs]      = (Widget) NULL;

    // Process some information about the scan table

    m_unScanWindowWidth = 0;
    Dimension nWidth;
    _clientDataStructs = new UICallbackStruct;
    _clientDataStructs->object = this;
    _clientDataStructs->client_data = (XtPointer)0;
    for (ac = 0; ac < 13; ac++)
      {
	// Compute width in pixels of scan table

	XtVaGetValues(m_frControl[ac], XmNwidth, &nWidth, NULL);
	m_unScanWindowWidth = m_unScanWindowWidth + nWidth;
	
	// Set userData values which are used as flags in vTextFieldCB callback
	XtVaSetValues(m_ptCurrentTextRow->wTextField[ac],
		      XmNuserData, ac, NULL);
	XtAddCallback(m_ptCurrentTextRow->wTextField[ac],
		      XmNlosingFocusCallback,
		      MainWindow::vTextFieldCBCallback,
		      (XtPointer)_clientDataStructs);
#if (XmVersion >= 1002)
	XtAddCallback(m_ptCurrentTextRow->wTextField[ac],
		      XmNfocusCallback,
		      MainWindow::vTextFieldCBCallback,
		      (XtPointer)_clientDataStructs);
#endif
      }

    // Get total width needed by scan dialog window.
    // It is done like this, since users can specify the width of the
    // widgets in the resource file.  Need to add in extra width of 
    // scrolledWindow _swScan scrollbars, etc.

    XtVaGetValues(_frScanNum, XmNwidth, &nWidth, NULL);
    m_unScanWindowWidth = m_unScanWindowWidth + nWidth;
    XtVaSetValues(_swScan, XmNwidth, m_unScanWindowWidth, NULL);
    XtVaSetValues(_form11, XmNwidth, m_unScanWindowWidth, NULL);
    
    m_unScanWindowWidth = m_unScanWindowWidth + 35;
    XtVaSetValues(_form9, XmNwidth, m_unScanWindowWidth, NULL);
    m_unScanWindowWidth = m_unScanWindowWidth + 20;
    XtVaSetValues(_xmDialogShellCollectScan, XmNwidth,
		  m_unScanWindowWidth, NULL);

    // If only 1 row in the scan table, cannot cut or delete

    XtSetSensitive(_pbScanEditCut, False);
    XtSetSensitive(_pbScanEditDelete, False);

    // Set up some widget pointers for convenience

    m_tfValues[0] = _tfExpTime;
    m_tfValues[1] = _tfExpWidth;
    m_tfValues[2] = _tfCrysOmega;
    m_tfValues[3] = _tfCrysChi;
    m_tfValues[4] = _tfCrysPhi;
    m_tfValues[5] = _tfDetDist;
    m_tfValues[6] = _tfDetTheta;
    m_tfValues[7] = _tfSource;

    // Instantiate hardware devices

    if ("" == sGetEnv("DTCOLLECT_NOINIT"))
	vFileNewCB(_pbFileNewAll, NULL, NULL);

    // Poll hardware devices for current settings

    (void) nUpdateCurrentValues(); 

    // Get requested values from text widgets into member variables 

    vGetRequestedValues();          

    if (!m_poDefaultHeader->bIsAvailable())
      {
	vPutMessage("\nERROR reading default header specified by\n"
                    + ms_sDefaultHeaderTemplateFile, 1);
      }
    else
      {
	// Also try to load scan into main window widgets

	Cscan *poScan;
	poScan = new Cscan (*m_poDefaultHeader);
	(void) nUpdateRequestedValues(poScan);
	delete poScan;
      }

    // Reset the above based on the default header ...

//+jwp 17-Nov-1999
// Some edits for SBC-CAT
    if (!XtIsSensitive(_pbSourceMove))
      {
	XtUnmanageChild(_pbSourceMove);
	XtUnmanageChild(_pbSourceChoose);
	XtUnmanageChild(_tfSource);
      }
//-jwp 17-Nov-1999

    // Make sure "close" (delete window) from window manager calls our vExitCB

    Atom hWM_DELETE_WINDOW;
    hWM_DELETE_WINDOW = XmInternAtom(XtDisplay(parent),
				     "WM_DELETE_WINDOW", False);

    m_ptClientDataStructs[m_nCDC].object = this;

    m_ptClientDataStructs[m_nCDC].client_data = (XtPointer)0;
    XmAddWMProtocolCallback(parent, hWM_DELETE_WINDOW, 
			    MainWindow::vExitCBCallback, 
			    (XtPointer)&m_ptClientDataStructs[m_nCDC]);
    m_nCDC++;    

    // End user code block <endcreate>
}

//
// Classname access.
//
const char *const MainWindow::className()
{
    return ("MainWindow");
}

void MainWindow::vWarnPositionCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vWarnPositionCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vWarnPositionCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vWarnPositionCB>

  XmAnyCallbackStruct *pCBS 
    = (XmAnyCallbackStruct *)callData;

  if (XmCR_OK == pCBS->reason)
    {
      m_nMainWarnPosition = 0;
    }
  else
    {
      m_nMainWarnPosition = 1;
    }

    // End user code block <vWarnPositionCB>
}

void MainWindow::vFileOpenSaveCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vFileOpenSaveCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vFileOpenSaveCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFileOpenSaveCB>

  // This is the primary callback routine for posting and interacting with
  // the file selection dialog (_fsdFileOpenSave) for loading and saving
  // image header files.

  Boolean  argok=False;  
  char    *pcFileName;
  Cstring sFilename;

  if (w == _pbFileOpen)
    {
      // Set OK button label, dialog title and userData...

      XmString xsOKLabel;
      XmString xsTitle;
      xsOKLabel = (XmString)BX_CONVERT(_fsdFileOpenSave, "OK, Open", 
				    XmRXmString, 0, &argok);
      xsTitle   = (XmString)BX_CONVERT(_fsdFileOpenSave, 
				    "dtcollect - Open header file", 
				    XmRXmString, 0, &argok), 
      XtVaSetValues(_fsdFileOpenSave,
		    XmNokLabelString, xsOKLabel,
		    XmNuserData, 0,
		    XmNdialogTitle, xsTitle,
		    NULL);
      
      XmStringFree(xsOKLabel);
      XmStringFree(xsTitle);
      XtManageChild(_tbFileOpenSave);
      XtManageChild(_fsdFileOpenSave);
    }
  else if (w == _pbFileSaveAs)
    {
      // Set OK button label, dialog title and userData...

      XmString xsOKLabel;
      XmString xsTitle;
      xsOKLabel = (XmString)BX_CONVERT(_fsdFileOpenSave, "OK, Save As", 
				    XmRXmString, 0, &argok);
      xsTitle   = (XmString)BX_CONVERT(_fsdFileOpenSave, 
				    "dtcollect - Save header to a file",
				    XmRXmString, 0, &argok);
      XtVaSetValues(_fsdFileOpenSave,
		    XmNokLabelString, xsOKLabel,
		    XmNdialogTitle, xsTitle,
		    XmNuserData, 1, NULL);
      XmStringFree(xsOKLabel);
      XmStringFree(xsTitle);
      XtUnmanageChild(_tbFileOpenSave);
      XtManageChild(_fsdFileOpenSave);
    }
  else if (w == _fsdFileOpenSave)
    {
      XmFileSelectionBoxCallbackStruct *pCBS 
	= (XmFileSelectionBoxCallbackStruct *)callData;

      if (XmCR_OK == pCBS->reason)
	{
	  // Get file name 

	  XmStringGetLtoR(pCBS->value,
#if (XmVersion >= 1002)
			  XmFONTLIST_DEFAULT_TAG,
#else
			  XmSTRING_DEFAULT_CHARSET,
#endif
			  &pcFileName);
	  sFilename = pcFileName;
	  if ('\0' == *pcFileName) 
	    {
	      XtFree(pcFileName);
	      return;   // No file name specified
	    }

	  else if (   (sFilename.contains('*')) 
                   || (sFilename.contains('?'))
                   || (sFilename.length()-2 == sFilename.index("..")))
	    {
	      // Filename contains an asterisk or question mark,
	      // place in the mask and re-filter

	      XmString stxTemp;
	      stxTemp = XmStringCreateLtoR(sFilename.string(),
#if (XmVersion >= 1002)
					   XmFONTLIST_DEFAULT_TAG);
#else
                                           XmSTRING_DEFAULT_CHARSET);
#endif
             if (NULL != stxTemp)
	       {
		 XtVaSetValues(w, XmNdirMask, stxTemp, NULL);
		 XmStringFree(stxTemp);
	       }
	  
	      // Do search with new filter

	      XmFileSelectionDoSearch(w, NULL);
	      return;
	    }
	  else
	    {
	      // Is it Open or Save?
	      
	      int nUser;
	      XtVaGetValues(_fsdFileOpenSave, XmNuserData, &nUser, NULL);
	      if (0 == nUser)
		{
		  // Open header file and read it in
		  
		  Cimage_header oHeader((Cstring)pcFileName);
		  if (!oHeader.bIsAvailable())
		    {
		      vPutMessage("\nERROR reading header from file\n"
				  + (Cstring) pcFileName, 1);
		    }
		  else
		    {
		      vPutMessage("\nHeader read from file\n"
				  + (Cstring) pcFileName);
		      *m_poDefaultHeader = oHeader;

		      // Load header info into _cUIheaderEdit

		      _cUIheaderEdit->vSetHeader(m_poDefaultHeader);

		      // Also try to load scan into main window widgets

		      Cscan *poScan;
		      poScan = new Cscan (*m_poDefaultHeader);
		      (void) nUpdateRequestedValues(poScan);
		      delete poScan;

		      if (XmToggleButtonGetState(_tbFileOpenSave))
			{
			  // If toggle button set, delete all scans in scan
			  // table and try to load scan table, too

			  vScanEditCB(_pbScanEditDeleteAll, (XtPointer)6, NULL);

			  // Make sure scan table is managed before inserting
			  // things, (so forms get resized appropriately)

			  vCollectScanCB(NULL, NULL, NULL);
			  m_sScanFile = pcFileName;
			  (void) nScanFileRW(0, m_sScanFile);
			}
		      XtUnmanageChild(_fsdFileOpenSave);
		    }
		}
	      else if (1 == nUser)
		{
		  // Save header to a file

		  if (!m_poDefaultHeader->bIsAvailable())
		    {
		      vPutMessage("\nERROR saving header specified by\n"
				  + (Cstring) pcFileName, 1);
		    }
		  else
		    {
		      nUser = m_poDefaultHeader->nWrite((Cstring) pcFileName);
		      if (0 != nUser)
			{
			  vPutMessage("\nERROR writing header to file\n"
				      + (Cstring) pcFileName, 1);
			}
		      else
			{
			  vPutMessage("\nHeader written to file\n"
				      + (Cstring) pcFileName);
			  XtUnmanageChild(_fsdFileOpenSave);
			}
		    }
		}
	      XtFree(pcFileName);
	    }
	}
      else if (XmCR_CANCEL == pCBS->reason)
	{
	  XtUnmanageChild(_fsdFileOpenSave);	  
	}
      else if (XmCR_HELP == pCBS->reason)      
	{
	  vPutMessage("\nERROR no help available yet!\n", 1);
	}
    }
  else if (NULL == w)
    {
      // Hmmm,

      pcFileName = (char *) clientData;

      // Open header file and read it in

      if (NULL != m_poDefaultHeader)
	{
	  delete m_poDefaultHeader;
	}
      m_poDefaultHeader = new Cimage_header((Cstring)pcFileName);
      if (!m_poDefaultHeader->bIsAvailable())
	{
	  vPutMessage("\nERROR reading header from file\n"
		      + (Cstring) pcFileName, 1);
	}
      else
	{
	  vPutMessage("\nHeader read from file\n"
		      + (Cstring) pcFileName);
	}
    }
    // End user code block <vFileOpenSaveCB>
}

void MainWindow::vScanCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanCB>
  XmSelectionBoxCallbackStruct *pCBS = (XmSelectionBoxCallbackStruct *) callData;
  if (XmCR_OK == pCBS->reason)
    {
      // Do nothing, this is the UPDATE button
    }
  else if (XmCR_APPLY == pCBS->reason)
    {
      vPutMessage("Starting scan...");
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON), True);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_HELP_BUTTON),   True);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_APPLY_BUTTON), False);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_OK_BUTTON),    False);
      XtSetSensitive(_mnScan, False);

      // Start the scans
      m_nNextScan  = 0;
      m_nNumScans  = m_nNumRows;
      
      // Make sure label on Pause/Resume (aka Cancel button) 
      // is set (should come from resource file)

      vSetLabel(XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON),
		"Pause");
      XtVaSetValues(w, XmNuserData, 0, NULL);
      vMainCB(_sdCollectScan, clientData, callData);
    }
  else if (XmCR_CANCEL == pCBS->reason)
    {
      // See if this is a Pause or Resume

      int nUdata;
      XtVaGetValues(w, XmNuserData, &nUdata, NULL);
      Widget wTemp = XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON); 
      if (0 == nUdata)
	{
	  vPutMessage("Pausing scan...");
	  vScanRowColor(m_nPrevScan, "green");
	  vSetLabel(XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON),
		    "Resume"); // Label should come from resource file
	  nUdata = 1;
	  XtVaSetValues(w, XmNuserData, nUdata, NULL);
	  nUdata = m_poDevScan->nPauseResume(0);
	  if (DEV_SUCCESS != nUdata)
	    {
	      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
	      vPutMessage("Scan Pause problem!\n" + m_sStatusMsg, 1);
	    }
	  else
	    vPutMessage("Scan paused.", 0);
	}
      else
	{
	  vPutMessage("Resuming scan...");
	  vScanRowColor(m_nPrevScan, "red");
	  vSetLabel(XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON),
		    "Pause"); // Label should come from resource file
	  nUdata = 0;
	  XtVaSetValues(w, XmNuserData, nUdata, NULL);
	  nUdata = m_poDevScan->nPauseResume(1);
	  if (DEV_SUCCESS != nUdata)
	    {
	      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
	      vPutMessage("Scan resume problem!" + m_sStatusMsg, 1);
	    }
	  else
	    vPutMessage("Scan resumed.", 0);
	}
    }
  else if (XmCR_HELP == pCBS->reason)
    {
      vPutMessage ("ABORTING scan...");

      // Adjust number of scans to 0, so that things really do stop
      m_nNumScans = 0;
      vMainCB(_sdCollectScan, clientData, callData);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_CANCEL_BUTTON), False);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_HELP_BUTTON),   False);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_APPLY_BUTTON),   True);
      XtSetSensitive(XmSelectionBoxGetChild(w, XmDIALOG_OK_BUTTON),      True);
      XtSetSensitive(_mnScan, True);
    }

    // End user code block <vScanCB>
}

void MainWindow::vScanSaveCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanSaveCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanSaveCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanSaveCB>

  // Called when Scan/File/[Load|Save|Save As] is activated
  // the file selection box has in userData resource which
  // button was used to activate it
  // Danger!  callData may be NULL, but only if pvMode == 1;

  XmFileSelectionBoxCallbackStruct *pCBS 
    = (XmFileSelectionBoxCallbackStruct *)callData;

  char    *pcFileName;
  XtPointer pvMode;
  XtVaGetValues(w, XmNuserData, &pvMode, NULL);

  if ( (pvMode == (XtPointer)0) || (pvMode == (XtPointer)2) )
    {
      // Get file name 

      XmStringGetLtoR(pCBS->value,
#if (XmVersion >= 1002)
		      XmFONTLIST_DEFAULT_TAG,
#else
		      XmSTRING_DEFAULT_CHARSET,
#endif
		      &pcFileName);
      if (*pcFileName == '\0') 
	{
	  XtFree(pcFileName);
	  return;   // No file name specified
	}
      else
	{
	  m_sScanFile = (Cstring)pcFileName;
	  XtFree(pcFileName);
	}
    }

  if (pvMode == (XtPointer)0)
    {
      (void) nScanFileRW(0, m_sScanFile);
    }
  else if ( (pvMode == (XtPointer)1) || (pvMode == (XtPointer)2) )
    {
      // Save 
      (void) nScanFileRW(1, m_sScanFile);
    }

    // End user code block <vScanSaveCB>
}

void MainWindow::vScanDatumCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanDatumCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanDatumCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanDatumCB>

  Cstring sTemp;
  double  a5dTemp[5];
  double  a5dDatum[5];
  float   a5fDatum[5];
  char   *pcTemp;
  int     nStat;
  int     i;

  int n1 = 3;
  int n2 = 2;
  Cscan oScan;
  vScanRowGetValues(&oScan, -1);
  (void) oScan.nGetDatum(&n1, a5fDatum, &n2, &a5fDatum[3]);
  for (i = 0; i < 5; i++)
    {
      a5dDatum[i] = (double) a5fDatum[i];
      a5dTemp[i]  = a5dDatum[i];
    }

  if (w != _pbDatum)
    {
      // Read the widgets into a5dTemp.  Set to a5dDatum on any errors

      pcTemp = XmTextFieldGetString(_tfDatumOmega);
      nStat = sscanf(pcTemp, "%lf", &a5dTemp[0]);
      if (1 != nStat)
	{
	  a5dTemp[0] = a5dDatum[0];
	}
      XtFree(pcTemp);
      
      pcTemp = XmTextFieldGetString(_tfDatumChi);
      nStat = sscanf(pcTemp, "%lf", &a5dTemp[1]);
      if (1 != nStat)
	{
	  a5dTemp[1] = a5dDatum[1];
	}
      XtFree(pcTemp);
      
      pcTemp = XmTextFieldGetString(_tfDatumPhi);
      nStat = sscanf(pcTemp, "%lf", &a5dTemp[2]);
      if (1 != nStat)
	{
	  a5dTemp[2] = a5dDatum[2];
	}
      XtFree(pcTemp);
      
      pcTemp = XmTextFieldGetString(_tfDatumDist);
      nStat = sscanf(pcTemp, "%lf", &a5dTemp[3]);
      if (1 != nStat)
	{
	  a5dTemp[3] = a5dDatum[3];
	}
      XtFree(pcTemp);
      
      pcTemp = XmTextFieldGetString(_tfDatumTheta);
      nStat = sscanf(pcTemp, "%lf", &a5dTemp[4]);
      if (1 != nStat)
	{
	  a5dTemp[4] = a5dDatum[4];
	}
      XtFree(pcTemp);
    }

  // Update the textfield widgets 

  if (0 < n1)
    {
      sprintf(m_a255cTemp, m_sFormat2, a5dTemp[0]);
      XmTextSetString(_tfDatumOmega, m_a255cTemp);
    }
  if (1 < n1)
    {
      sprintf(m_a255cTemp, m_sFormat2, a5dTemp[1]);
      XmTextSetString(_tfDatumChi,   m_a255cTemp);
    }
  if (2 < n1)
    {
      sprintf(m_a255cTemp, m_sFormat2, a5dTemp[2]);
      XmTextSetString(_tfDatumPhi,   m_a255cTemp);
    }
  if (0 < n2)
    {
      sprintf(m_a255cTemp, m_sFormat2, a5dTemp[3]);
      XmTextSetString(_tfDatumDist,  m_a255cTemp);
    }
  if (1 < n2)
    {
      sprintf(m_a255cTemp, m_sFormat2, a5dTemp[4]);
      XmTextSetString(_tfDatumTheta, m_a255cTemp);
    }

  if (w == _pbDatum)
    {
      XtManageChild(_sdDatum);
    }

  else if (w == _sdDatum)
    {
      XmSelectionBoxCallbackStruct *pCBS = (XmSelectionBoxCallbackStruct *) callData;
      if ( (XmCR_OK == pCBS->reason) || (XmCR_APPLY == pCBS->reason) )
	{
	  // Set current scan row values

	  for (i = 0; i < 5; i++)
	    a5fDatum[i] = (float) a5dTemp[i];

	  (void) oScan.nSetDatum(n1, a5fDatum, n2, &a5fDatum[3]);
	  vScanRowSetValues(&oScan, -1);

	  // Update scan table RelStart widget (_tfDatum)
	  
	  sprintf(m_a255cTemp, "%.3lf, %.3lf, %.3lf, %.3lf, %.3lf",
		  a5dTemp[0], a5dTemp[1], a5dTemp[2], a5dTemp[3], a5dTemp[4]);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRelStart],
			       m_a255cTemp);
	}
      if (XmCR_OK == pCBS->reason)
	{
	  // OK, button, set focus back to the datum field

	  XmProcessTraversal(m_ptCurrentTextRow->wTextField[ms_nRelStart],
			     XmTRAVERSE_CURRENT);
	}
      else if (XmCR_APPLY == pCBS->reason)
	{
	  // Apply button, go to next field

	  XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
	}
    }
    // End user code block <vScanDatumCB>
}

void MainWindow::vUnPostHelpCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vUnPostHelp(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vUnPostHelp(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vUnPostHelp>
  if (NULL != m_poXhelp)
    {
      m_poXhelp->vUnpostOneLineCB(w, clientData, callData);
    }
    // End user code block <vUnPostHelp>
}

void MainWindow::vPostHelpCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPostHelp(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPostHelp(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPostHelp>
  if (NULL != m_poXhelp)
    {
      m_poXhelp->vPostOneLineCB(w, clientData, callData);
    }
    // End user code block <vPostHelp>
}

void MainWindow::vScanFileCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanFileCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanFileCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanFileCB>

  // Manage the Scan table file selection box.
  // Change its dialog title and its OK label depending on 
  // which pushbutton activated this routine.

  if (w == _pbScanFileClose)
    {
      XtUnmanageChild(_sdCollectScan);
    }
  else if (w == _pbScanFileOpen)
    {
      XmString  sxOKlabel;
#if (XmVersion >= 1002)
      sxOKlabel = XmStringCreateLocalized("OK, Open");
#else
      sxOKlabel = XmStringCreateSimple("OK, Open");
#endif
      XtVaSetValues(_fsdCollectScanFile,
		    XmNuserData, (XtPointer)0,
		    XmNokLabelString, sxOKlabel, NULL);
      XmStringFree(sxOKlabel);
      XtManageChild(_fsdCollectScanFile);
    }
  else if (     (w == _pbScanFileSaveAs)
	   || ( (w == _pbScanFileSave) && (m_sScanFile == "") ) )
    {
      XmString  sxOKlabel;
#if (XmVersion >= 1002)
      sxOKlabel = XmStringCreateLocalized("OK, Save");
#else
      sxOKlabel = XmStringCreateSimple("OK, Save");
#endif
      XtVaSetValues(_fsdCollectScanFile, XmNuserData, (XtPointer)2,
		    XmNokLabelString, sxOKlabel, NULL);
      XmStringFree(sxOKlabel);
      XtManageChild(_fsdCollectScanFile);
    }
  else if (w == _pbScanFileSave)
    {
      XtVaSetValues(_fsdCollectScanFile, XmNuserData, (XtPointer)1,
		    NULL);
      vScanSaveCB(_fsdCollectScanFile, clientData, NULL);
    }
    // End user code block <vScanFileCB>
}

void MainWindow::vScanEditCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanEditCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanEditCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanEditCB>

  // This routine is called whenever a button in the Collect/Scan/Edit
  // menu is selected.  Functions are copy, cut, paste, insert after, delete

  int i, j;                                // Loop counters
  int nNumToInsert = 0;
  int nSaveCurrent;
  int a2nScanWaveOpts[2];
  Cscan oScan;
  Cstring sTemp;
  int     nSeqStart;
  int     nSeqOffset;

  if (  (w == _pbScanEditMulti2)
     || (w == _pbScanEditMulti3)
     || (w == _pbScanEditMulti3i) )
    {
      // Modify SCAN_TEMPLATE for later use

      int nNumImages;
      int nNumPlaces, nNumPlacesNeeded;
      vScanRowGetValues(&oScan, nSaveCurrent);
      oScan.vGetWavelengthOpts( &a2nScanWaveOpts[0], &a2nScanWaveOpts[1]);
      sTemp      = oScan.sGetTemplate();
      nNumPlaces = 0;
      for (i = 0; i < sTemp.length(); i++)
	if ('?' == sTemp.GetAt(i)) nNumPlaces++;

      nSeqStart  = oScan.nGetSeqNum(0);
      //      cout << "seq start: " << nSeqStart << endl;
      nNumImages = oScan.nGetNumImages();
      nNumPlacesNeeded = (int)log10( (float)nNumImages + 0.5) + 2;
      nSeqOffset = nint( powf(10.0, 
			      (float)(max(nNumPlacesNeeded, nNumPlaces)-1)) );
      /*
      cout << "num images, num places, needed, nSeqOffset: "
           << nNumImages << ", " << nNumPlaces << ", " << nNumPlacesNeeded
           << ", " << nSeqOffset << endl;
      */
      if (nNumPlacesNeeded > nNumPlaces)
	{
	  // ERROR
	  vPutMessage ("\nERROR not enough ?'s in scan template for scan digit!\n", 1);
	  return;
	}

      if (nSeqStart < nSeqOffset) 
	nSeqStart += nSeqOffset;
      if (nSeqStart > (int)(9.99999f * (float) nSeqOffset) )
	{
	  vPutMessage ("\nERROR inconsistent starting sequence number, too high!\n", 1);
	  return;
	}

      //WARNING, what if nSeqStart has too many digits to fit.

      oScan.vSetSeqStart(nSeqStart);

    }

  if (    (w == _pbScanEditCopy) || (w == _pbScanEditCut) )
    {
      // Copy or cut or MAD-ify, so save text in current row to paste buffer

      for (i = 0; i < 13; i++)
	{
	  if (NULL != m_pcTextValue[i]) XtFree(m_pcTextValue[i]);
	  m_pcTextValue[i] = XmTextFieldGetString(
				 m_ptCurrentTextRow->wTextField[i]);
	}
      XtSetSensitive(_pbScanEditPaste, True);
   }
  else if (w == _pbScanEditPaste)
    {
      // Paste over current row
      for (i = 0; i < 13; i++)
	{
	  if (NULL != m_pcTextValue[i])
	    XmTextFieldSetString(m_ptCurrentTextRow->wTextField[i],
				 m_pcTextValue[i]);
	}
    }
  else if (w == _pbScanEditPasteMW)
    {
      // Paste from info in main window into current selected row

      vGetRequestedValues(2);        // Get main window scan values
      vScanRowSetValues(m_poScan, -1);  // Paste onto current selected row
    }

  // Note, next line is NOT ELSE IF, but is an IF!

  if (w == _pbScanEditMulti2)
    {
      // Take selected scan insert a second wavelength scan after it.

      nNumToInsert = 1;
    }      
  else if (w == _pbScanEditMulti3)
    {
      // Take selected scan insert 2nd and 3rd wavelength scans after it.

      nNumToInsert = 2;
    }      
  else if (w == _pbScanEditMulti3i)
    {
      // Take selected scan insert inverse beam scan and 2nd and 
      // 3rd wavelength scans after it.
      nNumToInsert = 5;
    }      
  else if (w == _pbScanEditInsert)
    {
      nNumToInsert = 1;
    }
  else
    {
      nNumToInsert = 0;
    }

  nSaveCurrent = m_nCurrentRow;

  while (0 < nNumToInsert)
    {
      // Insert AFTER, so create new row at end and 
      // move all text after current row down, set current row at
      // the newly inserted row position

      i = m_nCurrentRow;   // Save current row since next statement changes it
      vScanRowCreate();
      m_nCurrentRow = i+1;
      m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
      char *pcText;
      for (j = m_nNumRows-1; j > m_nCurrentRow; j--)
	{
	  for (i = 0; i < 13; i++)
	    {
	      pcText = XmTextFieldGetString(m_pptTextRow[j-1]->wTextField[i]);
	      XmTextFieldSetString(m_pptTextRow[j]->wTextField[i],
				   pcText);
	      XtFree(pcText);
	    }
	  // Adjust view of template field to be at end
	  XmTextFieldShowPosition(m_pptTextRow[j]->wTextField[ms_nTemplate],
		XmTextFieldGetLastPosition(m_pptTextRow[j]->wTextField[ms_nTemplate]));
	}
      nNumToInsert--;
    }

  if (w == _pbScanEditMulti2)
    {
      // Take selected scan insert a second wavelength scan after it.

      a2nScanWaveOpts[0] = 1; // Peak
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      vScanRowSetValues(&oScan, nSaveCurrent);

      // Change wavelength
      a2nScanWaveOpts[0] = 2;  // Infl rise
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+1);
    }      
  else if (w == _pbScanEditMulti3)
    {
      // Take selected scan insert 2nd and 3rd wavelength scans after it.

      a2nScanWaveOpts[0] = 1; // Peak
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      vScanRowSetValues(&oScan, nSaveCurrent);

      // Change wavelength
      a2nScanWaveOpts[0] = 2;  // Infl Rise
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+1);

      // Change wavelength
      a2nScanWaveOpts[0] = 0;  // Absolute, high energy remote!
      oScan.vSetWavelength(oScan.fGetWavelength() - 300.0 / 12398.0);
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+2);
    }      
  else if (w == _pbScanEditMulti3i)
    {
      // Take selected scan insert inverse beam scan and 2nd and 
      // 3rd wavelength scans after it.

      int nCrys, nDet, nStat;
      float a10fCrys[10], a10fDet[10], a10fCrysSave[10];
      nCrys = 3;
      nDet  = 2;
      nStat = oScan.nGetDatum(&nCrys, &a10fCrys[0], &nDet, &a10fDet[0]);
      if ( (0 == nStat) && (nCrys > 0) )
	{
	  a10fCrys[nCrys-1] = a10fCrys[nCrys-1] + 180.0;
	  if (a10fCrys[nCrys-1] >  360.0) a10fCrys[nCrys-1] -= 360.0;
	  if (a10fCrys[nCrys-1] < -360.0) a10fCrys[nCrys-1] += 360.0;
	}
      else
	{
	  // Warning message and return

	  vPutMessage ("\nERROR getting crystal goniometer datum values!\n", 1);
	  return;
	}
      oScan.nGetDatum(&nCrys, &a10fCrysSave[0], &nDet, &a10fDet[0]);

      // Change wavelength
      a2nScanWaveOpts[0] = 1; // Peak
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);

      vScanRowSetValues(&oScan, nSaveCurrent);
               // Add 180 to crystal_phi datum
      oScan.nSetDatum(nCrys, a10fCrys, nDet, a10fDet);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+1);

      // Change wavelength
      a2nScanWaveOpts[0] = 2;  // Infl rise
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      oScan.nSetDatum(nCrys, a10fCrysSave, nDet, a10fDet);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+2);
               // Add 180 to crystal_phi datum
      oScan.nSetDatum(nCrys, a10fCrys, nDet, a10fDet);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+3);

      // Change wavelength
      a2nScanWaveOpts[0] = 0; // Absolute at High energy remote
      oScan.vSetWavelength(oScan.fGetWavelength() - 200.0 / 12398.0);
      oScan.vSetWavelengthOpts(a2nScanWaveOpts[0], a2nScanWaveOpts[1]);
      oScan.nSetDatum(nCrys, a10fCrysSave, nDet, a10fDet);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+4);
              // Add 180 to crystal_phi datum
      oScan.nSetDatum(nCrys, a10fCrys, nDet, a10fDet);
      nSeqStart += nSeqOffset;
      oScan.vSetSeqStart(nSeqStart);
      vScanRowSetValues(&oScan, nSaveCurrent+5);
    }      
  else if (   ( (w == _pbScanEditCut) || (w == _pbScanEditDelete) )
	   && (1 < m_nNumRows) )
    {
      // Cut or Delete, so move all later text up and delete last row
      char *pcText;
      for (j = m_nCurrentRow; j < m_nNumRows-1; j++)
	{
	  for (i = 0; i < 13; i++)
	    {
	      pcText = XmTextFieldGetString(m_pptTextRow[j+1]->wTextField[i]);
	      XmTextFieldSetString(m_pptTextRow[j]->wTextField[i],
				   pcText);
	      XtFree(pcText);
	    }
	  // Adjust view of template field to be at end
	  XmTextFieldShowPosition(m_pptTextRow[j]->wTextField[ms_nTemplate],
		 XmTextFieldGetLastPosition(m_pptTextRow[j]->wTextField[ms_nTemplate]));
	}
//      i = m_nCurrentRow;
      vScanRowDelete();
//      m_nCurrentRow = i;
//      if (m_nCurrentRow >= m_nNumRows) m_nCurrentRow--;  // Last row deleted
//      m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
    }

  else if (w == _pbScanEditDeleteAll)
    {
      // Try to delete all rows in reverse order

      for (i = m_nNumRows-1; i > 0; i--)
	{
	  vScanRowDelete();
	}
    }

  vScanToggleCB(m_ptCurrentTextRow->wToggle, 
		(XtPointer)(m_nCurrentRow*100), (XtPointer)NULL);

    // End user code block <vScanEditCB>
}

void MainWindow::vScanViewCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanViewCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanViewCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanViewCB>

  // Look at clientData. 
  // If 0, then enlarge,
  //    1, then shrink.
  // Do not enlarge to more than M pixels, do not shrink below N pixels

  long nUdata = (long) clientData;
  int nHeightChange = 40;
  Dimension tHeight;

  // Do not let form9 autoresize

  XtVaSetValues(_form9, XmNresizePolicy, XmRESIZE_NONE, NULL);

  // Next get size of _swScan

  XtVaGetValues(_swScan, XmNheight, &tHeight, NULL);

  if (0 == nUdata)
    {
      // Enlarge scrolled window.

      if (tHeight < 10*nHeightChange)
	{
	  tHeight = tHeight + nHeightChange;
	  XtVaSetValues(_swScan, XmNheight, tHeight, NULL);
	  if (tHeight >= 10*nHeightChange)
	    {
	      // Do not let user enlarge any more
	      XtSetSensitive(_pbScanViewEnlarge, FALSE);
	    }
	  XtSetSensitive(_pbScanViewShrink, TRUE);
	  XtVaGetValues(_form9, XmNheight, &tHeight, NULL);
	  tHeight = tHeight + nHeightChange;
	  XtVaSetValues(_form9, XmNheight, tHeight, NULL);
	}
    }
  else if (1 == nUdata)
    {
      // Shrink scrolled window

      if (tHeight > 2 * nHeightChange)
	{
	  tHeight = tHeight - nHeightChange;
	  XtVaSetValues(_swScan, XmNheight, tHeight, NULL);
	  if (tHeight <= 2 * nHeightChange)
	    {
	      // Do not let user shrink any more
	      XtSetSensitive(_pbScanViewShrink, FALSE);
	    }
	  XtSetSensitive(_pbScanViewEnlarge, TRUE);
	  XtVaGetValues(_form9, XmNheight, &tHeight, NULL);
	  tHeight = tHeight - nHeightChange;
	  XtVaSetValues(_form9, XmNheight, tHeight, NULL);
	}
    }
  XtVaSetValues(_form9, XmNresizePolicy, XmRESIZE_ANY, NULL);

    // End user code block <vScanViewCB>
}

void MainWindow::vScanArrowCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanArrowCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanArrowCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanArrowCB>

  // Widen or Narrow the size of the scan dialog window

  unsigned char ucDir;
  XtVaGetValues(_abScan, XmNarrowDirection, &ucDir, NULL);
  if ( ( (ucDir == XmARROW_RIGHT) && (w == _abScan) )
       || (w == _pbScanViewWiden) )
    {
      XtVaSetValues(_xmDialogShellCollectScan, XmNwidth,
		    m_unScanWindowWidth, NULL);
      XtVaSetValues(_abScan, XmNarrowDirection, XmARROW_LEFT, NULL);
      XtVaSetValues(_form18, XmNleftOffset, 18, NULL);  // Reset horiz scroll
      XtSetSensitive(_pbScanViewWiden, False);
      XtSetSensitive(_pbScanViewNarrow, True);
    }
  else if ( ( (ucDir == XmARROW_LEFT) && (w == _abScan) )
	    || (w == _pbScanViewNarrow) )
    {
      XtVaSetValues(_xmDialogShellCollectScan, XmNwidth, 762, NULL);
      XtVaSetValues(_abScan, XmNarrowDirection, XmARROW_RIGHT, NULL);
      XtSetSensitive(_pbScanViewWiden,   True);
      XtSetSensitive(_pbScanViewNarrow, False);
    }


    // End user code block <vScanArrowCB>
}

void MainWindow::vHTMLHelpCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vHTMLHelp(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vHTMLHelp(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vHTMLHelp>
  if (NULL != m_poXhelp)
    {
      m_poXhelp->vHTMLHelp(w, clientData, callData);
    }
    // End user code block <vHTMLHelp>
}

void MainWindow::vScanRadioCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanRadio(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanRadio(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanRadio>
  int nCdata = (int) clientData;

  if (nCdata == 0)
    {
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nShutter], (char*)"Open");
    }
  else if (nCdata == 1)
    {
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nShutter], (char*)"Closed");
    }
  else if (nCdata == 50)
    {
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRotAxis], (char*)"Phi");
    }
  else if (nCdata == 51)
    {
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRotAxis], (char*)"Omega");
    }

    // End user code block <vScanRadio>
}

void MainWindow::vScanScrollBarCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanScrollBarCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanScrollBarCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanScrollBarCB>

  XmScrollBarCallbackStruct *pCBS = (XmScrollBarCallbackStruct *)callData;
  int nCdata = (int) clientData;
  long nUdata;
  XtVaGetValues(w, XmNuserData, &nUdata, NULL);

  float fTemp;
  if ( (nCdata == 1) || (nCdata == 2) )
    {
      // Rotation start or end

      fTemp = (float)(pCBS->value);
      sprintf(m_a255cTemp, "%.3f", fTemp);
    }
  else if (nCdata == 3)
    {
      // Rotation end

      fTemp = (float)(pCBS->value) * 0.05;
      sprintf(m_a255cTemp, "%.3f", fTemp);
    }
  else if (   (nCdata == 4)
	   || (nCdata == 7)
	   || (nCdata == 8)
	   || (nCdata == 11)
	   || (nCdata == 12) )
    {
      // Time, Seq start, Seq incr, Num osci, Dark intvl
      sprintf(m_a255cTemp, "%d", pCBS->value);
    }
  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[nCdata], m_a255cTemp);  
  XmTextFieldShowPosition(m_ptCurrentTextRow->wTextField[nCdata],
	   XmTextFieldGetLastPosition(m_ptCurrentTextRow->wTextField[nCdata]));

/*
Not coded yet.

  int nScrollBar = (int) clientData;
  char *pcString;

  pcString = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[nScrollBar]);

  // Now we have the string, get the value and modify it and put it back.

  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[nScrollBar], pcString);
  XtFree(pcString);
*/
    // End user code block <vScanScrollBarCB>
}

void MainWindow::vScanToggleCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScanToggleCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vScanToggleCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vScanToggleCB>

  // Called when a toggle button in the scan table is armed or disarmed
  // Do:  1. Set selected row to selected togglebutton
  //      2. Set keyboard focus to first textField widget in the row
  //           (if callData shows that the toggleButton was used)
  //      3. Set current row to selected row.

  tagTextRow *ptOldRow;

  long nUdata = (long) clientData;
  XmToggleButtonCallbackStruct *pCBS = (XmToggleButtonCallbackStruct *)callData;

  int i;
  ptOldRow           = m_ptCurrentTextRow;
  m_nCurrentRow      = nUdata / 100;
  m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
	
  // Set all to false
  for (i = 0; i < m_nNumRows; i++)
    {
      XtVaSetValues(m_pptTextRow[i]->wToggle, XmNset, False, NULL);
    }

  if (m_nPrevRow != m_nCurrentRow)
    {
      // Set the background color in the old row widgets to be ?
      
      vScanRowColor(m_nPrevRow, "?");

      // Set the background color in the widgets to be ? WHITE
	  
      vScanRowColor(m_nCurrentRow, "white");
      m_nPrevRow = m_nCurrentRow;
    }

  if (NULL == callData)
    {
      // If not called by a arming the button, then set to true
      XtVaSetValues(m_ptCurrentTextRow->wToggle, XmNset, True, NULL);
    }
  else
    {
      if (XmCR_DISARM == pCBS->reason)
	{
	  // Well, we really wanted to arm it!

	  XtVaSetValues(m_ptCurrentTextRow->wToggle, XmNset, True, NULL);
	}

      // Set keyboard input focus to first widget in row
      // Strange interaction: this causes losingFocus in the text callback
      // to call this routine

      i = m_nCurrentRow;
      XmProcessTraversal(m_pptTextRow[i]->wTextField[ms_nShutter], 
			 XmTRAVERSE_CURRENT);
      m_nCurrentRow = i;
      m_ptCurrentTextRow = m_pptTextRow[i];

    }

  // Tell the scan dialog which row is the current row

  sprintf(m_a255cTemp, "Scan %d of %d selected", m_nCurrentRow+1, m_nNumRows);
  vSetLabel(_lbScanSelected, m_a255cTemp);

    // End user code block <vScanToggleCB>
}

void MainWindow::vTextFieldCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vTextFieldCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vTextFieldCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vTextFieldCB>

  // All textField widgets have XmNuserData field set uniquely.
  // This field uses the ones and tens digits to specify an item number
  // and the hundreds and higher digits to specify the field number

  // Fields 0 - 99 are reserved to designate rows in the scan table

  XmAnyCallbackStruct *pCBS = (XmAnyCallbackStruct *)callData;

  long nUdata;
  int  nField, nItem;
  XtVaGetValues(w, XmNuserData, &nUdata, NULL);

  nItem  = nUdata % 100;            // Get which item
  nField = (nUdata - nItem) / 100;  // Get which field

  if ( (100 < nField) && (200 > nField) )
    {
      // Somewhere in the mainwindow, fix this later

      if (   (pCBS->reason == XmCR_ACTIVATE)
	  || (pCBS->reason == XmCR_LOSING_FOCUS) )
	{
	  // Read the text value of the widgets, re-write and put it
	  //  in the correct member variable

	  vGetRequestedValues();
	}
    }
  else if (200 <= nField)
    {
      // Somewhere in the Edit/Header .. dialog
      cerr << "OBSOLETE Edit header textcb!\n";
    }
  else if (nField < 100)
    {
      // Scan table widget, but which one?

      float fTemp;
      int   nStat;
      if (   (pCBS->reason == XmCR_ACTIVATE)
	  || (pCBS->reason == XmCR_LOSING_FOCUS) )
	{
	  // We are have <cr> or are leaving textfield, so read text in widget
	  // to see if it begins with an = sign

	  char *pcTemp;
	  pcTemp = XmTextFieldGetString(m_pptTextRow[nField]->wTextField[nItem]);
	  if ( ( ('=' == *pcTemp) || ('\0' == *pcTemp) )&& (0 < nField) )
	    {
	      // If the text starts with an equal character or is empty,
	      // copy previous row (if there is one) to this one

	      XtFree(pcTemp);
	      pcTemp = XmTextFieldGetString(
			  m_pptTextRow[nField-1]->wTextField[nItem]);
	      XmTextFieldSetString(m_pptTextRow[nField]->wTextField[nItem],
				   pcTemp);
	    }
	  else if (   (ms_nRotStart == nItem) || (ms_nRotEnd == nItem)
		   || (ms_nRotIncr == nItem) )
	    {
	      nStat = sscanf(pcTemp, "%f", &fTemp);
	      if (1 == nStat)
		{
		  sprintf(m_a255cTemp, "%.2f", fTemp);
		  XmTextFieldSetString(w, m_a255cTemp);
		}
	    }
	  else if (ms_nRotTime == nItem)
	    {
	      nStat = sscanf(pcTemp, "%f", &fTemp);
	      if (1 == nStat)
		{
		  sprintf(m_a255cTemp, "%.2f", fTemp);
		  XmTextFieldSetString(w, m_a255cTemp);
		}
	    }
	  else if ( (ms_nRotAxis == nItem) || (ms_nTemplate == nItem) )  //  had: (ms_nShutter == nItem) || 
	    {
	      // One of the text items

	      XmTextFieldShowPosition(w, XmTextFieldGetLastPosition(w));
	    }
	  else if (   (ms_nSeqStart == nItem) || (ms_nSeqIncr == nItem)
		   || (ms_nNumOsc == nItem) )
	    {
	      float fTemp2;
	      nStat = sscanf(pcTemp, "%f, %f", &fTemp, &fTemp2);
	      if (1 <= nStat)
		{
		  if (1 == nStat)
		    sprintf(m_a255cTemp, "%.0f", fTemp);
		  else
		    sprintf(m_a255cTemp, "%.0f, %.0f", fTemp, fTemp2);
		  XmTextFieldSetString(w, m_a255cTemp);
		}
	    }
	  
	  XtFree(pcTemp);
#if (XmVersion < 1002)

	  // Kludge setting input focus because Motif 1.1 does not have
	  // gain focus attribute, so see if we can figure out where we are
	  // when we lose focus

	  if ( (100 > nField) && (m_nCurrentRow != nField) && (99 != nItem) )
	    {
	      m_nCurrentRow = nField;
	      m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
	      vScanToggleCB(m_ptCurrentTextRow->wToggle, 
			    (XtPointer)(m_nCurrentRow*100),
			    (XtPointer)NULL);
	    }
#endif

/******************
	  // Lost focus, so contract width of textField to half the width

	  Dimension nWidth;
	  XtVaGetValues(w, XmNwidth, &nWidth, NULL);
	  nWidth = nWidth / 2;
	  int i;
	  for (i = 0; i < m_nNumRows; i++)
	    {
	      XtVaSetValues(m_pptTextRow[i]->wTextField[nItem],
			    XmNwidth, nWidth, NULL);
	    }
	  // Need to contract the control below the scan table, too

	  XtVaSetValues(m_frControl[nItem], XmNwidth, nWidth, NULL);	   
******************/
	}
#if (XmVersion >= 1002)
      else if (pCBS->reason == XmCR_FOCUS)
	{
	  if (m_nCurrentRow != nField)
	    {
	      m_nCurrentRow = nField;
	      m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
	      vScanToggleCB(m_ptCurrentTextRow->wToggle, 
			    (XtPointer)(m_nCurrentRow*100),
			    (XtPointer)NULL);
	    }
/******************
	  // Gained focus, so expand width of textField to double the width
	  
	  Dimension nWidth;
	  XtVaGetValues(w, XmNwidth, &nWidth, NULL);
	  nWidth = 2 * nWidth;
	  int i;
	  for (i = 0; i < m_nNumRows; i++)
	    {
	      XtVaSetValues(m_pptTextRow[i]->wTextField[nItem],
			    XmNwidth, nWidth, NULL);
	    }
	  // Need to expand the control below the scan table, too
	  XtVaSetValues(m_frControl[nItem], XmNwidth, nWidth, NULL);
******************/
	}
#endif      
    }

  // If <cr> in the current widget, then set keyboard focus to next widget

  if (pCBS->reason == XmCR_ACTIVATE)
    {
      // On <cr> in textField go to next tab group
      if (w != _tfCommand)
	{
	  XmProcessTraversal(w, XmTRAVERSE_NEXT_TAB_GROUP);
	}
      else
	{
	  // The tfCommand widget is not active now
	  
	  vPutMessage("ERROR, text commands not yet supported!", 1);
	}

/**********
the following does not work      
      // Now check which row we are on and set m_nCurrentRow, etc

      Window tW;
      Widget w1;
      XGetInputFocus(XtDisplay(w), &tW, &nUdata);
      w1 = XtWindowToWidget(XtDisplay(w), tW);
      if (XmIsTextField(w1))
	{
	  XtVaGetValues(w1,
			XmNuserData, &nUdata, NULL);
	  nItem  = nUdata % 100;            // Get which item
	  nField = (nUdata - nItem) / 100;  // Get which field
	  if ( (nField < 100) && (nItem < 12) )
	    {
	      if (m_nCurrentRow != nField)
		{
		  m_nCurrentRow = nField;
		  m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];
		  vScanToggleCB(m_ptCurrentTextRow->wToggle, 
				(XtPointer)(m_nCurrentRow*100),
				(XtPointer)NULL);
		}
	    }
#if (XmVersion >= 1002)
	  // Keyboard focus has been shifted to the next widget, so
	  // make sure it is visible (move this to  XmNtraverseObscuredCallback)
	  
	  XmScrollVisible(_swScan,
			  m_pptTextRow[nField]->wTextField[nItem+1],
			  0, 0);
#endif
	}
********/
    }
    // End user code block <vTextFieldCB>
}

void MainWindow::vFileNewCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vFileNewCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vFileNewCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vFileNewCB>

  int nStat;

  // Some stuff to look things up in the resource database

  String pcName;
  String pcClass, pcProgname;

  XtGetApplicationNameAndClass(XtDisplay(w), &pcProgname, &pcClass);

  // (Re)Initialize hardware devices

  if ( (w == _pbFileNewCrysGon) || (w == _pbFileNewAll) )
    {
      // Crystal goniometer 

      if (NULL != m_poDevGonCrys)
	{
	  delete m_poDevGonCrys;
	}
      pcName = XGetDefault (XtDisplay(w), pcProgname, "goniometerCrystalName");
      if (NULL == pcName)
	m_poDevGonCrys = new CDevGoniom();     // No name is default goniometer
      else
	m_poDevGonCrys = new CDevGoniom(pcName);
      nStat = m_poDevGonCrys->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("CrysGoniom init problem!\n" + m_sStatusMsg, 1);
	}
      else
	vPutMessage("Crystal goniometer initialized!", 0);
      XtSetSensitive(_pbCrysMove, False);
    }
  if ( (w == _pbFileNewDetGon) || (w == _pbFileNewAll) )
    {
      // Detector goniometer 

      if (NULL != m_poDevGonDet)
	{
	  delete m_poDevGonDet;
	}
      pcName = XGetDefault (XtDisplay(w), pcProgname, "goniometerDetectorName");
      if (NULL == pcName)
	m_poDevGonDet = new CDevGoniom("Det");
      else
	m_poDevGonDet = new CDevGoniom(pcName);
      nStat = m_poDevGonDet->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("DetGoniom init problem!\n" + m_sStatusMsg, 1);
	}
      else
	vPutMessage("Detector goniometer initialized!", 0);
      XtSetSensitive(_pbDetMove, False);
    }
  if ( (w == _pbFileNewDet) || (w == _pbFileNewAll) )
    {
      // Detector

      if (NULL != m_poDevDet)
	{
	  delete m_poDevDet;
	}
      m_sDetectorName = "";
      pcName = XGetDefault (XtDisplay(w), pcProgname, "detectorName");
      if (NULL != pcName)
	{
	  m_sDetectorName = pcName;
	}
      m_poDevDet = new CDevDetector(m_sDetectorName);
      nStat = m_poDevDet->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevDet->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Detector init problem!\n" + m_sStatusMsg, 1);
	}
      else
	vPutMessage("Detector initialized!", 0);
    }
  if ( (w == _pbFileNewShutter) || (w == _pbFileNewAll) )
    {
      // Shutter

      if (NULL != m_poDevShutter)
	{
	  delete m_poDevShutter;
	}
      pcName = XGetDefault (XtDisplay(w), pcProgname, "shutterName");
      if (NULL == pcName)
	m_poDevShutter = new CDevShutter();
      else
	m_poDevShutter = new CDevShutter(pcName);
      nStat = m_poDevShutter->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevShutter->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Shutter init problem!\n" + m_sStatusMsg , 1);
	}
      else
	vPutMessage("Shutter initialized!", 0);
      XtSetSensitive(_pbShutter, False);
    }
  if ( (w == _pbFileNewSensor) || (w == _pbFileNewAll) )
    {
      // Counters and sensors

      if (NULL != m_poDevCounter)
	{
	  delete m_poDevCounter;
	}
      pcName = XGetDefault (XtDisplay(w), pcProgname, "counterName");
      if (NULL == pcName)
	m_poDevCounter = new CDevCounter();
      else
	m_poDevCounter = new CDevCounter(pcName);
      nStat = m_poDevCounter->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevCounter->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Counter devices init problem\n!" + m_sStatusMsg, 1);
	}
      else
	vPutMessage("Counter devices initialized!", 0);
    }
  if ( (w == _pbFileNewSource) || (w == _pbFileNewAll) )
    {
      // Source / monochromator / beamline

      if (NULL != m_poDevSource)
	{
	  delete m_poDevSource;
	}
      pcName = XGetDefault (XtDisplay(w), pcProgname, "sourceName");
      if (NULL == pcName)
	m_poDevSource = new CDevSource();
      else
	m_poDevSource = new CDevSource(pcName);
      nStat = m_poDevSource->nInit();
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Source init problem!\n" + m_sStatusMsg, 1);
	}
      else
	vPutMessage("Source device initialized!", 0);
      XtSetSensitive(_pbSourceMove, False);
    }

  // No matter which device is initialized, CDevScan has to be
  // re-initialized because the pointers have changed

  if (NULL != m_poDevScan)
    {
      delete m_poDevScan;
    }

  m_poDevScan = new CDevScan(m_poDevGonDet,
			     m_poDevGonCrys,
			     m_poDevDet,
			     m_poDevShutter,
			     m_poDevCounter);
  nStat = m_poDevScan->nInit();
  m_nNextScan = m_nNumScans + 1;
  if (DEV_SUCCESS != nStat)
    {
      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
      vPutMessage("Scan init problem!\n" + m_sStatusMsg, 1);
    }
  else
    vPutMessage("Scan device initialized!", 0);
  XtSetSensitive(_pbExpose,  False);
  XtSetSensitive(XmOptionButtonGadget(_omExpose), False);

  (void) nUpdateCurrentValues();   // This will sensitize things depending on 
                                   // result of polling

    // End user code block <vFileNewCB>
}

void MainWindow::vExitCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vExitCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vExitCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vExitCB>
  vDestroy();
  exit (0);
    // End user code block <vExitCB>
}

void MainWindow::vEditHeaderCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vEditHeaderCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vEditHeaderCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vEditHeaderCB>
  if (w == _pbEditHeader)
    {
      _cUIheaderEdit->vSetHeader(m_poDefaultHeader);
      _cUIheaderEdit->manage();
    }
    // End user code block <vEditHeaderCB>
}

void MainWindow::vEditClearCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vEditClearCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vEditClearCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vEditClearCB>
  if (w == _pbEditClearAll)
    {
      XmTextSetSelection(_twOutput, 0, XmTextGetLastPosition(_twOutput),
			 CurrentTime);
    }
#if (XmVersion >= 1002)
  XtVaSetValues(_twOutput, XmNeditable, True);
  XmTextRemove(_twOutput);
  XtVaSetValues(_twOutput, XmNeditable, False);
#else
  XmTextRemove(_twOutput);
#endif
  XmTextShowPosition(_twOutput, XmTextGetLastPosition(_twOutput));    

    // End user code block <vEditClearCB>
}

void MainWindow::vCollectScanCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vCollectScanCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vCollectScanCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vCollectScanCB>

  if (!XtIsManaged(_sdCollectScan))
    {
      // Any initialization required?

      // Copy current position to the datum pop-up dialog textField widgets

      char *pcText;
/*      
      pcText = XmTextFieldGetString(_tfCrysOmega);
      XmTextFieldSetString(_tfDatumOmega, pcText);
      XtFree(pcText);
      pcText = XmTextFieldGetString(_tfCrysChi);
      XmTextFieldSetString(_tfDatumChi, pcText);
      XtFree(pcText);
      pcText = XmTextFieldGetString(_tfCrysPhi); 
      XmTextFieldSetString(_tfDatumPhi, pcText);
      XtFree(pcText);
      pcText = XmTextFieldGetString(_tfDetDist);
      XmTextFieldSetString(_tfDatumDist, pcText);
      XtFree(pcText);
      pcText = XmTextFieldGetString(_tfDetTheta);
      XmTextFieldSetString(_tfDatumTheta, pcText);
      XtFree(pcText);
*/
      // Now if the current row has a blank datum, put current position in it.

      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nRelStart]);
      if ('\0' == *pcText)
	{
	  sprintf(m_a255cTemp, "%.3lf, %.3lf, %.3lf, %.3lf, %.3lf",
		  m_dCrysOmegaCurr, m_dCrysChiCurr, m_dCrysPhiCurr,
		  m_dDetDistCurr, m_dDetThetaCurr);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRelStart],
			       m_a255cTemp);
	}
      XtFree(pcText);

      // Now if the current row has a blank template, seq start, seq num,
      //     put the current main ones there
      // wavelength in there 
      
      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nTemplate]);
      if ('\0' == *pcText)
	{
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nTemplate],
			       m_sMainTemplate.string());
	}
      XtFree(pcText);

      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nSeqStart]);
      if ('\0' == *pcText)
	{
	  sprintf(m_a255cTemp, "%d", m_nMainSeqStart);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nSeqStart], m_a255cTemp);
	}
      XtFree(pcText);

      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nSeqIncr]);
      if ('\0' == *pcText)
	{
	  sprintf(m_a255cTemp, "%d", m_nMainSeqIncr);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nSeqIncr],
			       m_a255cTemp);
	}
      XtFree(pcText);

      // Now if the current row has a blank wavelength, put the current
      // wavelength in there 
      
      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nWavelength]);
      if ('\0' == *pcText)
	{
	  XtFree(pcText);
	  pcText = XmTextFieldGetString(_tfSource);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nWavelength], pcText);
	}
      XtFree(pcText);

      // Now if the current row has a blank exposure time, put the one from
      // mainwindow in there 
      
      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nRotTime]);
      if ('\0' == *pcText)
	{
	  XtFree(pcText);
	  pcText = XmTextFieldGetString(_tfExpTime);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRotTime], pcText);
	}
      XtFree(pcText);

      // Now if the current row has a blank rotation increment,
      // put the one from mainwindow in there 
      
      pcText = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nRotIncr]);
      if ('\0' == *pcText)
	{
	  XtFree(pcText);
	  pcText = XmTextFieldGetString(_tfExpWidth);
	  XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nRotIncr], pcText);
	}
      XtFree(pcText);

      XtManageChild(_sdCollectScan);
    }
    // End user code block <vCollectScanCB>
}

void MainWindow::vPopDialogCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vPopDialogCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vPopDialogCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vPopDialogCB>

  // Pop-up the dialog widget passed in clientData

  Boolean  argok=False;
  m_hFilePB = w;
  if (NULL != m_poDefaultHeader)
    {
      // Get size in bytes of the current image
      
      m_nDefaultImageSize = m_poDefaultHeader->nGetImageSize();
    }
  _cUIimagefileSelect->vSetImageSize(m_nDefaultImageSize);
  if (w == _pbFileOpen)
    {
      // File/Open... button

      // Manage selection control
     
      XtManageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_TEXT));

      XtManageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_SELECTION_LABEL));
      // Set OK button label

      XmString xsOKLabel;
      xsOKLabel = (XmString)BX_CONVERT(_cUIimagefileSelect->baseWidget(),
				    "OK, Open", XmRXmString,
				    0, &argok);
      XtVaSetValues(_cUIimagefileSelect->baseWidget(),
		    XmNokLabelString, xsOKLabel, NULL);
      XmStringFree(xsOKLabel);

      // Set mode switch for use in the callback and then manage

      _cUIimagefileSelect->manage();
    }
  else if (   (w == _pbTemplate) 
	   || (w == _pbScanTemplate) )
    {
      // Collect/Scan/Template... button

      XtUnmanageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_TEXT));
      XtUnmanageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_SELECTION_LABEL));
      
      XmString xsOKLabel;
      xsOKLabel = (XmString)BX_CONVERT(_cUIimagefileSelect->baseWidget(),
				    "Set template\n& seq info", XmRXmString,
				    0, &argok), 
      XtVaSetValues(_cUIimagefileSelect->baseWidget(),
		    XmNokLabelString, xsOKLabel, NULL);
      XmStringFree(xsOKLabel);

      if (w == _pbScanTemplate)
	{
	  // Copy main template, seq start, seq incr to _cUIimagefileSelect  

	  _cUIimagefileSelect->vSetSeqStart(m_nMainSeqStart);
	  _cUIimagefileSelect->vSetSeqIncr(m_nMainSeqIncr);
	  _cUIimagefileSelect->vSetNumImgs(m_nMainNumImgs);
	  _cUIimagefileSelect->vSetTemplate(m_sMainTemplate);
	}
      else if (w == _pbTemplate)
	{
	  // Copy current scan row template, seq start, seq incr
	  //   to _cUIimagefileSelect  

	  XmString sxTemp;
	  char     *pcTemp;
	  pcTemp = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nTemplate]);
	  _cUIimagefileSelect->vSetTemplate((Cstring)pcTemp);
	  XtFree(pcTemp);

	  int nStat, nTemp, nTemp2;
	  pcTemp = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nSeqStart]);
	  if ('\0' != *pcTemp)
	    {
	      nStat = sscanf(pcTemp, "%d, %d", &nTemp, &nTemp2);
	      if (1 <= nStat)
		_cUIimagefileSelect->vSetSeqStart(nTemp);
	      if (2 == nStat)
		_cUIimagefileSelect->vSetNumImgs(nTemp2);
	      else
		_cUIimagefileSelect->vSetNumImgs(1);
	    }
	  XtFree(pcTemp);
	  pcTemp = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nSeqIncr]);
	  if ('\0' != *pcTemp)
	    {
	      nStat = sscanf(pcTemp, "%d", &nTemp);
	      if (1 == nStat)
		_cUIimagefileSelect->vSetSeqIncr(nTemp);
	    }
	  XtFree(pcTemp);
	}
      _cUIimagefileSelect->manage();      
    }
  else if ( (w == _pbWavelength) || (w == _pbSourceChoose) )
    {
      char    *pcTemp;
      if (w == _pbSourceChoose)
	{
	  // Copy string in _tfSource to _cUIwavelength selection

	  pcTemp = XmTextFieldGetString(_tfSource);
	}
      else if (w == _pbWavelength)
	{
	  // Copy string in m_ptCurrentTextRow->wTextField[ms_nWavelength], 
	  //   to _cUIwavelength selection

	  pcTemp = XmTextFieldGetString(m_ptCurrentTextRow->wTextField[ms_nWavelength]);
	}
      _cUIwavelength->vSetValues(pcTemp);
      XtFree(pcTemp);
    _cUIwavelength->manage();      
    }
  else if (w == _pbFileSaveAs)
    {
      // File/Save As... button

      XtManageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_TEXT));

      XtManageChild(XmSelectionBoxGetChild(_cUIimagefileSelect->baseWidget(),
					   XmDIALOG_SELECTION_LABEL));

      XmString xsOKLabel;
      xsOKLabel = (XmString)BX_CONVERT(_cUIimagefileSelect->baseWidget(),
				    "OK, Save", 
				    XmRXmString, 0, &argok);
      XtVaSetValues(_cUIimagefileSelect->baseWidget(),
		    XmNokLabelString, xsOKLabel, NULL);
      XmStringFree(xsOKLabel);
      _cUIimagefileSelect->manage();      
    }

  else if (w == _pbViewHeader)
    {
      _cUIviewheader->vSetString(m_poDefaultHeader->sGet().string());
      _cUIviewheader->manage();
    }
  else if (w == _pbDatum)
    {
      vScanDatumCB(_pbDatum, NULL, NULL);
    }
  else if (w == _pbEditDetector)
    {
      _cUIeditdetector->vSetValues(*m_poDefaultHeader);
      _cUIeditdetector->manage();
    }
  else if (w == _pbHelpAbout)
    {
      Cstring sTemp;
      sTemp = (Cstring)"HelpAbout$$dtcollect\nHelp About...\n"
	      + (Cstring) D_K_DTREKVersion
	      + (Cstring)"\nCopyright (c) 2000, 1999-1995 Molecular Structure Corp.";
      vPostError(_mbError, (XtPointer)sTemp.string(), NULL);
    }
  else if (clientData != (XtPointer)0)
    {
      // Clientdata has the widget to manage
      Widget w1 = (Widget)clientData;
      if (XtIsWidget(w1)) XtManageChild(w1);
    }
    // End user code block <vPopDialogCB>
}

void MainWindow::vMainCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vMainCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vMainCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vMainCB>

  // Main callback for the buttons in the MainWindow
  // that activate hardware devices.
  //
  // Install a timeout callback to monitor
  // hardware, then call nUpdateCurrentValues to get things going.
  // nUpdateCurrentValues will restore other button sensitivity when things
  // stop moving.  
  // nUpdateCurrentValues will also change button label and colors.

  // If there is a timeoutproc or workproc, then remove it

  int    nStat;
  int    nActive = 0;            // Flag whether something was activated
  double dSet;

  if (0 != m_hIntervalId)
    {
      XtRemoveTimeOut(m_hIntervalId);
      m_hIntervalId = 0;
    }

  if ( (w == _pbShutter) || (w == _pbShutterYes) )
    {
      if (NULL != m_poDevShutter)
	{
	  if (0 == m_nShutterWasActive)
	    {
	      if (w == _pbShutter)
		{
		  // Popup extra query and return
		  vPopupShutterCB(w, clientData, callData);
		  return;
		}
	      // Here if _pbShutterYes was pressed!
	      // Shutter should be closed, so open it, maybe prompt response?

	      XtSetSensitive(_pbExpose,      False);
	      XtSetSensitive(_pbCrysMove,    False);
	      XtSetSensitive(_pbDetMove,     False);
	      XtSetSensitive(_pbSourceMove,  False);
	      XtSetSensitive(_pbCollectScan, False);
	      XtSetSensitive(XmOptionButtonGadget(_omExpose), False);

	      vSetLabel(_pbShutter, NULL, "red");
	      m_nShutterWasActive = 3;
	      nStat = m_poDevShutter->nOpen(1);
              if (DEV_SUCCESS != nStat)
                {
		  m_poDevShutter->vGetStatusMsg(&m_sStatusMsg);
                  vPutMessage("Shutter open problem!\n" + m_sStatusMsg, 1);
                }
              else
                {
                  vPutMessage("Shutter opened.");
                }
	      nActive++;
	    }
	  else if (1 == m_nShutterWasActive)
	    {
	      // Shutter should be open, so close it

	      nStat = m_poDevShutter->nClose(1);
              if (DEV_SUCCESS != nStat)
                {
		  m_poDevShutter->vGetStatusMsg(&m_sStatusMsg);
                  vPutMessage("Shutter close problem!\n" + m_sStatusMsg, 1);
                }
              else
                {
                  vPutMessage("Shutter closed.");                
                }
	    }
	  else if (2 == m_nShutterWasActive)
	    {
	      nStat = m_poDevShutter->nInit();
              if (DEV_SUCCESS != nStat)
		{
		  m_poDevShutter->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Shutter init problem!\n" + m_sStatusMsg, 1);
		}
              else
                vPutMessage("Shutter initialized!", 0);
	    }
	}
    }
  else if (   (w == _pbExpose) 
	   || (w == _sdCollectScan) )
    {
      if (NULL != m_poDevScan)
	{
	  if (0 == m_nScanWasActive)
	    {
	      // Expose inactive, so activate it, and desensitive other controls

	      XtSetSensitive(_pbShutter,     False);
	      XtSetSensitive(_pbCrysMove,    False);
	      XtSetSensitive(_pbDetMove,     False);
	      XtSetSensitive(_pbSourceMove,  False);
	      XtSetSensitive(_pbCollectScan, False);
	      XtSetSensitive(XmOptionButtonGadget(_omExpose), False);

	      vSetLabel(_lbExpTimeCurr, "0.000", "?");
	      vSetLabel(_lbExpWidthCurr, "0.000", "?");
	      vSetLabel(_lbScanSeqCurr, " ", "?");
	      vSetLabel(_lbScanLastFileCurr, " ", "?");
	      vSetLabel(_lbScanNumImgsCurr, "0", "?");

	      if (w == _pbExpose)
		{
		  vSetLabel(w, NULL, "yellow");
		  vGetRequestedValues(1);            // Copy requested values
		                                     // to scan object
//+jwp 17-Nov-1999
		  // Check if current position is the moveto position
		  // If not, pop-up a MODAL dialog to ask whether to proceed
		  // or not.  If NO, then exit from this routine.

		  m_nMainWarnPosition = 0;
		  if (   (m_dCrysOmegaCurr != m_dCrysOmega)
		      || (m_dCrysChiCurr   != m_dCrysChi)
		      || (m_dCrysPhiCurr   != m_dCrysPhi)
		      || (m_dDetDistCurr   != m_dDetDist)
		      || (m_dDetThetaCurr  != m_dDetTheta) 
		      || (m_dSourceCurr    != m_dSource) )
		    {
		      m_nMainWarnPosition = 2;

		      Display *dpy = XtDisplay(_mbWarnPosition);
		      XtManageChild(_mbWarnPosition);
		      XSync(dpy, 0);
		      XFlush(dpy);
		      XmUpdateDisplay(_mbWarnPosition);
		      
		      // Probably should have IMPLICIT abort in 1 minute!


		      Window   win = XtWindow(_mbWarnPosition);
		      Window   winyes = XtWindow(
				      XmMessageBoxGetChild(_mbWarnPosition,
							   XmDIALOG_OK_BUTTON));
		      Window   winno = XtWindow(
				      XmMessageBoxGetChild(_mbWarnPosition,
							   XmDIALOG_CANCEL_BUTTON));
		      XEvent event;
		      while (2 == m_nMainWarnPosition)
			{
			  if (XCheckMaskEvent(dpy, 
					        ButtonPressMask 
					      | ButtonReleaseMask 
					      | ButtonMotionMask
					      | KeyPressMask 
					      | KeyReleaseMask,
					      &event))
			    {
			      if (   (event.xany.window == win)
				  || (event.xany.window == winyes)
				  || (event.xany.window == winno) )
				XtDispatchEvent(&event);
			      else
				XBell(dpy, 75);
			    }
			  XSync(XtDisplay(_mbWarnPosition), 0);
			  XFlush(dpy);
			  XmUpdateDisplay(_mbWarnPosition);
			}
		      if (0 != m_nMainWarnPosition)
			{
			  vPutMessage("WARNING!   EXPOSE aborted!\n"
                                      "Use MOVE buttons to move goniometers.\n",
				      1);
			  vSetLabel(_pbExpose, NULL, "?");
			  return;
			}
		      else
			{
			  vPutMessage("WARNING!\nCURRENT not equal to REQUESTED" 
				      " crystal goniometer or detector or source values!\n",
				      1);
			}
		    }
//-jwp 17-Nov-1999

		  // Make sure header has updated values

		  m_poScan->vSetWavelength(m_dSourceCurr);
		  m_poScan->vSetWavelengthOpts(m_nSourceOption, m_nSourceOptimize);
		  float a3fTemp[3], a2fTemp[2];
		  a2fTemp[0] = 1;
		  a2fTemp[1] = (float) m_dSourceCurr;
		  (void) m_poDefaultHeader->nReplaceValue(
				    CUIheaderEdit::ms_sSourceWavelength, 
				    2, a2fTemp);

		  int n1 = 3;
		  int n2 = 2;
		  m_poScan->nGetDatum(&n1, a3fTemp, &n2, a2fTemp);

		  m_poGoniometer = new Cgoniometer(*m_poDefaultHeader,
						   Ccrystal::ms_sCrystalPrefix);
		  if (m_poGoniometer->bIsAvailable())
		    {
		      // Should this be the current xtal position or the datum
		      // position?

		      m_poGoniometer->nSetDatum(n1, a3fTemp);
		      m_poGoniometer->nUpdateHeader(m_poDefaultHeader,
						    Ccrystal::ms_sCrystalPrefix);
		      float a3fVec[3];
		      n1 = m_poGoniometer->nGetRotVector(
			      m_poGoniometer->nGetNum(
			      m_poScan->m_poRotation->sGetName()),
							 (float *)a3fVec);
		      if (0 == n1)
			m_poScan->m_poRotation->vSetVector((float *)a3fVec);
		    }
		  delete m_poGoniometer;
		  m_poGoniometer = NULL;

		  // Update detector position ...
		  // The next construction is bad because it forces the
		  // spatial distortion and nonunf files to be read in, even
		  // if we do not require it

		  m_poDetector = new Cdetector(*m_poDefaultHeader,
					       "", FALSE, FALSE);
		  if (m_poDetector->bIsAvailable())
		    {
		      // Well this certainly needs more encapsulation!

		      m_poDetector->m_poGoniometer->nSetDistance(m_dDetDistCurr);
		      m_poDetector->m_poGoniometer->nSetSwing(m_dDetThetaCurr);
		      m_poDetector->m_poGoniometer->nUpdateHeader(
					m_poDefaultHeader,
					m_poDetector->sGetPrefix());
		    }
		  delete m_poDetector;
		  m_poDetector = NULL;

		  nStat = m_poScan->nUpdateHeader(m_poDefaultHeader);
		  nStat = m_poDevScan->nSetHeader(*m_poDefaultHeader);

		  // The following call to nSetup will move the detector
		  // and the crystal goniometer to their starting positions

		  nStat = m_poDevScan->nSetup(m_poScan);
                  if (DEV_SUCCESS != nStat)
                    {
		      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
                      vPutMessage("Scan Setup problem!\n" + m_sStatusMsg, 1);
                    }
                  else
		    {
		      m_dExpTimeCurr = 0.0;
		      m_dExpWidthCurr = 0.0;
		      vSetLabel(w, NULL, "red");
		      m_nScanWasActive = 3;
		      m_poScan->vInitSeqNum();  // Init seq num to start
		      nStat = m_poDevScan->nStart();
//		      (void) m_poDefaultHeader->nWrite("jim.head");
                      if (DEV_SUCCESS != nStat)
			{
			  m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
			  vPutMessage("Scan start problem!\n" + m_sStatusMsg, 1); 
			}
		      nActive++;
		    }
		}
	      else if (w == _sdCollectScan)
		{
		  // Need to transfer scan info in the scan table
		  // to the member scan variable before the
		  // call to setup the scan

		  vScanRowColor(m_nPrevRow, "?");  // Restore background of prev

		  while (m_nNextScan < m_nNumScans)
		    {
		      // Get the next scan that has a valid mode

		      vScanRowGetValues(m_poScan, m_nNextScan);
		      if (eScanMode_Unknown == m_poScan->eGetMode())
			{
			  m_nNextScan++;
			  sprintf(m_a255cTemp,
				  "Scan %d ignored: mode unknown.\n", 
				  m_nNextScan);
			  vPutMessage(m_a255cTemp, 0);
			}
		      else
			break;  // Leave while loop
		    }

		  if (m_nNextScan < m_nNumScans)
		    {
		      vSetLabel(_pbExpose, NULL, "yellow");
		      vScanRowColor(m_nNextScan, "yellow");

		      if (NULL != m_poDevSource)
			{
			  // Move to the correct wavelength
			  m_dSource = m_poScan->fGetWavelength();
			  if (100.0 < m_dSource)
			    {  
			      // Convert from eV to Anstroms

			      m_dSource = m_poDevSource->ms_dFactor / m_dSource;
			      sprintf(m_a255cTemp, 
				    "Requested source wavelength is %8.5lf Angstroms.",
				      m_dSource);
                              vPutMessage(m_a255cTemp);
			    }
			  else if (0.0 < m_dSource)
			    {
			      sprintf(m_a255cTemp, 
				      "Requested source wavelength is %8.2lf eV.",
				      m_poDevSource->ms_dFactor / m_dSource); 
			      vPutMessage(m_a255cTemp);
			    }
			  else
			    {
			      vPutMessage("Illegal source value!", 1);
			    }
			  nStat = m_poDevSource->nSetRequestedWavelength(m_dSource);
                          if (DEV_SUCCESS != nStat)
                            {
			      m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
                              vPutMessage("Source set wavelength problem!\n"
					  + m_sStatusMsg, 1);
                            }
                          else
			    {
			      nStat = m_poDevSource->nGetSetWavelength(&dSet);
                              if (   (DEV_SUCCESS != nStat)
                                  || (dSet != m_dSource) )
                                {
				  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
                                  vPutMessage("Source get set wavelength problem!"
					      + m_sStatusMsg, 1);
                                }
                              else
                                {
				  nStat = m_poDevSource->nSetup();
                                  if (DEV_SUCCESS != nStat)
                                    {
				      m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
                                      vPutMessage("Source setup problem!\n" + m_sStatusMsg, 1);
                                    }
                                  else
				    {
				      m_dExpWidth = 0.0;
				      vUpdateCurrentScan(1);
				      m_nSourceWasActive = 3;
				      nStat = m_poDevSource->nStart();
                                      if (DEV_SUCCESS != nStat)
					{
					  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
					  vPutMessage("Source start problem!\n"
						      + m_sStatusMsg, 1);
					}
                                      else
                                        {
					  nStat = m_poDevSource->nWait();
                                          if (DEV_SUCCESS != nStat)
					    {
					      m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
					      vPutMessage("Source wait problem!\n"
							  + m_sStatusMsg, 1);
					    }
					}
				    }
				}
			    }
			}

		      // Make sure header has updated values

		      float a3fTemp[3], a2fTemp[2];
		      int n1, n2;
		      m_poScan->vSetWavelength(m_dSourceCurr);
		      m_poScan->vSetWavelengthOpts(m_nSourceOption, m_nSourceOptimize);
		      a2fTemp[0] = 1;
		      a2fTemp[1] = (float) m_dSourceCurr;
		      // This could also be done with m_poSource->nUpdateHeader(...)
		      (void) m_poDefaultHeader->nReplaceValue(
				      CUIheaderEdit::ms_sSourceWavelength, 
				      2, a2fTemp);

		      n1 = 3;
		      n2 = 2;
		      m_poScan->nGetDatum(&n1, a3fTemp, &n2, a2fTemp);
//		      (void) m_poDefaultHeader->nReplaceValue(
//				     Ccrystal::ms_sCrystalPrefix + Cgoniometer::ms_sGonioValues,
//                                   n1, a3fTemp);

		      m_poGoniometer = new Cgoniometer(*m_poDefaultHeader,
						       Ccrystal::ms_sCrystalPrefix);
		      if (m_poGoniometer->bIsAvailable())
			{
			  m_poGoniometer->nSetDatum(n1, a3fTemp);
			  m_poGoniometer->nUpdateHeader(m_poDefaultHeader,
							Ccrystal::ms_sCrystalPrefix);
			  float a3fVec[3];
			  n1 = m_poGoniometer->nGetRotVector(
			          m_poGoniometer->nGetNum(
			          m_poScan->m_poRotation->sGetName()),
							     (float *)a3fVec);
			  if (0 == n1)
			    m_poScan->m_poRotation->vSetVector((float *)a3fVec);
			}
			  delete m_poGoniometer;
		      m_poGoniometer = NULL;

		      // Update detector position ...
		      
		      m_poDetector = new Cdetector(*m_poDefaultHeader,
						   "", FALSE, FALSE);
		      if (m_poDetector->bIsAvailable())
			{
			  // Do we use current values or the datum values?

			  m_poDetector->m_poGoniometer->nSetDistance(a2fTemp[0]);
			  m_poDetector->m_poGoniometer->nSetSwing(a2fTemp[1]);
			  m_poDetector->m_poGoniometer->nUpdateHeader(
					m_poDefaultHeader,
					m_poDetector->sGetPrefix());
			}
		      delete m_poDetector;
		      m_poDetector = NULL;

		      nStat = m_poScan->nUpdateHeader(m_poDefaultHeader);
		      nStat = m_poDevScan->nSetHeader(*m_poDefaultHeader);
//		      m_poDefaultHeader->nWrite("dtcollectscan.head");
		      nStat = m_poDevScan->nSetup(m_poScan);
                      if (DEV_SUCCESS != nStat)
                        {
			  m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
                          vPutMessage("Scan setup problem!\n" + m_sStatusMsg,
				      1);
                          m_nNextScan = m_nNumScans + 1;
                        }
                      else
			{
			  m_dExpTimeCurr = 0.0;
			  m_dExpWidthCurr = 0.0;
			  vSetLabel(_pbExpose, NULL, "red");
			  vScanRowColor(m_nNextScan, "red");
			  m_nScanWasActive = 3;
			  m_poScan->vInitSeqNum();  // Init seq num to start
			  nStat = m_poDevScan->nStart();
                          if (DEV_SUCCESS != nStat) 
                            {
			      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
                              vPutMessage("Scan start problem!\n" + m_sStatusMsg,
					  1);
                              m_nNextScan = m_nNumScans + 1;
                            }
			  else
			    {
			      m_nPrevScan = m_nNextScan;
			      m_nNextScan++;
			    }
			  nActive++;
			}
		    }
		}
	    }
	  else if (1 == m_nScanWasActive)
	    {
	      // Expose active, so abort
	      
	      vScanRowColor(m_nPrevScan, "yellow");
	      nStat = m_poDevScan->nAbort();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Scan abort problem!" + m_sStatusMsg, 1);
		}
	    }
	  else if (2 == m_nScanWasActive)
	    {
	      // Initialize scan device

	      nStat = m_poDevScan->nInit();
	      vScanRowColor(m_nPrevScan, "?");
	      vScanRowColor(m_nPrevRow, "white");
	      m_nNextScan = m_nNumScans + 1;
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Scan init problem!\n" + m_sStatusMsg, 1);
		}
	      else
                vPutMessage("Scan device initialized!", 0);
	    }
	}
    }
  else if (w == _pbCrysMove)
    {
      if (NULL != m_poDevGonCrys)
	{
	  if (0 == m_nCrysGonWasActive)
	    {
	      // Crystal goniometer move inactive, so activate it, desensitize
	      //                                                  other controls
	      
	      XtSetSensitive(_pbShutter,     False);
	      XtSetSensitive(_pbExpose,      False);
	      XtSetSensitive(_pbDetMove,     False);
	      XtSetSensitive(_pbSourceMove,  False);
	      XtSetSensitive(_pbCollectScan, False);

	      XtSetSensitive(XmOptionButtonGadget(_omExpose), False);
	      nStat = m_poDevGonCrys->nSetRequestedSpeed((int)0, (double)0.0);
	      nStat = m_poDevGonCrys->nSetRequestedPosition((int)0, 
							    m_dCrysOmega);
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("CrysGoniom set omega problem!\n" + m_sStatusMsg,
			      1);
		}
	      else
		{
		  nStat = m_poDevGonCrys->nGetSetPosition(0, &dSet);
		  if ( (DEV_SUCCESS != nStat) || (dSet != m_dCrysOmega) )
		    {
		      m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
		      vPutMessage("CrysGoniom get set omega problem!\n"
				  + m_sStatusMsg, 1);
		    }
		  else
		    {
		      nStat = m_poDevGonCrys->nSetRequestedSpeed((int)1, (double)0.0);
		      nStat = m_poDevGonCrys->nSetRequestedPosition((int)1, 
								    m_dCrysChi);
		      if (DEV_SUCCESS != nStat)
			{
			  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
			  vPutMessage("CrysGoniom set chi problem!\n"
				      + m_sStatusMsg, 1);
			}
		      else
			{
			  nStat = m_poDevGonCrys->nGetSetPosition(1, &dSet);
			  if (   (DEV_SUCCESS != nStat) 
			      || (dSet != m_dCrysChi) )
			    {
			      m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
			      vPutMessage("CrysGoniom get set chi problem!\n"
					  + m_sStatusMsg, 1);
			    }
			  else
			    {
			      nStat = m_poDevGonCrys->nSetRequestedSpeed(2, (double)0.0);
			      nStat = m_poDevGonCrys->nSetRequestedPosition(2,
									    m_dCrysPhi);
			      if (DEV_SUCCESS != nStat)
				{
				  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
				  vPutMessage("CrysGoniom set phi problem!\n"
					      + m_sStatusMsg, 1);
				}
			      else
				{
				  nStat = m_poDevGonCrys->nGetSetPosition(2, 
									  &dSet);
				  if (   (DEV_SUCCESS != nStat) 
				      || (dSet != m_dCrysPhi) )
				    {
				      m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
				      vPutMessage("CrysGoniom get set phi problem!\n"
						  + m_sStatusMsg, 1);
				    }
				  else
				    {
				      vSetLabel(_pbCrysMove, NULL, "yellow");
				      nStat = m_poDevGonCrys->nSetup();
				      if (DEV_SUCCESS != nStat)
					{
					  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
					  vPutMessage("CrysGoniom setup problem!\n"
						      + m_sStatusMsg, 1);
					}
				      else
					{
					  vSetLabel(_pbCrysMove, NULL, "red");
					  m_nCrysGonWasActive = 3;
					  XmUpdateDisplay(_pbCrysMove);
					  nStat = m_poDevGonCrys->nStart();
					  if (DEV_SUCCESS != nStat)
					    {
					      m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
					      vPutMessage("CrysGoniom start problem!\n"
							  + m_sStatusMsg, 1);
					    }
					  nActive++;
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	  else if (1 == m_nCrysGonWasActive)
	    {
	      // Crystal goniometer move active, so abort
	      
	      nStat = m_poDevGonCrys->nAbort();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("CrysGoniom abort problem!\n" + m_sStatusMsg, 1);
		}
	    }
	  else if (2 == m_nCrysGonWasActive)
	    {
	      // Initialize crystal goniometer
	      
	      nStat = m_poDevGonCrys->nInit();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("CrysGoniom init problem!\n" + m_sStatusMsg, 1);
		}
	      else
		vPutMessage("Crystal goniometer initialized!", 0);
	    }
	}
    }
  else if (w == _pbDetMove)
    {
      if (NULL != m_poDevGonDet)

	{
	  if (0 == m_nDetGonWasActive)
	    {
	      // Detector goniometer move inactive, so activate it

	      XtSetSensitive(_pbShutter,     False);
	      XtSetSensitive(_pbCrysMove,    False);
	      XtSetSensitive(_pbExpose,      False);
	      XtSetSensitive(_pbSourceMove,  False);
	      XtSetSensitive(_pbCollectScan, False);
	      XtSetSensitive(XmOptionButtonGadget(_omExpose), False);

	      nStat = m_poDevGonDet->nSetRequestedPosition(0, m_dDetDist);
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Detgoniom set dist problem!\n" + m_sStatusMsg, 1);
		}
	      else
		{
		  nStat = m_poDevGonDet->nGetSetPosition(0, &dSet);
		  if (   (DEV_SUCCESS != nStat)
		      || (dSet != m_dDetDist) )
		    {
		      m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
		      vPutMessage("Detgoniom get set dist problem!\n" 
				  + m_sStatusMsg, 1);
		    }
		  else
		    {
		      nStat = m_poDevGonDet->nSetRequestedPosition(1, m_dDetTheta);
		      if (DEV_SUCCESS != nStat)
			{
			  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
			  vPutMessage("Detgoniom set theta problem!\n"
				      + m_sStatusMsg, 1);
			}
		      else
			{
			  nStat = m_poDevGonDet->nGetSetPosition(1, &dSet);
			  if (   (DEV_SUCCESS != nStat) 
			      || (dSet != m_dDetTheta) )
			    {
			      m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
			      vPutMessage("Detgoniom set get theta problem!\n"
					  + m_sStatusMsg, 1);
			    }
			  else
			    {
			      vSetLabel(_pbDetMove, NULL, "yellow");
			      nStat = m_poDevGonDet->nSetup();
			      if (DEV_SUCCESS == nStat)
				{
				  vSetLabel(_pbDetMove, NULL, "red");
				  m_nDetGonWasActive = 3;
				  nStat = m_poDevGonDet->nStart();
				  if (DEV_SUCCESS != nStat)
				    {
				      m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
				      vPutMessage("DetGoniom start problem!\n"
						  + m_sStatusMsg , 1);
				    }
				  nActive++;
				}
			    }
			}
		    }
		}
	    }
	  else if (1 == m_nDetGonWasActive)
	    {
	      // Detector goniometer move active, so abort

	      nStat =  m_poDevGonDet->nAbort();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("DetGoniom abort problem!\n" + m_sStatusMsg, 1);
		}
	    }
	  else if (2 == m_nDetGonWasActive)
	    {
	      // Detector goniometer needs init

	      nStat = m_poDevGonDet->nInit();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("DetGoniom init problem!\n" + m_sStatusMsg, 1);
		}
	      else
		vPutMessage("Detector goniometer initialized!", 0);
	    }
	}
    }
  else if (w == _pbSourceMove)
    {
      if (NULL != m_poDevSource)
	{
	  if (0 == m_nSourceWasActive)
	    {
	      // Source move inactive, so activate it
	      
	      XtSetSensitive(_pbShutter,     False);
	      XtSetSensitive(_pbCrysMove,    False);
	      XtSetSensitive(_pbDetMove,     False);
	      XtSetSensitive(_pbExpose,      False);
	      XtSetSensitive(_pbCollectScan, False);
	      XtSetSensitive(XmOptionButtonGadget(_omExpose), False);
	      int    nStat = 1;
	      if (m_dSource > 100.0)  // Convert from eV to Anstroms
		{
		  m_dSource = m_poDevSource->ms_dFactor / m_dSource; 
		  sprintf(m_a255cTemp, 
			  "Requested source wavelength is %8.5lf Angstroms.",
			  m_dSource);
		  vPutMessage(m_a255cTemp);
		}
	      else if (0.0 < m_dSource)
		{
		  sprintf(m_a255cTemp, 
			  "Requested source wavelength is %8.2lf eV.",
			  m_poDevSource->ms_dFactor / m_dSource); 
		  vPutMessage(m_a255cTemp);
		}
	      else
		{
		  vPutMessage("Illegal source value!", 1);
		}
	      nStat = m_poDevSource->nSetRequestedWavelength(m_dSource);
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Source set wavelength problem!\n"
			      + m_sStatusMsg, 1);
		}
	      else
		{
		  nStat = m_poDevSource->nGetSetWavelength(&dSet);
		  if (   (DEV_SUCCESS != nStat) 
		      || (dSet != m_dSource) )
		    {
		      m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
		      vPutMessage("Source get set wavelength problem!\n"
				  + m_sStatusMsg, 1);
		    }
		  else
		    {
		      vSetLabel(_pbSourceMove, NULL, "yellow");
		      nStat = m_poDevSource->nSetup();
		      if (DEV_SUCCESS != nStat)
			{
			  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
			  vPutMessage("Source setup problem!\n"
				      + m_sStatusMsg, 1);
			}
		      else
			{
			  vSetLabel(_pbSourceMove, NULL, "red");
			  m_nSourceWasActive = 3;
			  nStat = m_poDevSource->nStart();
			  if (DEV_SUCCESS != nStat)
			    {
			      m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
			      vPutMessage("Source start problem!\n"
					  + m_sStatusMsg, 1);
			    }
			  nActive++;
			}
		    }
		}
	    }
	  else if (1 == m_nSourceWasActive)
	    {
	      // Source move was active, so abort
	      
	      nStat = m_poDevSource->nAbort();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Source abort problem!\n" + m_sStatusMsg, 1);
		}
	    }
	  else if (2 == m_nSourceWasActive)
	    {
	      // Source needs init

	      nStat = m_poDevSource->nInit();
	      if (DEV_SUCCESS != nStat)
		{
		  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
		  vPutMessage("Source init problem!\n" + m_sStatusMsg, 1);
		}
	      else
		vPutMessage("Source device initialized!", 0);
	    }
	}
    }

#ifdef MSVC
   vWorkProc1(GetSafeHwnd(), 0, m_unTimerId, 0);
#else
   vWorkProc1(this, NULL);
#endif   
/*
  if (0 != nUpdateCurrentValues())
    {
      // Something still active, add timeout proc to poll the hardware

      m_hIntervalId = XtAppAddTimeOut(m_hAppContext, (unsigned long)800, 
				      vWorkProc1, (XtPointer)this);
    }
*/

    // End user code block <vMainCB>
}

void MainWindow::vExposeTypeCBCallback(Widget w, 
    XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vExposeTypeCB(w, (XtPointer) data->client_data, callData);
}

void MainWindow::vExposeTypeCB(Widget w, XtPointer clientData, XtPointer callData)
{
    
    // Begin user code block <vExposeTypeCB>
  long nUdata = (long) clientData;
  
  // Store the current choice in the option menu userData resource

  XtVaSetValues(_omExpose, XmNuserData, nUdata, NULL);
  if ( (0 == nUdata) || (1 == nUdata) )
    {
      // Still, so desensitize some widgets
      XtSetSensitive(_tfExpWidth,     FALSE);
      XtSetSensitive(_lbExpWidth,     FALSE);
      XtSetSensitive(_lbExpWidthCurr, FALSE);
    }
  else 
    {
      // Rotation, so sensitize some widgets
      XtSetSensitive(_tfExpWidth,     TRUE);
      XtSetSensitive(_lbExpWidth,     TRUE);
      XtSetSensitive(_lbExpWidthCurr, TRUE);
    }

  vGetRequestedValues();  // Update requested values

    // End user code block <vExposeTypeCB>
}

// Begin user code block <tail>
void
MainWindow::vRaiseMBError()
{
/*
  XFlush(XtDisplay(_mbError));
  XmUpdateDisplay(_mbError);

  if (XtIsManaged(_mbError))
    {
      // Bring error message box to top of main window

      XReparentWindow(XtDisplay(_mbError), XtWindow(XtParent(_mbError)),
		      XtWindow(baseWidget()), 0, 0);
      XRaiseWindow(XtDisplay(_mbError), XtWindow(_mbError));
      XFlush(XtDisplay(_mbError));
      XmUpdateDisplay(_mbError);
    }
*/
}
void
MainWindow::vScrollbarCBCallback(Widget w, 
				 XtPointer clientData, XtPointer callData)
{
    UICallbackStruct *data = (UICallbackStruct *) clientData;
    MainWindow *obj = (MainWindow *)data->object;
    obj->vScrollbarCB(w, data->client_data, callData);
}
void
MainWindow::vScrollbarCB (Widget w, XtPointer clientData, XtPointer callData)
{

  XmScrollBarCallbackStruct *data =  (XmScrollBarCallbackStruct *)callData;
  
  // Manipulate offset to _form18, 
  // but disable resizing on _form9 first, then restore resizing
  
  XtVaSetValues(_form9, XmNresizePolicy, XmRESIZE_NONE, NULL);
  XtVaSetValues(_form18, XmNleftOffset, 18-data->value, NULL);
  XtVaSetValues(_form9, XmNresizePolicy, XmRESIZE_ANY, NULL);
}

void
MainWindow::vScanRowCreate(void)
{
  // Create a row of textField widgets in form11 below the last row

  int i;        // Loop counter
  int nNewRow;
  tagTextRow *ptNewRow;

  // Allocate memory for the data structures

  tagTextRow **pptTemp;

  pptTemp = new tagTextRow* [m_nNumRows+1];
  for (i = 0; i < m_nNumRows; i++)
    {
      pptTemp[i] = m_pptTextRow[i];
    }
  delete [] m_pptTextRow;
  m_pptTextRow = pptTemp;
  m_pptTextRow[m_nNumRows] = new tagTextRow;
  nNewRow = m_nNumRows;
  ptNewRow = m_pptTextRow[m_nNumRows];
//  m_nCurrentRow = m_nNumRows;
//  m_ptCurrentTextRow = m_pptTextRow[m_nNumRows];
  m_nNumRows++;

  // Ok, the current row does not yet exist, so create it and manage it

  // Get label widget in the previous row
  
  Widget    wOnTop = m_pptTextRow[nNewRow-1]->wToggle;

  Cardinal  ac;
  Arg       args[20];
  Boolean   argok=False;

  Dimension nWidth, nHeight;
  int       nLOffset, nTOffset;
  Boolean   bSensitive;

  XtVaGetValues(wOnTop,
		XmNwidth,  &nWidth,
		XmNheight, &nHeight,
		XmNleftOffset, &nLOffset,
		XmNtopOffset, &nTOffset,
		NULL);
  ac = 0;
  XtSetArg(args[ac], XmNtraversalOn, False); ac++;
  XtSetArg(args[ac], XmNwidth, nWidth); ac++;
  XtSetArg(args[ac], XmNheight, nHeight); ac++;
  XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
  XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
  XtSetArg(args[ac], XmNtopWidget, wOnTop); ac++;
  XtSetArg(args[ac], XmNtopOffset, nTOffset); ac++;
  XtSetArg(args[ac], XmNleftOffset, nLOffset); ac++;
  XtSetArg(args[ac], XmNrecomputeSize, False); ac++;
  XtSetArg(args[ac], XmNset, False); ac++;
  XtSetArg(args[ac], XmNuserData, 100*nNewRow); ac++;
  XtSetArg(args[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
  XtSetArg(args[ac], XmNnavigationType, XmTAB_GROUP); ac++;
  XtSetArg(args[ac], XmNhighlightOnEnter, True); ac++;
  XtSetArg(args[ac], XmNalignment, XmALIGNMENT_CENTER); ac++;
  ptNewRow->wToggle = XmCreateToggleButton(_form11,
        "",
        args, 
        ac);
  XtManageChild(ptNewRow->wToggle);

  _clientDataStructs = new UICallbackStruct;           // Memory leak here
  _clientDataStructs->object = this;
  _clientDataStructs->client_data = (XtPointer)(100*nNewRow);
  XtAddCallback(ptNewRow->wToggle,
		XmNarmCallback,
		MainWindow::vScanToggleCBCallback,
		(XtPointer)_clientDataStructs);

  char cText[5];
  sprintf(cText, "%d", nNewRow+1);
  vSetLabel(ptNewRow->wToggle, cText);

  Widget wOnLeft = ptNewRow->wToggle;      // First leftWidget for attach.
  for (i = 0; i < 13; i++)
    {
      wOnTop = m_pptTextRow[nNewRow-1]->wTextField[i];  // topWidget for attach.

      // Get width, height and attachment offsets from same widget in
      // the previous row.

      XtVaGetValues(wOnTop,
		    XmNsensitive, &bSensitive,
		    XmNwidth,  &nWidth,
		    XmNheight, &nHeight, 
		    XmNleftOffset, &nLOffset,
		    XmNtopOffset, &nTOffset,
		    NULL);
      ac = 0;
      XtSetArg(args[ac], XmNsensitive, bSensitive); ac++;
      XtSetArg(args[ac], XmNwidth, nWidth); ac++;
      XtSetArg(args[ac], XmNheight, nHeight); ac++;
      XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
      XtSetArg(args[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
      XtSetArg(args[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
      XtSetArg(args[ac], XmNleftWidget, wOnLeft); ac++;
      XtSetArg(args[ac], XmNtopWidget, wOnTop); ac++;
      XtSetArg(args[ac], XmNtopOffset, nTOffset); ac++;
      XtSetArg(args[ac], XmNleftOffset, nLOffset); ac++;
      XtSetArg(args[ac], XmNuserData, i+100*nNewRow); ac++;
      ptNewRow->wTextField[i] = XmCreateTextField(_form11,
						  "",
						  args, 
						  ac);
      XtManageChild(ptNewRow->wTextField[i]);
      _clientDataStructs = new UICallbackStruct;
      _clientDataStructs->object = this;
      _clientDataStructs->client_data = (XtPointer)0;
      XtAddCallback(ptNewRow->wTextField[i],
		    XmNactivateCallback,
		    MainWindow::vTextFieldCBCallback,
		    (XtPointer)_clientDataStructs);
      XtAddCallback(ptNewRow->wTextField[i],
		    XmNlosingFocusCallback,
		    MainWindow::vTextFieldCBCallback,
		    (XtPointer)_clientDataStructs);
      XtAddCallback(ptNewRow->wTextField[i],
		    XmNlosingFocusCallback,
		    MainWindow::vUnPostHelpCallback,
		    (XtPointer)_clientDataStructs);

#if (XmVersion >= 1002)
      XtAddCallback(ptNewRow->wTextField[i],
		    XmNfocusCallback,
		    MainWindow::vTextFieldCBCallback,
		    (XtPointer)_clientDataStructs);
      ptNewRow->ptCBS[i] = m_pptTextRow[0]->ptCBS[i];
      XtAddCallback(ptNewRow->wTextField[i],
		    XmNfocusCallback,
		    MainWindow::vPostHelpCallback,
		    (XtPointer)ptNewRow->ptCBS[i]);
#endif
    
      wOnLeft = ptNewRow->wTextField[i];   // Get leftWidget for attachment
    }

  // Sensitize the Scan/Edit/Delete and Cut buttons because more than 1 row

  XtSetSensitive(_pbScanEditDelete, True);
  XtSetSensitive(_pbScanEditCut,    True);

  // Enlarge the scrolled window

  vScanViewCB((Widget)NULL, (XtPointer)0, (XtPointer)NULL);

  // Update which row is current
  vScanToggleCB(m_ptCurrentTextRow->wToggle, 
		(XtPointer)(m_nCurrentRow*100), (XtPointer)NULL);
}

void
MainWindow::vScanRowDelete(void)
{
  // Delete the last row of textField widgets in form11

  int i;        // Loop counter

  // Never let the first row be deleted if it is the only one!

  if (1 < m_nNumRows)
    {
      for (i = 12; i >=0; i--)
	{
	  // Destroy widgets in reverse order they were created
	  XtDestroyWidget(m_pptTextRow[m_nNumRows-1]->wTextField[i]);
	}
      XtDestroyWidget(m_pptTextRow[m_nNumRows-1]->wToggle);

      // Free memory for the data structures

      tagTextRow **pptTemp;

      m_nNumRows--;
      delete m_pptTextRow[m_nNumRows];
      pptTemp = new tagTextRow* [m_nNumRows];
      for (i = 0; i < m_nNumRows; i++)
	{
	  pptTemp[i] = m_pptTextRow[i];
	}
      delete [] m_pptTextRow;
      m_pptTextRow = pptTemp;
      if (m_nCurrentRow >= m_nNumRows)  m_nCurrentRow = m_nNumRows-1;
      m_ptCurrentTextRow = m_pptTextRow[m_nCurrentRow];

      // Desensitize the Scan/Edit/Delete and Cut buttons if only 1 row left
      if (1 >= m_nNumRows)
	{
	  XtSetSensitive(_pbScanEditDelete, False);
	  XtSetSensitive(_pbScanEditCut,    False);
	}

      // Shrink the scrolled window (maybe not)

      vScanViewCB((Widget)NULL, (XtPointer)1, (XtPointer)NULL);
    }
  vScanToggleCB(m_ptCurrentTextRow->wToggle, 
		(XtPointer)(m_nCurrentRow*100), (XtPointer)NULL);
}

void
MainWindow::vSetLabel(Widget w, char *pcNewText, char *pcNewColor)
{
  // Change the label of the widget label input as w to the
  // text specified in pcNewText

  static Arg  arg[1];                         // Make static so no malloc, free
  static Boolean  argok;                      // 
  if (NULL != pcNewText)
    {
      XmString xsString;
      xsString = (XmString)BX_CONVERT(w, pcNewText, XmRXmString, 0, &argok);
      XtSetArg(arg[0], XmNlabelString, xsString);
      if (argok) 
	XtSetValues(w, arg, 1);
      XmStringFree(xsString);
    }

  if (NULL != pcNewColor)
    {
      Pixel hBackground;
      if ('?' == *pcNewColor)   // Flag to set to background of parent
	{
	  XtVaGetValues(XtParent(w), XmNbackground, &hBackground, NULL);
	  argok = TRUE;
	}
      else
	{
	  hBackground = (Pixel) BX_CONVERT(w, pcNewColor, XmRPixel, 0, &argok);
	}
      if (argok)
	{
#if (XmVersion >= 1002)
	  XmChangeColor(w, hBackground);
#else
	  XtVaSetValues(w, XmNbackground, hBackground, NULL);
#endif
	}
    }
}

void
MainWindow::vScanRowColor(const int nRow, const char *pcColor)
{
  Cstring sColor;
  tagTextRow *ptRow;

  if ( (0 > nRow) || (m_nNumRows <= nRow) )
    return;  // Out-of-range

  ptRow = m_pptTextRow[nRow];

  if (NULL == pcColor)
    sColor = "?";
  else
    sColor = pcColor;

  vSetLabel(ptRow->wToggle, NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nShutter], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nRotStart], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nRotEnd], NULL,   sColor.string()); 
  vSetLabel(ptRow->wTextField[ms_nRotIncr], NULL,  sColor.string());
  vSetLabel(ptRow->wTextField[ms_nRotTime], NULL,  sColor.string());
  vSetLabel(ptRow->wTextField[ms_nRotAxis], NULL,  sColor.string());
  vSetLabel(ptRow->wTextField[ms_nTemplate], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nSeqStart], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nSeqIncr], NULL,  sColor.string());
  vSetLabel(ptRow->wTextField[ms_nRelStart], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nWavelength], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nNumOsc], NULL, sColor.string());
  vSetLabel(ptRow->wTextField[ms_nNumDarkIntvl], NULL, sColor.string());
}

void
MainWindow::vWavelengthCBCallback(XtPointer pObj,
				  const float fWave, 
				  const int nOption,
				  const int nOptimize)
{
  MainWindow *obj = (MainWindow *)pObj;
  obj->vWavelengthCB(fWave, nOption, nOptimize);
}

void
MainWindow::vWavelengthCB(const float fWave,
			    const int nOption, const int nOptimize)
{
  if (100.0 > fWave)
    sprintf(m_a255cTemp, "%.5f %c%c", fWave, 
	    CUIwavelength::ms_a4cWavOption[nOption], 
	    CUIwavelength::ms_a2cWavOptimize[nOptimize]);
  else
    sprintf(m_a255cTemp, "%.1f %c%c", fWave,
	    CUIwavelength::ms_a4cWavOption[nOption], 
	    CUIwavelength::ms_a2cWavOptimize[nOptimize]);

  if (m_hFilePB == _pbSourceChoose)
    {
      XmTextSetString(_tfSource, m_a255cTemp);
      m_dSource         = (double) fWave;
      m_nSourceOptimize = nOptimize;
      m_nSourceOption   = nOption;
      XmProcessTraversal(_tfSource, XmTRAVERSE_CURRENT);
    }
  else if (m_hFilePB == _pbWavelength)
    {
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nWavelength], 
			   m_a255cTemp);

      XmTextFieldShowPosition(m_ptCurrentTextRow->wTextField[ms_nWavelength],
	XmTextFieldGetLastPosition(m_ptCurrentTextRow->wTextField[ms_nWavelength]));

      XmProcessTraversal(m_ptCurrentTextRow->wTextField[ms_nWavelength],
			 XmTRAVERSE_CURRENT);
    }
}

void
MainWindow::vGetRequestedValues(const int nFlag)
{
  // Get requested values from mainwindow textField widgets
  // If nFlag > 0, then copy values to m_poScan also.
  //    nFlag == 1, then _pbExpose button
  //    nFlag == 2, then _pbScanEditPasteMW button

  char  *pcTemp;
  double dTemp;
  int    nTemp;
  int    nStat;
  int    i;
  double dWidthUsed = 0.0;
  
  for (i = 0; i < 8; i++)
    {
      pcTemp = XmTextFieldGetString(m_tfValues[i]);
      if (NULL != pcTemp)
	{
	  if (7 != i)
	    {
	      nStat = sscanf(pcTemp, "%lf", &dTemp);
	      if (1 == nStat)
		{
		  *m_pdValues[i] = dTemp;
		}
	      // Now write it back out in the proper format
	      sprintf(m_a255cTemp, m_sFormat1.string(), *m_pdValues[i]);
	    }
	  else
	    {
	      // Wavelength field

	      _cUIwavelength->vParseValues(pcTemp, &dTemp, &m_nSourceOption,
					   &m_nSourceOptimize, m_a255cTemp);
	      *m_pdValues[i] = dTemp;
	    }
	  XmTextFieldSetString(m_tfValues[i], m_a255cTemp);
	  XtFree(pcTemp);
	}
    }

  // Scan template name

  pcTemp = XmTextFieldGetString(_tfScanTemplate);
  if (NULL != pcTemp)
    {
      m_sMainTemplate = pcTemp;

      // Check if directory exists
      // also make sure template basename has ??? AFTER last \ or / 

      Cstring sDir;
      int nError = 0;
      sDir = sFileGetDirectory(m_sMainTemplate);
      if (!bFileExists(sDir)) nError = 1;
      if (!sFileGetBasename(m_sMainTemplate).contains('?'))
	nError = nError + 2;
      if (0 != nError)
	{
	  // Of course, we don't know if the directory is writable or not
	  
	  if (0 < (nError % 2))
	    sDir = (Cstring)"Scan template directory DOES NOT EXIST!\n" 
	           + sDir + '\n';
	  else
	    sDir = "";
	  if (1 < nError)
	    sDir = sDir + "Scan template basename DOES NOT HAVE ???'s!\n";
	  vPutMessage(sDir, 1);
	  vPopDialogCB(_pbScanTemplate, NULL, NULL);
	}
      XtFree(pcTemp);
    }
  XmTextFieldShowPosition(_tfScanTemplate,
			  XmTextFieldGetLastPosition(_tfScanTemplate));

  pcTemp = XmTextFieldGetString(_tfScanSeqStart);
  if (NULL != pcTemp)
    {
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_nMainSeqStart = nTemp;
      XtFree(pcTemp);
    }
  pcTemp = XmTextFieldGetString(_tfScanNumImgs);
  if (NULL != pcTemp)
    {
      nStat = sscanf(pcTemp, "%d", &nTemp);
      if (1 == nStat)
	m_nMainNumImgs = nTemp;
      XtFree(pcTemp);
    }

  // Now setup the main scan info based on these values
  // Setup scan info

  if (0 < nFlag)
    {
      if (NULL == m_poScan)
	{
	  m_poScan = new Cscan ();
	}

      XtPointer pvMode;
      XtVaGetValues(_omExpose, XmNuserData, &pvMode, NULL);

      // For safety, use default to axis closest to crystal.
      if (NULL != m_poDevGonCrys)
	{
	  // Last axis
	  m_poScan->m_poRotation->vSetName(m_poDevGonCrys->sGetAxisName(
					 m_poDevGonCrys->nGetNumAxes()-1));
	}
      m_poScan->vSetMode(eScanMode_Unknown);   // For an attempt at safety!
      if (pvMode == (XtPointer)0)
	{
	  m_poScan->vSetMode(eScanMode_StillClosed);
	  dWidthUsed = 0.0;
	}
      else if (pvMode == (XtPointer)1)
	{
	  m_poScan->vSetMode(eScanMode_StillOpen);
	  dWidthUsed = 0.0;
	}
      else if (pvMode == (XtPointer)2)
	{
	  dWidthUsed = m_dExpWidth;
	  m_poScan->vSetMode(eScanMode_ScanOpen);
	}
      else if (pvMode == (XtPointer)3)
	{
	  m_poScan->vSetMode(eScanMode_ScanOpen);
	  dWidthUsed = m_dExpWidth;
	  if (NULL != m_poDevGonCrys)
	    {
	      // First axis
	      m_poScan->m_poRotation->vSetName(m_poDevGonCrys->sGetAxisName(0));
	    }
	  else
	    {
	      // Maybe get name from the rbAxis widget
	      m_poScan->m_poRotation->vSetName((Cstring)"Omega");
	    }
	}

      if ( (1 == nFlag) && (1 > m_nMainNumImgs) )
	{
	  // Number of images in main window is 0 or less, so do a single
	  // image CENTERED on the current position

	  m_poScan->m_poRotation->vSetRotStart( (float)(-0.5 * dWidthUsed) );
	  m_poScan->m_poRotation->vSetIncrement( (float)dWidthUsed );
	  m_poScan->m_poRotation->vSetExposureTime( (float)m_dExpTime );
	  m_poScan->m_poRotation->vSetRotEnd( (float)(0.5 * dWidthUsed) );

	  // Add directory to scan template if it has no path
	  Cstring sFullTemplate;
	  sFullTemplate = sFileGetDirectory(m_sMainTemplate) 
	                + sFileGetBasename(m_sMainTemplate);
	  m_poScan->vSetTemplate( sFullTemplate);
	  m_poScan->vSetSeqStart( m_nMainSeqStart); 
	  m_poScan->vSetSeqInc(m_nMainSeqIncr);
	  m_poScan->vSetNumImgs(1);
	  m_nMainNumImgs = 1;
	}
      else if (   ( (1 == nFlag) && (0 < m_nMainNumImgs) )
	       || (2 == nFlag) )
	{
	  // Number of images in main window is 1 or more, so do 
	  // images STARTING on the current position

	  m_poScan->m_poRotation->vSetRotStart((float) 0.0);
	  m_poScan->m_poRotation->vSetIncrement( (float)dWidthUsed );
	  m_poScan->m_poRotation->vSetExposureTime( (float)m_dExpTime );
	  m_poScan->m_poRotation->vSetRotEnd( (float)(m_nMainNumImgs)
					   * (float)dWidthUsed );
	  // Add directory to scan template if it has no path
	  Cstring sFullTemplate;
	  sFullTemplate = sFileGetDirectory(m_sMainTemplate) 
	                + sFileGetBasename(m_sMainTemplate);
	  m_poScan->vSetTemplate( sFullTemplate);
	  m_poScan->vSetSeqStart( m_nMainSeqStart); 
	  m_poScan->vSetSeqInc(m_nMainSeqIncr);
	  m_poScan->vSetNumImgs(m_nMainNumImgs);
	}
      float a3fCrys[3];
      float a2fDet[2];
      if (1 == nFlag)
	{
	  // Set the scan datum to the CURRENT goniometer values

	  a3fCrys[0] = (float) m_dCrysOmegaCurr;
	  a3fCrys[1] = (float) m_dCrysChiCurr;
	  a3fCrys[2] = (float) m_dCrysPhiCurr;
	  a2fDet[0]  = (float) m_dDetDistCurr;
	  a2fDet[1]  = (float) m_dDetThetaCurr;
	}
      else 
	{
	  // Set the scan datum to the requested values

	  a3fCrys[0] = (float) m_dCrysOmega;
	  a3fCrys[1] = (float) m_dCrysChi;
	  a3fCrys[2] = (float) m_dCrysPhi;
	  a2fDet[0]  = (float) m_dDetDist;
	  a2fDet[1]  = (float) m_dDetTheta;
	}
      (void) m_poScan->nSetDatum(3, a3fCrys, 2, a2fDet);
    
      m_poScan->vSetWavelength( (float) m_dSource);
      m_poScan->vSetWavelengthOpts(m_nSourceOption, m_nSourceOptimize);
      m_poScan->m_poRotation->vSetNumOsc( (int)0 );
      m_poScan->m_poRotation->vSetDarkIntvl( (int)0);
      m_poScan->m_poRotation->vSetDarkInit( (int)0);
    }
}

int
MainWindow::nUpdateRequestedValues(Cscan *poScan)
{
  // Update the main window requested values text fields based on
  // Returns 0  = success
  //         -1 = scan unavailable
  
  if (!poScan->bIsAvailable())
    return (-1);
  
  int    i;
  
  m_dExpTime      = poScan->m_poRotation->fGetExposureTime();
  m_dExpWidth     = poScan->m_poRotation->fGetIncrement();
  m_dSource       = poScan->fGetWavelength();
  m_sMainTemplate = poScan->sGetTemplate();
  m_nMainSeqStart = poScan->nGetSeqNum(0);
  m_nMainSeqIncr  = poScan->nGetSeqInc();
  m_nMainNumImgs  = poScan->nGetNumImages();
	
  int    nCrys, nDet;
  float *pfDet, *pfCrys;
  nCrys  = 3;
  nDet   = 2;
  pfDet  = new float [nDet];
  pfCrys = new float [nCrys];
  poScan->nGetDatum(&nCrys, pfCrys, &nDet, pfDet);

  for (i = 0; i < nCrys; i++)
    {
      *m_pdValues[2+i] = pfCrys[i];
    }
  for (i = 0; i < nDet; i++)
    {
      *m_pdValues[5+i] = pfDet[i];
    }
  delete [] pfCrys;
  delete [] pfDet;

// Find out which scan type it is ... and set the expose omExpose accordingly
// Also adjust the datum, so that the scan start is at relative datum

//  poScan->m_poRotation->nGetNumOsc());
//  poScan->m_poRotation->nGetDarkInit(),
//  poScan->m_poRotation->nGetDarkIntvl());
//  poScan->m_poRotation->sGetName();

  Widget wTemp;
  // Default is still closed
  wTemp = _pbExpDark;
  i     = 0;
  if (poScan->eGetMode() == eScanMode_StillOpen)
    {
      wTemp = _pbExpStill;
      i = 1;
    }
  else if (poScan->eGetMode() == eScanMode_ScanOpen)
    {
      if ("Phi" == poScan->m_poRotation->sGetName())
	{
	  wTemp      = _pbExpPhi;
	  m_dCrysPhi = m_dCrysPhi + poScan->m_poRotation->fGetRotStart();
	  i = 2;
	}
      else
	{
	  wTemp        = _pbExpOmega;
	  m_dCrysOmega = m_dCrysOmega + poScan->m_poRotation->fGetRotStart();
	  i = 3;
	}
    }
  else if (poScan->eGetMode() == eScanMode_ScanClosed)
    {
      if ("Phi" == poScan->m_poRotation->sGetName())
	{
	  wTemp      = _pbExpDark;
	  m_dCrysPhi = m_dCrysPhi + poScan->m_poRotation->fGetRotStart();
	  i = 2;
	}
      else
	{
	  wTemp        = _pbExpDark;
	  m_dCrysOmega = m_dCrysOmega + poScan->m_poRotation->fGetRotStart();
	  i = 3;
	}
    }
  XtVaSetValues(_omExpose, XmNmenuHistory, wTemp,
		XmNuserData, i, NULL);

  // Set the sensitivity of the expose Width controls appropriately
  if (1 < i) 
    {
      XtSetSensitive(_tfExpWidth,     TRUE);
      XtSetSensitive(_lbExpWidth,     TRUE);
      XtSetSensitive(_lbExpWidthCurr, TRUE);
    }
  else
    {
      XtSetSensitive(_tfExpWidth,     FALSE);
      XtSetSensitive(_lbExpWidth,     FALSE);
      XtSetSensitive(_lbExpWidthCurr, FALSE);
    }

  // Now update the widgets from the internal values

  for (i = 0; i < 8; i++)
    {
      if (7 != i)
	{
	  sprintf(m_a255cTemp, m_sFormat1.string(), *m_pdValues[i]);
	}
      else
	{
	  if (100.0 > *m_pdValues[i])
	    sprintf(m_a255cTemp, "%.5lf", *m_pdValues[i]);
	  else
	    sprintf(m_a255cTemp, "%.1lf", *m_pdValues[i]);
	}
      XmTextFieldSetString(m_tfValues[i], m_a255cTemp);
    }

  // Scan template name

  XmTextFieldSetString(_tfScanTemplate, m_sMainTemplate.string());
  XmTextFieldShowPosition(_tfScanTemplate,
			  XmTextFieldGetLastPosition(_tfScanTemplate));

  sprintf(m_a255cTemp, "%d", m_nMainSeqStart);
  XmTextFieldSetString(_tfScanSeqStart, m_a255cTemp);
  sprintf(m_a255cTemp, "%d", m_nMainNumImgs);
  XmTextFieldSetString(_tfScanNumImgs, m_a255cTemp);

  return (0);
}

int
MainWindow::nUpdateCurrentValues(void)
{
  // Place the current values of hardware devices in the "current" label widgets
  // Change label colors to reflect current status of hardware device
  // Returns 0 if no hardware "active"
  //         1 if some hardware device active
  //        >1 on hardware device in error

  int    nStat = 0;
  double dTemp;
  double a10dTemp[10];
  int    nActive = 0;     // Assume nothing active

  // Read current values from wherever and display them in the mainWindow

  // Shutter

  eDevShutter_State eShutterState = eDevShutterState_Unknown;
  if (NULL != m_poDevShutter)
    {
      nStat = m_poDevShutter->nPoll(&eShutterState, a10dTemp);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevShutter->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Shutter poll problem!\n" + m_sStatusMsg, 1);
	}
    }

  if (eShutterState == eDevShutterState_Closed)
    {
      if (0 != m_nShutterWasActive)
	{
	  vSetLabel(_pbShutter, "Closed           (Press to Open)", "green");
	  m_nShutterWasActive = 0;
	}
    }
  else if (eShutterState == eDevShutterState_Open)
    {
      // Change _pbShutter label to expose time

      sprintf(m_a255cTemp, "Opened: %.0lf           (Press to Close)", a10dTemp[0]);
      vSetLabel(_pbShutter, m_a255cTemp, "red");
      if (3.0 > a10dTemp[0])
	XBell(XtDisplay(_pbShutter), -75);     // Beep when shutter is open
                                               // but only near beginning
      nActive++;
      if (1 != m_nShutterWasActive)
	{
	  m_nShutterWasActive = 1;
	}
    }
  else
    {
//      nActive++;
      nStat++;
      if (2 != m_nShutterWasActive)
	{
	  vSetLabel(_pbShutter, "Init", "yellow");
	  XtSetSensitive(_pbShutter, True);
	  m_nShutterWasActive = 2;
	}
    }

  // Crystal Goniometer

  eDevGoniom_State eGonCrysState = eDevGoniomState_Unknown;
  if (NULL != m_poDevGonCrys)
    {
      nStat = m_poDevGonCrys->nPoll(&eGonCrysState,
				    m_poDevGonCrys->nGetNumAxes(), 
				    a10dTemp);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevGonCrys->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("CrysGoniom poll problem!\n" + m_sStatusMsg, 1);
	}
    }
    
  // Update labels only if changed

  if (a10dTemp[0] != m_dCrysOmegaCurr)
    {
      m_dCrysOmegaCurr = a10dTemp[0];
      sprintf(m_a255cTemp, m_sFormat1.string(), m_dCrysOmegaCurr);
      vSetLabel(_lbCrysOmegaCurr, m_a255cTemp, NULL);
    }
  if (a10dTemp[1] != m_dCrysChiCurr)
    {
      m_dCrysChiCurr   = a10dTemp[1];
      sprintf(m_a255cTemp, m_sFormat1.string(), m_dCrysChiCurr);
      vSetLabel(_lbCrysChiCurr, m_a255cTemp, NULL);
    }

  if (a10dTemp[2] != m_dCrysPhiCurr)
    {
      m_dCrysPhiCurr   = a10dTemp[2];
      sprintf(m_a255cTemp, m_sFormat1.string(), m_dCrysPhiCurr);
      vSetLabel(_lbCrysPhiCurr, m_a255cTemp, NULL);
    }

  if (eGonCrysState == eDevGoniomState_Moving)
    {
      nActive++;
      if (1 != m_nCrysGonWasActive)
	{
	  vSetLabel(_pbCrysMove, "A\nb\no\nr\nt", "red");
	  XtVaSetValues(_pbCrysMove, XmNmnemonic, 'A', NULL);
	  m_nCrysGonWasActive = 1;
	}
    }
  else if (   (eGonCrysState == eDevGoniomState_NotReady) 
	   || (eGonCrysState == eDevGoniomState_Ready) 
	   || (eGonCrysState == eDevGoniomState_Done) )
    {
      if (0 != m_nCrysGonWasActive)
	{
	  m_nCrysGonWasActive = 0;
	  vSetLabel(_pbCrysMove, "M\no\nv\ne", "?");
	  XtVaSetValues(_pbCrysMove, XmNmnemonic, 'M', NULL);
	}
    }
  else
    {
//      nActive++;
      nStat++;
      if (2 != m_nCrysGonWasActive)
	{
	  m_nCrysGonWasActive = 2;
	  vSetLabel(_pbCrysMove, "I\nn\ni\nt", "yellow");
	  XtSetSensitive(_pbCrysMove, True);
	}
    }

  // Detector Goniometer

  eDevGoniom_State eGonDetState = eDevGoniomState_Unknown;
  if (NULL != m_poDevGonDet)
    {
      nStat = m_poDevGonDet->nPoll(&eGonDetState,
				   m_poDevGonDet->nGetNumAxes(), a10dTemp);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevGonDet->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("DetGoniom poll problem!\n" + m_sStatusMsg, 1);
	}
    }

  // Update labels but only if changed

  if (m_dDetDistCurr != a10dTemp[0])
    {
      m_dDetDistCurr  = a10dTemp[0];
      sprintf(m_a255cTemp, m_sFormat1.string(), m_dDetDistCurr);
      vSetLabel(_lbDetDistCurr, m_a255cTemp, NULL);
    }
  if (m_dDetThetaCurr != a10dTemp[1])
    {
      m_dDetThetaCurr = a10dTemp[1];
      sprintf(m_a255cTemp, m_sFormat1.string(), m_dDetThetaCurr);
      vSetLabel(_lbDetThetaCurr, m_a255cTemp, NULL);
    }

  if (eGonDetState == eDevGoniomState_Moving)
    {
      nActive++;
      if (1 != m_nDetGonWasActive)
	{
	  vSetLabel(_pbDetMove, "A\nb\no\nr\nt", "red");
	  XtVaSetValues(_pbDetMove, XmNmnemonic, 'A', NULL);
	  m_nDetGonWasActive = 1;
	}
    }
  else if (   (eGonDetState == eDevGoniomState_NotReady) 
	   || (eGonDetState == eDevGoniomState_Ready) 
	   || (eGonDetState == eDevGoniomState_Done) )
    {
      if (0 != m_nDetGonWasActive)
	{
	  vSetLabel(_pbDetMove, "M\no\nv\ne", "?");
	  XtVaSetValues(_pbDetMove, XmNmnemonic, 'o', NULL);
	  m_nDetGonWasActive = 0;
	}
    }
  else
    {
//      nActive++;
      nStat++;
      if (2 != m_nDetGonWasActive)
	{
	  vSetLabel(_pbDetMove, "I\nn\ni\nt", "yellow");
	  XtSetSensitive(_pbDetMove, True);
	  m_nDetGonWasActive = 2;
	}
    }

  // Detector via Scan device

  eDevScan_State eScanState = eDevScanState_Unknown;
  if (NULL != m_poDevScan)
    {
      nStat = m_poDevScan->nPoll(&eScanState, &a10dTemp[0], &a10dTemp[1]);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Scan poll problem!\n" + m_sStatusMsg, 1);
	}
    }

  if (m_dExpWidthCurr != a10dTemp[0])
    {
      m_dExpWidthCurr = a10dTemp[0];

      // For the main window display we want to show a single image
      // elapsed width, so convert scan elapsed to image elapsed width

      dTemp           = a10dTemp[0];
      while (   (dTemp > m_poScan->m_poRotation->fGetIncrement())
	     && (0.001 <  m_poScan->m_poRotation->fGetIncrement()) )
	dTemp -= (double)m_poScan->m_poRotation->fGetIncrement();
      sprintf(m_a255cTemp, m_sFormat1.string(), dTemp);
      vSetLabel(_lbExpWidthCurr, m_a255cTemp, NULL);
    }
  if (m_dExpTimeCurr != a10dTemp[1])
    {
      m_dExpTimeCurr = a10dTemp[1];

      // For the main window display we want to show a single image
      // elapsed time, so convert scan elapsed to image elapsed time

      dTemp          = a10dTemp[1];
      while (   (dTemp > m_poScan->m_poRotation->fGetExposureTime())
	     && (0.001 <  m_poScan->m_poRotation->fGetExposureTime()) )
	dTemp -= (double)m_poScan->m_poRotation->fGetExposureTime();
      sprintf(m_a255cTemp, "%.3lf", dTemp);
      vSetLabel(_lbExpTimeCurr, m_a255cTemp, NULL);
    }

  if (   (eScanState == eDevScanState_NotReady) 
      || (eScanState == eDevScanState_Ready)
      || (eScanState == eDevScanState_Done) )
    {
      if (0 != m_nScanWasActive)
	{
	  if (   ( (1 == m_nScanWasActive) || (4 == m_nScanWasActive) 
		   || (5 == m_nScanWasActive) || (6 == m_nScanWasActive) )
	      && (eScanState == eDevScanState_Done) )
	    {
	      // Always display last image in the scan, sequence
	      // number must be incremented elsewhere

	      // Update scan groupbox
                  
	      int nT1, nT2, nT3, nDevErr;
	      int nStat;
	      Cstring sTemp, sFilename;

	      nDevErr =  m_poDevScan->nGetLastSeqNum(&nT1); // Last completed image
	      nT2     = m_poScan->nGetSeqNum(); // The one we want to view
	      nT3     = m_poScan->nGetSeqNum(m_poScan->nGetNumImages()-1);
	      nStat   = m_poScan->nGetImageName(&sFilename);

	      sTemp = "File is: " + sFilename;
	      vPutMessage(sTemp.string());
	      vPutMessage("Expose/scan done.");
	      sTemp = (Cstring)"... " + sFileGetBasename(sFilename);
	      vSetLabel(_lbScanLastFileCurr, sTemp.string(), "?");

	      m_nMainSeqCurr = nT2;
	      sprintf(m_a255cTemp, "%d", m_nMainSeqCurr);
	      vSetLabel(_lbScanSeqCurr, m_a255cTemp, "?");

	      nT1 = nT2 - m_poScan->nGetSeqNum(0);
	      m_nMainSeqIncr = m_poScan->nGetSeqInc();
	      if (0 != m_nMainSeqIncr)
		nT1 = nT1 / m_nMainSeqIncr;
	      m_nMainNumImgsCurr = nT1 + 1;
	      sprintf(m_a255cTemp, "%d", m_nMainNumImgsCurr);
	      vSetLabel(_lbScanNumImgsCurr, m_a255cTemp, "?");

	      vSetLabel(_pbExpose, "R\ne\na\nd", "blue"); 
	      XSync(XtDisplay(_pbExpose), False);
	      XmUpdateDisplay(_pbExpose);
	      sFilename = sFilename + " Template: " 
		          + m_poScan->sGetTemplate();
	      if (m_poScan->nGetSeqNum(0) == m_nMainSeqCurr)
		{
		  // Potentially a new scan template, etc
		  sFilename = sFilename + " New! Detector: " 
		              + m_sDetectorName;
		}
	      else
		{
		  sprintf(m_a255cTemp, " Seq: %d Detector: %s",
			  m_nMainSeqCurr, m_sDetectorName.string());
		  sFilename = sFilename + m_a255cTemp;
		}

	      (void) m_poXprop->hSetProperty("DTDISPLAY_IMAGE_UPDATE",
					     sFilename + " //dtcollect//");
	    }
	  vSetLabel(_pbExpose, "E\nx\np\no\ns\ne", "?"); 
	  vScanRowColor(m_nPrevScan, "?");
	  XtVaSetValues(_pbExpose, XmNmnemonic, 'x', NULL);
	  m_nScanWasActive = 0;
	}
    }
  else if (eScanState == eDevScanState_InProgress)
    {
      nActive++;
      vUpdateCurrentScan();
      if (1 != m_nScanWasActive)
	{
	  vSetLabel(_pbExpose, "A\nb\no\nr\nt", "red");
	  XtVaSetValues(_pbExpose, XmNmnemonic, 'A', NULL);
	  m_nScanWasActive = 1;
	}
      else
	{
	  int nT1, nT2, nT3, nDevErr;

	  nDevErr =  m_poDevScan->nGetLastSeqNum(&nT1); // Last completed image
	  nT2 = m_poScan->nGetSeqNum();        // The one we want to view
	  nT3 = m_poScan->nGetSeqNum(m_poScan->nGetNumImages()-1);

	  // Decide which images to display during scans of more than
	  // one image. This should not be so tricky! 
	  // Be careful about getting out of sync, too.

	  if (   (nT1 == nT2)
	      && (nT1 != nT3) )   // Last image is updated above when scan is done
	    {
	      // Update scan groupbox
                  
	      int nStat;
	      Cstring sTemp, sFilename;
//		  m_poScan->vSetSeqNum(???);
	      nStat = m_poScan->nGetImageName(&sFilename);
	      sTemp = "File is: " + sFilename;
	      vPutMessage(sTemp.string());
	      sTemp = "... " + sFileGetBasename(sFilename);
	      vSetLabel(_lbScanLastFileCurr, sTemp.string(), "?");

	      m_nMainSeqCurr = nT2; // + m_nMainSeqInc;
	      sprintf(m_a255cTemp, "%d", m_nMainSeqCurr);
	      vSetLabel(_lbScanSeqCurr, m_a255cTemp, "?");

	      nT1 = nT2 - m_poScan->nGetSeqNum(0);
	      m_nMainSeqIncr = m_poScan->nGetSeqInc();
	      if (0 != m_nMainSeqIncr)
		nT1 = nT1 / m_nMainSeqIncr;
	      m_nMainNumImgsCurr = nT1 + 1;

	      sprintf(m_a255cTemp, "%d", m_nMainNumImgsCurr);

	      vSetLabel(_lbScanNumImgsCurr, m_a255cTemp, "?");
	      sprintf(m_a255cTemp, "%d", m_nMainSeqCurr);
	      vSetLabel(_pbExpose, "R\ne\na\nd", "blue"); 

	      XSync(XtDisplay(_pbExpose), False);
	      XmUpdateDisplay(_pbExpose);
	      sFilename = sFilename + " Template: " 
		    + m_poScan->sGetTemplate();
	      if (m_poScan->nGetSeqNum(0) == m_nMainSeqCurr)
		{
		  // Potentially a new scan template, etc
		  sFilename = sFilename + " New! Detector: " 
		                        + m_sDetectorName;
		}
	      else
		{
		  sprintf(m_a255cTemp, " Seq: %d Detector: %s",
			  m_nMainSeqCurr, m_sDetectorName.string());
		  sFilename = sFilename + m_a255cTemp;
		}
	      (void) m_poXprop->hSetProperty("DTDISPLAY_IMAGE_UPDATE",
					     sFilename + " //dtcollect//");

	      vSetLabel(_pbExpose, "A\nb\no\nr\nt", "red");
	      m_poScan->vNextSeqNum();        // Increment seq number
	    }
	}
    }
  else if (eScanState == eDevScanState_Reading)
    {
      nActive++;
      vUpdateCurrentScan();
      if (5 != m_nScanWasActive)
	{
	  vSetLabel(_pbExpose, "R\ne\na\nd", "blue"); 
	  XtVaSetValues(_pbExpose, XmNmnemonic, 'A', NULL);
	  m_nScanWasActive = 5;
	}
    }
  else if (eScanState == eDevScanState_Erasing)
    {
      nActive++;
      vUpdateCurrentScan();
      if (6 != m_nScanWasActive)
	{
	  vSetLabel(_pbExpose, "E\nr\na\ns\ne", "blue"); 
	  XtVaSetValues(_pbExpose, XmNmnemonic, 'A', NULL);
	  m_nScanWasActive = 6;
	}
    }
  else if (eScanState == eDevScanState_Initializing)
    {
      nActive++;
      vUpdateCurrentScan();
      if (7 != m_nScanWasActive)
	{
	  vSetLabel(_pbExpose, "I\nn\ni\nt", "blue"); 
	  XtVaSetValues(_pbExpose, XmNmnemonic, 'A', NULL);
	  m_nScanWasActive = 7;
	}
    }
  else
    {
      nStat++;
//      nActive++;
      if (m_nScanWasActive !=2)
	{
	  m_nScanWasActive = 2;
	  vSetLabel(_pbExpose, "I\nn\ni\nt", "yellow");
	  XtSetSensitive(_pbExpose, True);
	}
    }

  // Source

  eDevSource_State eSourceState = eDevSourceState_Unknown;
  if (NULL != m_poDevSource)
    {
      nStat = m_poDevSource->nPoll(&eSourceState, a10dTemp);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevSource->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Source poll problem!\n" + m_sStatusMsg, 1);
	}
    }
  if (m_dSourceCurr != a10dTemp[0])
    {
      m_dSourceCurr = a10dTemp[0];
      if (100.0 > m_dSourceCurr)
	{
	  sprintf(m_a255cTemp, "%.5lf", m_dSourceCurr);
	}
      else
	{
	  sprintf(m_a255cTemp, "%.1lf", m_dSourceCurr);
	}
      vSetLabel(_lbSourceCurr, m_a255cTemp, NULL);
    }
  if (eSourceState == eDevSourceState_NotAvailable)
    {
      nActive++;
      if (1 != m_nSourceWasActive)
	{
	  vSetLabel(_pbSourceMove, "Ab\not", "red");
	  XtVaSetValues(_pbSourceMove, XmNmnemonic, 'A', NULL);
	  m_nSourceWasActive = 1;
	}
    }
  else if (eSourceState == eDevSourceState_Available)
    {
      if (0 != m_nSourceWasActive)
	{
	  vSetLabel(_pbSourceMove, "Mo\nve", "?");
	  XtVaSetValues(_pbSourceMove, XmNmnemonic, NULL, NULL);
	  m_nSourceWasActive = 0;
	}
    }
  else
    {
      nStat++;
//      nActive++;
      if (2 != m_nSourceWasActive)
	{
	  m_nSourceWasActive = 2;
	  vSetLabel(_pbSourceMove, "In\nit", "yellow");
	  XtSetSensitive(_pbSourceMove, True);
	}
    }

  eDevCounter_State eCounterState = eDevCounterState_Unknown;
  if (NULL != m_poDevCounter)
    {
      nStat = m_poDevCounter->nPoll(&eCounterState, 1, a10dTemp);
      if (DEV_SUCCESS != nStat)
	{
	  m_poDevCounter->vGetStatusMsg(&m_sStatusMsg);
	  vPutMessage("Counter poll problem!\n" + m_sStatusMsg, 1);
	}
    }
  
  // We think we can send/look for remote commands

  if (NULL != m_poRemote)
    {
/*
      nActive++;                     // If we are under remote operation
      CString sTemp;                 //  always be active!
      int nChar = m_poRemote->nGet(&sTemp);
      if (0 < nChar)
        {
          m_sCommand = m_sCommand + sTemp.Left(nChar);
          int nLen;
          nLen = m_sCommand.GetLength();
          if ('\r' == m_sCommand.GetAt(nLen-1))
            {
              m_sCommand = m_sCommand.Left(nLen-1);  // Strip off \r
              vPutMessage((const char *)m_sCommand);
//              m_tfCommand.SetWindowText(m_sCommand);
//              OnUpdatetfCommand();
//              OnUpdatetfCommand();  // Need to do it twice to get a reaction!
              m_sCommand = "";      // Could just call vParseCommand (if it existed!)
            }
        }
*/
     //
     //  This is where we would put info back to other side of connection...
     //
    }

  if ( (0 == nActive) && (m_nNextScan >= m_nNumScans) )
    {
      // Nothing active, so make sure all buttons are sensitive

      XtSetSensitive(_pbShutter,     True);
      XtSetSensitive(_pbExpose,      True);
      XtSetSensitive(_pbCrysMove,    True);
      XtSetSensitive(_pbDetMove,     True);
      XtSetSensitive(_pbSourceMove,  True);
      XtSetSensitive(_pbCollectScan, True);
      vScanRowColor(m_nPrevScan, "?");
      vScanRowColor(m_nPrevRow, "white");
/*
	      XtSetSensitive(_fmExpose,      True);
	      XtSetSensitive(_fmSource,      True);
	      XtSetSensitive(_fmDetector,    True);
	      XtSetSensitive(_fmCrystal,     True);
	      XtSetSensitive(_tfExpTime,     True);
*/
      XtSetSensitive(XmOptionButtonGadget(_omExpose), True);

      XtSetSensitive(XmSelectionBoxGetChild(_sdCollectScan,
					   XmDIALOG_CANCEL_BUTTON), False);
      XtSetSensitive(XmSelectionBoxGetChild(_sdCollectScan,
					   XmDIALOG_HELP_BUTTON), False);
      XtSetSensitive(XmSelectionBoxGetChild(_sdCollectScan,
					   XmDIALOG_APPLY_BUTTON), True);
      XtSetSensitive(XmSelectionBoxGetChild(_sdCollectScan,
					   XmDIALOG_OK_BUTTON), True);
      XtSetSensitive(_mnScan, True);
    }
  if (0 < nActive) nActive = 1;
  return (nStat + nActive);
}

void
MainWindow::vWorkProc1(XtPointer clientData, XtIntervalId* pId)
{
  MainWindow *poThis = (MainWindow *)clientData;
  
  // Perform display updates only every second or so
  // This routine is static, so you cannot use member variables in here
  // without using the 'this' pointer, too.  Thus we pass in the this
  // pointer as clientData.

//
//  poThis->vPutMessage("Work proc called!");
//  XBell(XtDisplay(poThis->_pbShutter), -75);
//
  if (1 == poThis->nUpdateCurrentValues())
    {
      // Devices still active so re-add timeout
      poThis->m_hIntervalId = XtAppAddTimeOut(poThis->m_hAppContext,
					      (unsigned long)800,
					      vWorkProc1, (XtPointer)poThis);
    }
  else if (poThis->m_nNextScan < poThis->m_nNumScans)
    {
      // No scan active, but there are more scans to do, so...start one

      poThis->vPutMessage("Starting next scan...");
      poThis->vMainCB(poThis->_sdCollectScan, NULL, NULL);  // Start next scan
    }
}

int
MainWindow::nScanFileRW(const int nMode, const Cstring &sFile)
{
  int i;
  int nStat;
  Cstring sTemp;
  Cimage_header *poHeader;
  Cscan *poScan;

  // Check if reading or writing

  if (0 == nMode)
    {
      // Read from a image header

      poHeader = new Cimage_header (sFile);
      if (poHeader->bIsAvailable())
	{
	  Cstring sPrefix;
	  poScan = new Cscan (*poHeader);
	  i = 0;
	  nStat = 0;
	  while ( (0 == nStat) && poScan->bIsAvailable() )
	    {
	      // At this point have poScan ready, so paste into scan table
	      // overwriting currently selected scan

	      vScanRowSetValues(poScan, -1);  // Paste onto current selected row
	      i++;
	      sprintf(m_a255cTemp, "S%d_", i);
	      sPrefix = m_a255cTemp;
	      delete poScan;
	      poScan = NULL;
	      // Peak ahead to see if scan exists
	      
	      nStat = poHeader->nGetValue(sPrefix + Cscan::ms_sScanTemplate,
					  &sTemp);
	      if (0 == nStat)
		{
		  // Instance a scan only if SCAN_TEMPLATE exists

		  poScan = new Cscan(*poHeader, sPrefix);
		  if (poScan->bIsAvailable())
		    {
		      // New scan just read in, so insert new row
		      
		      vScanEditCB(_pbScanEditInsert, (XtPointer)3, NULL);
		    }
		}
	    }
	  if (NULL != poScan)
	    {
	      delete poScan;
	      poScan = NULL;
	    }
	  sTemp = "Read " + (Cstring)i + " scans from file:\n  " + sFile;
	  vPutMessage(sTemp.string());
	}
      else
	{
	  vPutMessage("ERROR, no valid header found in file:\n  " + sFile, 1);
	}
    }
  else if (1 == nMode)
    {
      // Write

      int nStat;
      sTemp = "Saving scan file to " + sFile;
      vPutMessage(sTemp.string());
      
      Cstring sPrefix = "";
      Cimage_header oHeader;
      Cscan  oScan;
      if ( (NULL != m_poDefaultHeader) && m_poDefaultHeader->bIsAvailable())
	{
	  // Copy info from default header to local header

	  oHeader = *m_poDefaultHeader;

	  // Delete previous scan info from the header
	  
	  poScan = new Cscan (oHeader);
	  i = 0;
	  while (poScan->bIsAvailable())
	    {
	      // Scan found in header, so delete it from header

	      poScan->vDeleteFromHeader(&oHeader, sPrefix);
	      delete poScan;
	      i++;
	      sprintf(m_a255cTemp, "S%d_", i);
	      sPrefix = m_a255cTemp;
	      poScan = new Cscan (oHeader, sPrefix);
	    }
	  sPrefix = "";
	  delete poScan;
	}

      for (i = 0; i < m_nNumRows; i++)
	{
	  vScanRowGetValues(&oScan, i);
	  oScan.nUpdateHeader(&oHeader, sPrefix);
	  sprintf(m_a255cTemp, "S%d_", i+1);
	  sPrefix = m_a255cTemp;
	}
      nStat = oHeader.nWrite(sFile);
      if (0 != nStat)
	{
	  vPutMessage("ERROR writing scan file: " + sFile, 1);
	}
      else
	{
	  vPutMessage("Wrote " + (Cstring)i + " scans to file:\n  " + sFile);
	}
    }
   return (0);
}

void
MainWindow::vScanRowSetValues(Cscan *poScan, const int nRowIn)
{
  // Load the values in *poScan into the specified scan table dialog row

  int  nStat;
  int   nRow;

  nRow = nRowIn;

  if (0 > nRow)
    {
      nRow = m_nCurrentRow; // Use current row
    }
  else if (nRow >= m_nNumRows)
    {
      nRow = 0; // Use first row (should it be last row?)
    }

  if (   (poScan->eGetMode() == eScanMode_StillOpen)
      || (poScan->eGetMode() == eScanMode_ScanOpen) )
    {
      // Probably should get "Closed" from radiobox
      XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nShutter], "Open");
    }
  else if (   (poScan->eGetMode() == eScanMode_StillClosed)
	   || (poScan->eGetMode() == eScanMode_ScanClosed) )
    {
      XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nShutter], "Closed");
    }
  else
    {
      XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nShutter],
			   "Unknown");
    }

  sprintf(m_a255cTemp, "%.3f", poScan->m_poRotation->fGetRotStart());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRotStart],
		       m_a255cTemp);
  sprintf(m_a255cTemp, "%.3f", poScan->m_poRotation->fGetRotEnd());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRotEnd], m_a255cTemp);
  sprintf(m_a255cTemp, "%.3f", poScan->m_poRotation->fGetIncrement());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRotIncr], m_a255cTemp);
  sprintf(m_a255cTemp, "%.3f", poScan->m_poRotation->fGetExposureTime());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRotTime], m_a255cTemp);

  sprintf(m_a255cTemp, "%s", poScan->m_poRotation->sGetName().string());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRotAxis], m_a255cTemp);
  sprintf(m_a255cTemp, "%s", poScan->sGetTemplate().string());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nTemplate], m_a255cTemp);
  XmTextFieldShowPosition(m_pptTextRow[nRow]->wTextField[ms_nTemplate],
    XmTextFieldGetLastPosition(m_pptTextRow[nRow]->wTextField[ms_nTemplate]));

  sprintf(m_a255cTemp, "%d", poScan->nGetSeqNum(0));
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nSeqStart], m_a255cTemp);
  sprintf(m_a255cTemp, "%d", poScan->nGetSeqInc());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nSeqIncr], m_a255cTemp);

  int   i, nCrys, nDet;
  float *pfDet, *pfCrys;
  nCrys  = 10;
  nDet   = 10;
  pfDet  = new float [nDet];
  pfCrys = new float [nCrys];
  poScan->nGetDatum(&nCrys, pfCrys, &nDet, pfDet);
  int nWrote = 0;   // Number of characters written
  nStat  = 0;
  for (i = 0; i < nCrys; i++)
    {
      nWrote = sprintf(&m_a255cTemp[nStat], "%.3f, ", pfCrys[i]);
      nStat  = nStat + nWrote;
    }
  for (i = 0; i < nDet; i++)
    {
      nWrote = sprintf(&m_a255cTemp[nStat], "%.3f, ", pfDet[i]);
      nStat  = nStat + nWrote;
    }
  delete [] pfCrys;
  delete [] pfDet;

  // Strip off last ", " from the string

  m_a255cTemp[nStat-2] = '\0';
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nRelStart], m_a255cTemp);
  
  int nOption, nOptimize;
  poScan->vGetWavelengthOpts(&nOption, &nOptimize);
  sprintf(m_a255cTemp, "%.5lf %c%c", poScan->fGetWavelength(), 
	  CUIwavelength::ms_a4cWavOption[nOption],
	  CUIwavelength::ms_a2cWavOptimize[nOptimize]);
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nWavelength], m_a255cTemp);

  sprintf(m_a255cTemp, "%d", poScan->m_poRotation->nGetNumOsc());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nNumOsc], m_a255cTemp);

  sprintf(m_a255cTemp, "%d, %d", poScan->m_poRotation->nGetDarkInit(),
                               poScan->m_poRotation->nGetDarkIntvl());
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nNumDarkIntvl], m_a255cTemp);
}

void
MainWindow::vScanRowGetValues(Cscan *poScan, const int nRowIn)
{
  // Load the values in scan table dialog row nRow into a *poScan object
  // ToDo:  Need more error checking that there are really numbers in
  //        the textfield

  int   nStat;
  char *pcTemp;
  float fTemp;
  int   nTemp, a2nTemp[2];
  int   nRow;

  nRow = nRowIn;

  if (0 > nRow)
    {
      nRow = m_nCurrentRow; // Use current row
    }
  else if (nRow >= m_nNumRows)
    {
      nRow = 0; // Use first row
    }

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRotStart]);
  nStat  = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetRotStart(fTemp);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRotEnd]);
  nStat  = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetRotEnd(fTemp);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRotIncr]);
  nStat  = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetIncrement(fTemp);
    }
  XtFree(pcTemp);

  // Now can check out scan mode
  
  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nShutter]);
  if ('\0' != *pcTemp)
    {
      Cstring sMode;
      sMode = pcTemp;
      if (sMode == "Open")
	{
	  if (0.0 >= poScan->m_poRotation->fGetIncrement()) 
	    {
	      poScan->vSetMode(eScanMode_StillOpen);
	    }
	  else 
	    {
	      poScan->vSetMode(eScanMode_ScanOpen);
	    }
	}
      else if (sMode == "Closed")
	{
	  if (0.0 >= poScan->m_poRotation->fGetIncrement()) 
	    {
	      poScan->vSetMode(eScanMode_StillClosed);
	    }
	  else 
	    {
	      poScan->vSetMode(eScanMode_ScanClosed);
	    }
	}
      else
	{
	  poScan->vSetMode(eScanMode_Unknown);
	}
    }
  else
    {
      poScan->vSetMode(eScanMode_Unknown);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRotTime]);
  nStat = sscanf(pcTemp, "%f", &fTemp);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetExposureTime(fTemp);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRotAxis]);
  if ('\0' != *pcTemp)
    {
      poScan->m_poRotation->vSetName((Cstring)pcTemp);
    }
  else
    {
      poScan->m_poRotation->vSetName((Cstring)"Phi");
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nTemplate]);
  if ('\0' != *pcTemp)
    {
      // Add directory to scan template if it has no path
      Cstring sFullTemplate;
      sFullTemplate = sFileGetDirectory((Cstring)pcTemp) 
	            + sFileGetBasename((Cstring)pcTemp);

      poScan->vSetTemplate(sFullTemplate);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nSeqStart]);
  int nTemp2;
  nStat = sscanf(pcTemp, "%d, %d", &nTemp, &nTemp2);
  if (1 <= nStat)
    {
      poScan->vSetSeqStart(nTemp);
      poScan->vSetNumImgs(1);
    }
  if (   (2 == nStat) 
      && (   (eScanMode_StillClosed == poScan->eGetMode())
	  || (eScanMode_StillOpen   == poScan->eGetMode())) )
    {
      poScan->vSetNumImgs(nTemp2);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nSeqIncr]);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      poScan->vSetSeqInc(nTemp);
    }
  XtFree(pcTemp);

  // Now for the tricky datum values

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nRelStart]);
  int i, nCrys, nDet;
  nCrys = m_poDevGonCrys->nGetNumAxes();
  nDet  = m_poDevGonDet->nGetNumAxes();
  float *pfCrys;
  float *pfDet;
  pfCrys = new float [nCrys];
  pfDet  = new float [nDet];
  char *pcTemp2;

  pcTemp2 = strtok(pcTemp, ", ");
  for (i = 0; i < nCrys; i++)
    {
      pfCrys[i] = 0.0;              // A reasonable default
      if (NULL != pcTemp2)
	{
	  nStat = sscanf(pcTemp2, "%f", &fTemp);
	  if (1 == nStat)
	    {
	      pfCrys[i] = fTemp;
	    }
	}
      pcTemp2 = strtok(NULL, ", ");
    }
  for (i = 0; i < nDet; i++)
    {
      pfDet[i] = 0.0;               // A reasonable default
      if (0 == i)
	{
	  pfDet[i] = 100.0;         // A better default distance
	}
      if (NULL != pcTemp2)
      {
         nStat = sscanf(pcTemp2, "%f", &fTemp);
	 if (1 == nStat)
	   {
	     pfDet[i] = fTemp;
	   }
       }
      pcTemp2 = strtok(NULL, ", ");
    }
  XtFree(pcTemp);
  (void) poScan->nSetDatum(nCrys, pfCrys, nDet, pfDet);
  delete [] pfDet;
  delete [] pfCrys;

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nWavelength]);
  double dTemp;
  int nOption, nOptimize;
  _cUIwavelength->vParseValues(pcTemp, &dTemp, &nOption, &nOptimize,
			       m_a255cTemp);
  poScan->vSetWavelength((float)dTemp);
  poScan->vSetWavelengthOpts(nOption, nOptimize);
  XmTextFieldSetString(m_pptTextRow[nRow]->wTextField[ms_nWavelength],
		       m_a255cTemp);  
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nNumOsc]);
  nStat = sscanf(pcTemp, "%d", &nTemp);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetNumOsc(nTemp);
    }
  XtFree(pcTemp);

  pcTemp = XmTextFieldGetString(m_pptTextRow[nRow]->wTextField[ms_nNumDarkIntvl]);
  nStat = sscanf(pcTemp, "%d, &d", &a2nTemp[0], &a2nTemp[1]);
  if (1 == nStat)
    {
      poScan->m_poRotation->vSetDarkInit((int)0);
      poScan->m_poRotation->vSetDarkIntvl(a2nTemp[0]);
    }
  if (2 == nStat)
    {
      poScan->m_poRotation->vSetDarkInit(a2nTemp[0]);
      poScan->m_poRotation->vSetDarkIntvl(a2nTemp[1]);
    }
  XtFree(pcTemp);  
}

void
MainWindow::vUpdateCurrentScan(const int nFlag)
{
  // Update the current scan label in the scan dialog window

  if (XtIsManaged(_sdCollectScan))
    {
      int     nTemp, nStat;
      float   fTemp;
      double  dTemp;
      int     nPercent;

      if (0 < nFlag)
	{
	  // Some first time updates

	  fTemp = m_poScan->fGetWavelength();
	  if (100. > fTemp)
	    sprintf(m_a255cTemp, "%.5f", fTemp);
	  else
	    sprintf(m_a255cTemp, "%.1f", fTemp);
	  vSetLabel(_lbWavelengthCurr, m_a255cTemp);

	  strcpy(m_a255cTemp, m_poScan->m_poRotation->sGetName().string());
	  vSetLabel(_lbAxisCurr, m_a255cTemp);

	  sprintf(m_a255cTemp, "%d", m_poScan->m_poRotation->nGetNumOsc());
	  vSetLabel(_lbNumOscCurr, m_a255cTemp);

	  sprintf(m_a255cTemp, "%d, %d", m_poScan->m_poRotation->nGetDarkInit(),
		  m_poScan->m_poRotation->nGetDarkIntvl());
	  vSetLabel(_lbDarkIntvlCurr, m_a255cTemp);
      

	  sprintf(m_a255cTemp, "%.3f", m_poScan->m_poRotation->fGetExposureTime());
	  vSetLabel(_lbTimeCurr, m_a255cTemp);

	  sprintf(m_a255cTemp, "%d", m_poScan->nGetSeqInc());
	  vSetLabel(_lbSeqIncrCurr, m_a255cTemp);
	}

      // These are things that should be updated on every call

      double dRotStart, dRotEnd, dRotIncr, dRotWidth, dRotTime;
      dRotIncr  = (double) m_poScan->m_poRotation->fGetIncrement();
      dRotTime  = (double) m_poScan->m_poRotation->fGetExposureTime();

      if (NULL != m_poDevScan)
	{
	  nStat = m_poDevScan->nGetLastSeqNum(&nTemp);
	  if ( (DEV_SUCCESS != nStat) && (DEV_INVALIDSTATE != nStat) )
	    {
	      m_poDevScan->vGetStatusMsg(&m_sStatusMsg);
	      vPutMessage("Scan GetLastSeqNum problem", 1);
	    }
	  nTemp = nTemp + m_poScan->nGetSeqInc();
	  sprintf(m_a255cTemp, "%d", nTemp);
	  vSetLabel(_lbSeqStartCurr, m_a255cTemp);

	  nTemp = 1 + (nTemp - m_poScan->nGetSeqNum(0))/ m_poScan->nGetSeqInc();
//	  sprintf(m_a255cTemp, "%d of %d\nScan: %d", nTemp,
//		                         m_poScan->nGetNumImages(),
//		  m_nNextScan);
	  sprintf(m_a255cTemp, "%d of\n%d", nTemp,
		                         m_poScan->nGetNumImages());
	  vSetLabel(_lbShutter1Curr, m_a255cTemp);
	}

      if (0.0 < dRotTime)
	{
	  nTemp = (int) (m_dExpTimeCurr / dRotTime);  // Num completed images
	  dRotStart = (double)nTemp * dRotIncr;
	  dRotWidth = m_dExpWidthCurr - dRotStart;
	  dRotEnd   = dRotStart + dRotIncr;

	  dTemp     = (double) m_poScan->nGetNumImages() * dRotTime;
	  nPercent  = (int) (m_dExpTimeCurr / dTemp  * 100.00); 
	  if (nPercent <   0) nPercent =   0;
	  if (nPercent > 100) nPercent = 100;
	  XtVaSetValues(_scScanTime, XmNvalue, nPercent, NULL);

	  sprintf(m_a255cTemp, "%.0lf", m_dExpTimeCurr);
	  vSetLabel(_lbScanTimeElapsedCurr, m_a255cTemp);
      
	  dTemp = dTemp - m_dExpTimeCurr;
	  sprintf(m_a255cTemp, "%.0lf", dTemp);
	  vSetLabel(_lbScanTimeRemCurr, m_a255cTemp);
//	  nStat = m_poScan->nGetImageName(&sFilename);

	  sprintf(m_a255cTemp, m_sFormat1.string(), dRotStart); // Current image rot start
	  vSetLabel(_lbRotStartCurr, m_a255cTemp);
      
	  sprintf(m_a255cTemp, m_sFormat1.string(), dRotEnd);    // Current image rot end
	  vSetLabel(_lbRotEndCurr, m_a255cTemp);      

	  sprintf(m_a255cTemp, m_sFormat1.string(), dRotWidth);
	  vSetLabel(_lbRotIncrCurr, m_a255cTemp);      

	  dTemp = (m_dExpTimeCurr - (double)nTemp * dRotTime); // curr img time
	  sprintf(m_a255cTemp, "%.0lf", dTemp);       // Place in  time elapsed
	  vSetLabel(_lbImageTimeElapsedCurr, m_a255cTemp);
	  sprintf(m_a255cTemp, "%.3lf", dTemp);       // Place in  time elapsed
	  vSetLabel(_lbTimeCurr, m_a255cTemp);

	  nPercent = (int) (dTemp / dRotTime * 100.00);// Change to percentage
	  if (nPercent <   0) nPercent =   0;          // Place in scale widget
	  if (nPercent > 100) nPercent = 100;
	  XtVaSetValues(_scImageTime, XmNvalue, nPercent, NULL);

	  dTemp = dRotTime - dTemp;           // Compute time remaining
	  sprintf(m_a255cTemp, "%.0lf", dTemp);
	  vSetLabel(_lbImageTimeRemCurr, m_a255cTemp);
	}
    }      
}

void
MainWindow::vPutMessage(const char *pcMessage, const int nFlag)
{
  if (NULL != pcMessage)
    {
      Cstring sTemp;
      sTemp = pcMessage;
      XmTextInsert(_twOutput, XmTextGetLastPosition(_twOutput), sTemp.string());
      XmTextInsert(_twOutput, XmTextGetLastPosition(_twOutput), "\r\n");
//      XmTextShowPosition(_twOutput, max(0, XmTextGetLastPosition(_twOutput)
//                                        -100));
      XmTextShowPosition(_twOutput, XmTextGetLastPosition(_twOutput));

    }
  // In addition, pop-up a message box if nFlag requests it!
   
  if ( (0 != nFlag) && (NULL == m_poRemote) )
    {
      // Kill the timer if it is active, so we have a chance to click OK...
      
#ifdef MSVC
      if (0 != m_unTimerId)
        {
          KillTimer(m_unTimerId);
          m_unTimerId = 0;
        }
      MessageBox(pcMessage, "Dtcollect ERROR", MB_OK | MB_ICONEXCLAMATION);
#else
      if (0 != m_hIntervalId)
	{
	  XtRemoveTimeOut(m_hIntervalId);
	  m_hIntervalId = 0;
	}
      vPostError(_mbError, (void *)pcMessage, 0);
#endif
    }
}

void MainWindow::vPopupShutterCB (Widget w, XtPointer clientData, XtPointer callData)
{
  if (w == _pbShutter)
    {
      XmPushButtonCallbackStruct *pCBS = (XmPushButtonCallbackStruct *)callData;
      XButtonPressedEvent *phEvent = (XButtonPressedEvent*) pCBS->event;
      XmMenuPosition(_ppShutter, phEvent);
      XtManageChild(_ppShutter);
    }
}

void
MainWindow::vPostError(Widget w, XtPointer clientData, XtPointer callData)
{
  // Post the message found in clientData to the widget w.
  // Widget w must be a messageBox widget

  if (XmIsMessageBox(w))
    {
      Cstring sMessage = (char *)clientData;
      Cstring sTemp;
      static Cstring ssSeparator = "$$";
      Boolean bTemp;
      if (sMessage.contains(ssSeparator))
	{
	  // Use the string before the separator as a resource and lookup
	  // what the error message translation should be.
	  // TO DO:  There may be several concatenated error strings
	  // in the input string.  All should be lookup!

	  sTemp = sMessage.before(ssSeparator);
	  String pcText;
	  String pcProgname;
	  XtGetApplicationNameAndClass(XtDisplay(w), &pcProgname, &pcText);
	  pcText = XGetDefault(XtDisplay(w), pcProgname,
			       ("error" + sTemp).string());
	  if (NULL != pcText)
	    {
	      // Ok, found a translation, so use it
	      sMessage = pcText;
	    }
	  else
	    {
	      // Did not find a translation so use the string after 
	      // the separator if it exists, otherwise use the input string

	      sTemp = sMessage.after(ssSeparator);
	      if ("" != sTemp)
		sMessage = sTemp;
	      else 
		sMessage = sMessage.before(ssSeparator);
	    }
	}
      
      // Set the messageString in the error dialog box to sMessage

      XmString xsMessage;
      xsMessage = (XmString)BX_CONVERT(w, sMessage.string(), XmRXmString, 
				    0, &bTemp);
      XtVaSetValues(w, XmNmessageString, xsMessage, NULL);
      XmStringFree(xsMessage);

      XBell(XtDisplay(w), -75);
      XtManageChild(w);
    }
}


void
MainWindow::vImageFileCBCallback(XtPointer pObj,           // Pointer to object 
				const Cstring& sFilename, // Filename
				const Cstring& sTemplate, // Template
				const int nSeqStart,      // Sequence start
				const int nSeqIncr,       // Sequence increment
				const int nNumImages)     // Number of images
{
  MainWindow *obj = (MainWindow *)pObj;
  obj->vImageFileCB(pObj, sFilename, sTemplate, nSeqStart, nSeqIncr, nNumImages);
}

void
MainWindow::vImageFileCB(XtPointer pObj,           // Pointer to object 
			const Cstring& sFilename, // Filename
			const Cstring& sTemplate, // Template
			const int nSeqStart,      // Sequence start
			const int nSeqIncr,       // Sequence increment
			const int nNumImages)     // Number of images
{

  if (m_hFilePB == _pbFileOpen)
    {
      if ("" != sFilename)
	{
	  Cstring sTemp;
	  sTemp = "File name is: " + sFilename;
	  vPutMessage(sTemp.string());
	  (void) m_poXprop->hSetProperty("DTDISPLAY_IMAGE_UPDATE",
					 sFilename + " New! Detector: " 
					 + m_sDetectorName + " //dtcollect//");
	  vPutMessage("WARNING! Contact jwp!");
	}
    }
  else if (m_hFilePB == _pbScanTemplate)
    {
      m_sMainTemplate = sTemplate;
      m_nMainSeqStart = nSeqStart;
      m_nMainSeqIncr  = nSeqIncr;
      m_nMainNumImgs  = nNumImages;
      // Add directory to scan template if it has no path
      Cstring sFullTemplate;
      sFullTemplate = sFileGetDirectory(m_sMainTemplate) 
	            + sFileGetBasename(m_sMainTemplate);
      m_poScan->vSetTemplate( sFullTemplate);
      m_poScan->vSetSeqStart( m_nMainSeqStart); 
      m_poScan->vSetSeqInc(m_nMainSeqIncr);

      // Update the main window fields
      
      XmTextFieldSetString(_tfScanTemplate, m_sMainTemplate.string());
      sprintf(m_a255cTemp, "%d", m_nMainSeqStart);
      XmTextFieldSetString(_tfScanSeqStart, m_a255cTemp);

      sprintf(m_a255cTemp, "%d", m_nMainNumImgs);
      XmTextFieldSetString(_tfScanNumImgs, m_a255cTemp);
      XmTextFieldShowPosition(_tfScanTemplate,
			      XmTextFieldGetLastPosition(_tfScanTemplate));
    }
  else if (m_hFilePB == _pbTemplate)
    {
      // Place template in correct scan table field,
      //   show last character, and set keyboard focus to the textfield
      
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nTemplate],
			   sTemplate.string());
      XmTextFieldShowPosition(m_ptCurrentTextRow->wTextField[ms_nTemplate],
	XmTextFieldGetLastPosition(m_ptCurrentTextRow->wTextField[ms_nTemplate]));

      XmProcessTraversal(m_ptCurrentTextRow->wTextField[ms_nTemplate],
			 XmTRAVERSE_CURRENT);

      if (1 >= nNumImages)
	{
	  // 1 image

	  sprintf(m_a255cTemp, "%d", nSeqStart);
	}
      else
	{
	  // More than 1 image, only valid if still

	  sprintf(m_a255cTemp, "%d, %d", nSeqStart, nNumImages);
	}
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nSeqStart],
			   m_a255cTemp);
      sprintf(m_a255cTemp, "%d", nSeqIncr);
      XmTextFieldSetString(m_ptCurrentTextRow->wTextField[ms_nSeqIncr],
			   m_a255cTemp);
    }
//+jwp
  if ( (m_hFilePB == _pbTemplate) || (m_hFilePB == _pbScanTemplate) )
    {
      // Check if directory exists
      // also make sure template basename has ??? AFTER last \  or / 

      Cstring sDir;
      int nError = 0;
      sDir = sFileGetDirectory(m_sMainTemplate);
      if (!bFileExists(sDir)) nError = 1;
      if (!sFileGetBasename(m_sMainTemplate).contains('?'))
	nError = nError + 2;
      if (0 != nError)
	{
	  // Of course, we don't know if the directory is writable or not
	  
	  if (0 < (nError % 2))
	    sDir = (Cstring)"Scan template directory DOES NOT EXIST!\n" 
	           + sDir + '\n';
	  else
	    sDir = "";
	  if (1 < nError)
	    sDir = sDir + "Scan template basename DOES NOT HAVE ???'s!\n";
	  vPutMessage(sDir, 1);
	  vPopDialogCB(_pbScanTemplate, NULL, NULL);
	}
    }
//-jwp
}

int
MainWindow::nCommandLineReadScan(const Cstring &sFile)
{
   XtManageChild(_sdCollectScan);
   return (nScanFileRW(0, sFile));
}

void
MainWindow::vCommandLineStartScan(void)
{
   XmSelectionBoxCallbackStruct callData;

   callData.reason = XmCR_APPLY;
   vScanCB(_sdCollectScan, NULL, (XtPointer)(&callData));
}


void
MainWindow::vEditDetectorOKCBCallback(XtPointer pObj)     // Pointer to object 
{
  // This is a static function,
  // so cannot use non-static member variables directly
  MainWindow *obj = (MainWindow *)pObj;
  obj->_cUIeditdetector->vGetValues(obj->m_poDefaultHeader);
}

void 
MainWindow::vHeaderEditCBCallback(XtPointer pObj, Widget w, 
				  XtPointer clientData,
				  XtPointer callData)
{
    MainWindow *obj = (MainWindow *)pObj;
    obj->vHeaderEditCB(pObj, w, clientData, callData);
};

void 
MainWindow::vHeaderEditCB(XtPointer pObj, Widget w, XtPointer clientData,
			  XtPointer callData)
{
  Boolean *pbChanged;
  pbChanged = (Boolean *) clientData;

  if (*pbChanged)
    {
//      cout << "MainWindow::vHeaderEditCB called!\n";

      _cUIheaderEdit->vGetHeader(m_poDefaultHeader);
      _cUIviewheader->vSetString(m_poDefaultHeader->sGet().string());
    }
}
void
MainWindow::vDestroy(void)
{
//  cout << "MainWindow::vDestroy called!!\n";
  if (NULL != m_poXhelp)
    {
      delete m_poXhelp;
      m_poXhelp = NULL;
    }
  if (NULL != m_poXcursor)
    {
      delete m_poXcursor;
      m_poXcursor = NULL;
    }
  if (NULL != m_poXprop)
    {
      delete m_poXprop;   // This deletes properties, too
      m_poXprop = NULL;
    }
  if (NULL != m_ptClientDataStructs)
    {
      delete [] m_ptClientDataStructs;
      m_ptClientDataStructs = NULL;
    }

  if (NULL != m_pptTextRow)
    {
      // Delete all non-null *m_pptTextRow

      delete [] m_pptTextRow;
      m_pptTextRow = NULL;
    }
  if (NULL != m_poScan)
    {
      delete m_poScan;
      m_poScan = NULL;
    }
  if (NULL != m_poDefaultHeader)
    {
      delete m_poDefaultHeader;
      m_poDefaultHeader = NULL;
    }
#ifdef RIGAKUMSC_CLIENT
  if (NULL != g_poInstrumentClient)
    {
      delete g_poInstrumentClient;
      g_poInstrumentClient = NULL;
    }
#endif

}
// End user code block <tail>
