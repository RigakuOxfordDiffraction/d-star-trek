/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 */
/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory Version 5.0.
 *
 * Identification: 
 */
!(CX)procedure vWavelengthCB();


object cUIwavelength_tbOptionAbs : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptionAbs _XmNsensitive = true;
!(BX)   _XmNset = true;
!(BX)   cUIwavelength_tbOptionAbs _XmNset = true;
!(BX)   _XmNlabelString = compound_string("Absolute");
        XmNwidth = 209;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_tbOptionPeak : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptionPeak _XmNsensitive = true;
!(BX)   _XmNset = false;
!(BX)   cUIwavelength_tbOptionPeak _XmNset = false;
!(BX)   _XmNlabelString = compound_string("Peak");
!(BX)   cUIwavelength_tbOptionPeak _XmNlabelString = compound_string("Peak");
        XmNwidth = 209;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_tbOptionInflRise : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptionInflRise _XmNsensitive = true;
!(BX)   _XmNset = false;
!(BX)   cUIwavelength_tbOptionInflRise _XmNset = false;
!(BX)   _XmNlabelString = compound_string("Inflection rise");
!(BX)   cUIwavelength_tbOptionInflRise _XmNlabelString = compound_string("Inflection rise");
        XmNwidth = 209;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_tbOptionInflFall : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptionInflFall _XmNsensitive = true;
!(BX)   _XmNset = false;
!(BX)   cUIwavelength_tbOptionInflFall _XmNset = false;
!(BX)   _XmNlabelString = compound_string("Inflection fall");
!(BX)   cUIwavelength_tbOptionInflFall _XmNlabelString = compound_string("Inflection fall");
        XmNwidth = 209;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_rbOption : XmRadioBox widget {
    arguments {
        XmNnumColumns = 2;
        XmNpacking = XmPACK_COLUMN;
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_rbOption _XmNsensitive = true;
        XmNspacing = 3;
        XmNorientation = XmHORIZONTAL;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 150;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNx = 150;
        XmNy = 0;
        XmNwidth = 475;
        XmNheight = 67;
    };
    controls {
         managed XmToggleButton cUIwavelength_tbOptionAbs;
         managed XmToggleButton cUIwavelength_tbOptionPeak;
         managed XmToggleButton cUIwavelength_tbOptionInflRise;
         managed XmToggleButton cUIwavelength_tbOptionInflFall;
    };
    callbacks {
    };
};

object cUIwavelength_tbOptimizeNo : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptimizeNo _XmNsensitive = true;
!(BX)   _XmNset = true;
!(BX)   cUIwavelength_tbOptimizeNo _XmNset = true;
!(BX)   _XmNlabelString = compound_string("No");
!(BX)   cUIwavelength_tbOptimizeNo _XmNlabelString = compound_string("No");
        XmNwidth = 65;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_tbOptimizeYes : XmToggleButton widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_tbOptimizeYes _XmNsensitive = true;
!(BX)   _XmNset = false;
!(BX)   cUIwavelength_tbOptimizeYes _XmNset = false;
!(BX)   _XmNlabelString = compound_string("Yes");
!(BX)   cUIwavelength_tbOptimizeYes _XmNlabelString = compound_string("Yes");
        XmNwidth = 65;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_rbOptimize : XmRadioBox widget {
    arguments {
!(BX)   _XmNsensitive = true;
        XmNorientation = XmHORIZONTAL;
        XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 26;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNleftWidget = XmLabel cUIwavelength_lbOptimize;
        XmNtopWidget = XmLabel cUIwavelength_lbOptimize;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 139;
        XmNheight = 35;
    };
    controls {
         managed XmToggleButton cUIwavelength_tbOptimizeNo;
         managed XmToggleButton cUIwavelength_tbOptimizeYes;
    };
    callbacks {
    };
};

object cUIwavelength_lbOption : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_lbOption _XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Option:");
!(BX)   cUIwavelength_lbOption _XmNlabelString = compound_string("Option:");
        XmNtraversalOn = false;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 124;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_lbOptimize : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_lbOptimize _XmNsensitive = true;
!(BX)   _XmNlabelString = compound_string("Optimize:");
!(BX)   cUIwavelength_lbOptimize _XmNlabelString = compound_string("Optimize:");
        XmNtraversalOn = false;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNtopOffset = 0;
        XmNtopWidget = XmRadioBox cUIwavelength_rbOption;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 124;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object cUIwavelength_form : XmForm widget {
    arguments {
!(BX)   _XmNsensitive = true;
!(BX)   cUIwavelength_form _XmNsensitive = true;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 11;
        XmNy = 207;
        XmNwidth = 625;
        XmNheight = 102;
    };
    controls {
         managed XmLabel cUIwavelength_lbOptimize;
         managed XmLabel cUIwavelength_lbOption;
         managed XmRadioBox cUIwavelength_rbOptimize;
         managed XmRadioBox cUIwavelength_rbOption;
    };
    callbacks {
    };
};

object cUIwavelength_selectionBox : XmSelectionDialog widget {
    arguments {
!(BX) BxNclassOnly = "CUIwavelength";
!(BX) BxNsubclassDerived = "False";
!(BX) BxNclassOnlyFile = "True";
!(BX) BxNbaseInclude = asciz_string_table('');
!(BX) BxNderivedInclude = asciz_string_table('');
!(BX) BxNderived = "CUIwavelengthD";
!(BX) BxNfilebase = "CUIwavelengthD";
!(BX) BxNclassFilebase = "CUIwavelength";
!(BX) BxNclassGeometry = "647x457+97+283";
!(BX) BxNgenerate = "False";
!(BX) BxNreference = "False";
!(BX) BxNpaletteGroup = "User Classes";
!(BX) BxNpaletteName = "cUIwavelength";
!(BX) BxNpaletteGeom = "+0+0";
!(BX) BxNpalettePixmapName = "Class";
!(BX)   _XmNdialogTitle = compound_string("d*TREK - Wavelength chooser");
!(BX)   cUIwavelength_selectionBox _XmNdialogTitle = compound_string("d*TREK - Wavelength chooser");
!(BX)   _XmNlistItemCount = 1;
!(BX)   cUIwavelength_selectionBox _XmNlistItemCount = 1;
!(BX)   _XmNlistItems = string_table(
!(BX)	compound_string("1.54178 Cu Kalpha:0.71069 Mo"));
!(BX)   cUIwavelength_selectionBox _XmNlistItems = string_table(
!(BX)	compound_string("1.54178 Cu Kalpha:0.71069 Mo"));
!(BX)   _XmNselectionLabelString = compound_string("Wavelength");
!(BX)   _XmNlistLabelString = compound_string("Common wavelengths");
!(BX)   cUIwavelength_selectionBox _XmNlistLabelString = compound_string("Common wavelengths");
        XmNautoUnmanage = true;
        XmNx = 97;
        XmNy = 283;
        XmNwidth = 647;
        XmNheight = 457;
    };
    controls {
         managed XmForm cUIwavelength_form;
    };
    callbacks {
        XmNokCallback = procedure vWavelengthCB();
        XmNapplyCallback = procedure vWavelengthCB();
    };
};
