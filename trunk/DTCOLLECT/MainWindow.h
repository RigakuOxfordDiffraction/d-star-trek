//
// README: Portions of this file are merged at file generation
// time. Edits can be made *only* in between specified code blocks, look
// for keywords <Begin user code> and <End user code>.
//
//////////////////////////////////////////////////////////////
//
// Header file for MainWindow
//
//    Created by Builder Xcessory Version 5.0.
//    Generated by Code Generator Xcessory 5.0 (05/22/98) .
//
//    This class is a user interface "component", as described
//    in "Object-Oriented Programming with C++ and OSF/Motif",
//    by Douglas Young, Prentice Hall, 1992. ISBN 0-13-630252-1
//
//////////////////////////////////////////////////////////////


// Begin user code block <file_comments>
// Copyright (c) 1996, 1995 Molecular Structure Corporation
//
// RESTRICTED RIGHTS NOTICE SHORT FORM (JUNE 1987)
//
// Use, reproduction, or disclosure is subject to restrictions set
// forth in Contract No. W-31-109-ENG-38 and Contract No. 
// 943072401 with the University of Chicago, Operator of
// Argonne National Laboratory.
//
// MainWindow.h   Initial author: J.W. Pflugrath           16-Dec-1995
//    This file was automatically generated by ICS Builder Xcessory.
/*
 *
 * Copyright (C) 2014 Rigaku Americas Corporation
 *                    9009 New Trails Drive
 *                    The Woodlands, TX, USA  77381
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice(s), this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice(s), this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Rigaku Americas Corporation nor the 
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RIGAKU AMERICAS CORPORATION BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/

// End user code block <file_comments>

#ifndef MainWindow_H
#define MainWindow_H
#include "UIComponent.h"
class CUIheaderEdit;
class CUIeditdetector;
class CUIviewheader;
class CUIimagefileSelect;
#include "CUIwavelength.h"

//
// Globally included information (change thru Output File Names Dialog).
//


//
// Class Specific Includes (change thru the class in Resource Editor).
//



// Begin user code block <head>

#if !defined(VC9) && !defined(__APPLE__) && !defined(NEW_IOS)
#include <iostream.h>
#include <fstream.h>
#include <iomanip.h>
#else
#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;
#endif
#include "Dtrek.h"
#include "dtreksys.h"
#include "Cstring.h"
#include "CXhelp.h"
#include "CXcursor.h"
#include "Cdetector.h"
#include "Csource.h"
#include "Ccrystal.h"
#include "Crotation.h"
#include "Cscan.h"
#include "CXprop.h"
#include "Cgoniometer.h"

// Some hardware device classes

#include "CDevSource.h"
#include "CDevCounter.h"
#include "CDevShutter.h"
#include "CDevGoniom.h"
#include "CDevDetector.h"
#include "CDevScan.h"
//#include "Cremote.h"

// For the time function
#include <time.h>

typedef struct _tagTextRow
{
  Widget wToggle;
  Widget wTextField[13];
  UICallbackStruct *ptCBS[13];
} tagTextRow;

// End user code block <head>

class MainWindow : public UIComponent

// Begin user code block <superclass>
// End user code block <superclass>
{

// Begin user code block <friends>
// End user code block <friends>

  public:

    MainWindow(const char *, Widget);
    MainWindow(const char *);
    virtual ~MainWindow();
    virtual void create(Widget);
    const char *const  className();
    
    // Begin user code block <public>

    static  void vWorkProc1(XtPointer, XtIntervalId*);

#if defined(__NUTC__)
    virtual void create2(Widget);
#endif
    static Cstring ms_sDefaultHeaderTemplateFile;
    static Cstring ms_sDtdisplay;
    virtual void vRaiseMBError();
    XtAppContext m_hAppContext;

    void vCommandLineStartScan(void);
    int nCommandLineReadScan(const Cstring &sFile);

    inline Widget hGetErrorWidget(void) { return (_mbError); }

    // End user code block <public>
  protected:
    // Classes created by this class
    CUIheaderEdit* _cUIheaderEdit;
    CUIeditdetector* _cUIeditdetector;
    CUIviewheader* _cUIviewheader;
    CUIimagefileSelect* _cUIimagefileSelect;
    CUIwavelength* _cUIwavelength;
    
    // Widgets created by this class
    Widget _MainWindow;
    Widget _xmDialogShellWarnPosition;
    Widget _mbWarnPosition;
    Widget _xmDialogShellHeaderEdit;
    Widget _xmDialogShellEditDetector;
    Widget _xmDialogShellFileOpenSave;
    Widget _fsdFileOpenSave;
    Widget _tbFileOpenSave;
    Widget _xmDialogShellViewHeader;
    Widget _xmDialogShellImageFile;
    Widget _xmDialogShellError;
    Widget _mbError;
    Widget _xmDialogShellWavelength;
    Widget _xmDialogShellCollectScan;
    Widget _sdCollectScan;
    Widget _xmDialogShellCollectScanFile;
    Widget _fsdCollectScanFile;
    Widget _xmDialogShellDatum;
    Widget _sdDatum;
    Widget _fmDatum;
    Widget _tfDatumTheta;
    Widget _tfDatumDist;
    Widget _tfDatumPhi;
    Widget _tfDatumChi;
    Widget _tfDatumOmega;
    Widget _lbDatumTheta;
    Widget _lbDatumDist;
    Widget _lbDatumPhi;
    Widget _lbDatumChi;
    Widget _lbDatumOmega;
    Widget _form9;
    Widget _frScanProgress;
    Widget _foScanProgress;
    Widget _lbScanPercent;
    Widget _scScanTime;
    Widget _frScanTimeRem;
    Widget _lbScanTimeRemCurr;
    Widget _frScanTimeElapsed;
    Widget _lbScanTimeElapsedCurr;
    Widget _lbScanTimeElapsed;
    Widget _lbScanTimeRem;
    Widget _frImageProgress;
    Widget _foImageProgress;
    Widget _lbImagePercent;
    Widget _scImageTime;
    Widget _frImageTimeRem;
    Widget _lbImageTimeRemCurr;
    Widget _frImageTimeElapsed;
    Widget _lbImageTimeElapsedCurr;
    Widget _lbImageTimeElapsed;
    Widget _lbImageTimeRem;
    Widget _swScan1;
    Widget _twScan;
    Widget _mnScan;
    Widget _cbScanFile;
    Widget _pmScanFile;
    Widget _pbScanFileOpen;
    Widget _pbScanFileSave;
    Widget _pbScanFileSaveAs;
    Widget _spScanFile;
    Widget _pbScanFileClose;
    Widget _cbScanEdit;
    Widget _pmScanEdit;
    Widget _pbScanEditCopy;
    Widget _pbScanEditCut;
    Widget _pbScanEditPaste;
    Widget _pbScanEditInsert;
    Widget _pbScanEditDelete;
    Widget _spScanEdit;
    Widget _pbScanEditPasteMW;
    Widget _pbScanEditDeleteAll;
    Widget _spScanEdit1;
    Widget _cbScanEditMulti;
    Widget _pmScanEditMulti;
    Widget _pbScanEditMulti2;
    Widget _pbScanEditMulti3;
    Widget _pbScanEditMulti3i;
    Widget _cbScanView;
    Widget _pmScanView;
    Widget _pbScanViewEnlarge;
    Widget _pbScanViewShrink;
    Widget _pbScanViewNarrow;
    Widget _pbScanViewWiden;
    Widget _cbScanHelp;
    Widget _pmScanHelp;
    Widget _pbScanHelpHTML;
    Widget _abScan;
    Widget _lbScanSelected;
    Widget _spScan;
    Widget _form18;
    Widget _lbScanNumCurr;
    Widget _lbShutter1Curr;
    Widget _lbRotStartCurr;
    Widget _lbRotEndCurr;
    Widget _lbRotIncrCurr;
    Widget _lbTimeCurr;
    Widget _lbAxisCurr;
    Widget _lbTemplateCurr;
    Widget _lbSeqStartCurr;
    Widget _lbSeqIncrCurr;
    Widget _lbDatumCurr;
    Widget _lbWavelengthCurr;
    Widget _lbNumOscCurr;
    Widget _lbDarkIntvlCurr;
    Widget _pbWavelength;
    Widget _pbDatum;
    Widget _rbShutter;
    Widget _tbShutterOpen;
    Widget _tbShutterClosed;
    Widget _pbTemplate;
    Widget _sbDarkIntvl;
    Widget _sbNumOsc;
    Widget _sbSeqIncr;
    Widget _sbSeqStart;
    Widget _sbTime;
    Widget _sbRotIncr;
    Widget _sbRotEnd;
    Widget _sbRotStart;
    Widget _rbAxis;
    Widget _tbPhi;
    Widget _tbOmega;
    Widget _lbScanNum;
    Widget _lbDarkIntvl;
    Widget _lbNumOsc;
    Widget _lbWavelength;
    Widget _lbDatum;
    Widget _lbSeqIncr;
    Widget _lbSeqStart;
    Widget _lbAxis;
    Widget _lbTemplate;
    Widget _lbTime;
    Widget _lbRotIncr;
    Widget _lbRotEnd;
    Widget _lbRotStart;
    Widget _lbShutter1;
    Widget _frScanNum;
    Widget _frShutter1;
    Widget _frRotStart;
    Widget _frRotEnd;
    Widget _frRotIncr;
    Widget _frTime;
    Widget _frAxis;
    Widget _frTemplate;
    Widget _frSeqStart;
    Widget _frSeqIncr;
    Widget _frDatum;
    Widget _frWavelength;
    Widget _frNumOsc;
    Widget _frDarkIntvl;
    Widget _swScan;
    Widget _form11;
    Widget _tbScan;
    Widget _tfShutter;
    Widget _tfRotStart;
    Widget _tfRotEnd;
    Widget _tfRotIncr;
    Widget _tfTime;
    Widget _tfAxis;
    Widget _tfTemplate;
    Widget _tfSeqStart;
    Widget _tfSeqIncr;
    Widget _tfDatum;
    Widget _tfWavelength;
    Widget _tfNumOsc;
    Widget _tfDarkIntvl;
    Widget _menuBar;
    Widget _cbFile;
    Widget _pmFile;
    Widget _cbFileNew;
    Widget _pmFileNew;
    Widget _pbFileNewCrysGon;
    Widget _pbFileNewDetGon;
    Widget _pbFileNewDet;
    Widget _pbFileNewShutter;
    Widget _pbFileNewSensor;
    Widget _separator;
    Widget _pbFileNewSource;
    Widget _separator1;
    Widget _pbFileNewAll;
    Widget _pbFileOpen;
    Widget _pbFileSaveAs;
    Widget _spFile1;
    Widget _pbFilePref;
    Widget _pbFilePrint;
    Widget _spFile2;
    Widget _spFile3;
    Widget _pbFileExit;
    Widget _cbEdit;
    Widget _pmEdit;
    Widget _pbEditHeader;
    Widget _pbEditDetector;
    Widget _cbEditClear;
    Widget _pmEditClear;
    Widget _pbEditClearAll;
    Widget _pbEditClearSel;
    Widget _cbView;
    Widget _pmView;
    Widget _pbViewHeader;
    Widget _cbCollect;
    Widget _pmCollect;
    Widget _pbCollectScan;
    Widget _pbCollect2;
    Widget _pbCollect3;
    Widget _pbCollect4;
    Widget _cbHelp;
    Widget _pmHelp;
    Widget _pbHelpHTML;
    Widget _pbHelpAbout;
    Widget _fmMain;
    Widget _frCommand;
    Widget _fmCommand;
    Widget _tfCommand;
    Widget _lbCommand;
    Widget _swOutput;
    Widget _twOutput;
    Widget _frSensor;
    Widget _swSensor;
    Widget _fmSensor;
    Widget _spSensor;
    Widget _lbSens6Curr;
    Widget _lbSens5Curr;
    Widget _lbSens4Curr;
    Widget _lbSens6;
    Widget _lbSens5;
    Widget _lbSens4;
    Widget _lbSens3Curr;
    Widget _lbSens2Curr;
    Widget _lbSens1Curr;
    Widget _lbSens3;
    Widget _lbSens2;
    Widget _lbSens1;
    Widget _frSource;
    Widget _fmSource;
    Widget _pbSourceChoose;
    Widget _frSourceCurr;
    Widget _lbSourceCurr;
    Widget _pbSourceMove;
    Widget _tfSource;
    Widget _lbSource;
    Widget _frExpose;
    Widget _fmExpose;
    Widget _lbExpCurr;
    Widget _lbExpSet;
    Widget _pbScanTemplate;
    Widget _lbScanTemplate;
    Widget _lbScanNumImgs;
    Widget _lbScanSeqStart;
    Widget _lbScanLastFile;
    Widget _tfScanTemplate;
    Widget _tfScanNumImgs;
    Widget _tfScanSeqStart;
    Widget _pbScan;
    Widget _frScanNumImgsCurr;
    Widget _lbScanNumImgsCurr;
    Widget _frScanSeqCurr;
    Widget _lbScanSeqCurr;
    Widget _frScanLastFile;
    Widget _lbScanLastFileCurr;
    Widget _lbExpose;
    Widget _frExpWidthCurr;
    Widget _lbExpWidthCurr;
    Widget _frExpTimeCurr;
    Widget _lbExpTimeCurr;
    Widget _pbExpose;
    Widget _tfExpWidth;
    Widget _tfExpTime;
    Widget _omExpose;
    Widget _pmExpose;
    Widget _pbExpDark;
    Widget _pbExpStill;
    Widget _pbExpPhi;
    Widget _pbExpOmega;
    Widget _lbExpWidth;
    Widget _lbExpTime;
    Widget _frDetector;
    Widget _fmDetector;
    Widget _frDetTheta;
    Widget _lbDetThetaCurr;
    Widget _frDetDist;
    Widget _lbDetDistCurr;
    Widget _pbDetMove;
    Widget _tfDetDist;
    Widget _tfDetTheta;
    Widget _lbDetTheta;
    Widget _lbDetDist;
    Widget _lbDetMoveTo;
    Widget _lbDetCurr;
    Widget _lbDetector;
    Widget _frCrystal;
    Widget _fmCrystal;
    Widget _frCrysPhi;
    Widget _lbCrysPhiCurr;
    Widget _frCrysChi;
    Widget _lbCrysChiCurr;
    Widget _frCrysOmega;
    Widget _lbCrysOmegaCurr;
    Widget _pbCrysMove;
    Widget _tfCrysPhi;
    Widget _tfCrysChi;
    Widget _tfCrysOmega;
    Widget _lbCrysPhi;
    Widget _lbCrysChi;
    Widget _lbCrysOmega;
    Widget _lbCrysCurr;
    Widget _lbCrysMoveTo;
    Widget _lbCrystal;
    Widget _frShutter;
    Widget _fmShutter;
    Widget _pbShutter;
    Widget _lbShutter;
    Widget _ppShutter;
    Widget _lbShutterYes;
    Widget _pbShutterYes;
    
    // These virtual functions are called from the private callbacks 
    // or event handlers intended to be overridden in derived classes
    // to define actions
    
    virtual void vWarnPositionCB(Widget, XtPointer, XtPointer);
    virtual void vFileOpenSaveCB(Widget, XtPointer, XtPointer);
    virtual void vScanCB(Widget, XtPointer, XtPointer);
    virtual void vScanSaveCB(Widget, XtPointer, XtPointer);
    virtual void vScanDatumCB(Widget, XtPointer, XtPointer);
    virtual void vUnPostHelp(Widget, XtPointer, XtPointer);
    virtual void vPostHelp(Widget, XtPointer, XtPointer);
    virtual void vScanFileCB(Widget, XtPointer, XtPointer);
    virtual void vScanEditCB(Widget, XtPointer, XtPointer);
    virtual void vScanViewCB(Widget, XtPointer, XtPointer);
    virtual void vScanArrowCB(Widget, XtPointer, XtPointer);
    virtual void vHTMLHelp(Widget, XtPointer, XtPointer);
    virtual void vScanRadio(Widget, XtPointer, XtPointer);
    virtual void vScanScrollBarCB(Widget, XtPointer, XtPointer);
    virtual void vScanToggleCB(Widget, XtPointer, XtPointer);
    virtual void vTextFieldCB(Widget, XtPointer, XtPointer);
    virtual void vFileNewCB(Widget, XtPointer, XtPointer);
    virtual void vExitCB(Widget, XtPointer, XtPointer);
    virtual void vEditHeaderCB(Widget, XtPointer, XtPointer);
    virtual void vEditClearCB(Widget, XtPointer, XtPointer);
    virtual void vCollectScanCB(Widget, XtPointer, XtPointer);
    virtual void vPopDialogCB(Widget, XtPointer, XtPointer);
    virtual void vMainCB(Widget, XtPointer, XtPointer);
    virtual void vExposeTypeCB(Widget, XtPointer, XtPointer);
    
    // Begin user code block <protected>

    virtual void vPopupShutterCB(Widget, XtPointer, XtPointer);
    virtual void vScrollbarCB(Widget, XtPointer, XtPointer);
    virtual void vScanRowCreate(void);
    virtual void vScanRowDelete(void);
    virtual void vScanRowSetValues(Cscan *poScan, const int nRow=-1);
    virtual void vScanRowGetValues(Cscan *poScan, const int nRow=-1);
    virtual void vSetLabel(Widget w, char *pcLabel, char *pcColor=NULL);
    virtual void vScanRowColor(const int nRow, const char *pcColor=NULL);
    virtual void vDestroy(void);

    // End user code block <protected>
  private: 
    
    //
    // Default application and class resources.
    //
    static String         _defaultMainWindowResources[];
    static UIAppDefault   _appDefaults[];
    static Boolean        _initAppDefaults;
    //
    // Callback client data.
    //
    UICallbackStruct  *_clientDataStructs;
    
    //
    // Callbacks to interface with Motif.
    //
    static void vWarnPositionCBCallback(Widget, XtPointer, XtPointer);
    static void vFileOpenSaveCBCallback(Widget, XtPointer, XtPointer);
    static void vScanCBCallback(Widget, XtPointer, XtPointer);
    static void vScanSaveCBCallback(Widget, XtPointer, XtPointer);
    static void vScanDatumCBCallback(Widget, XtPointer, XtPointer);
    static void vUnPostHelpCallback(Widget, XtPointer, XtPointer);
    static void vPostHelpCallback(Widget, XtPointer, XtPointer);
    static void vScanFileCBCallback(Widget, XtPointer, XtPointer);
    static void vScanEditCBCallback(Widget, XtPointer, XtPointer);
    static void vScanViewCBCallback(Widget, XtPointer, XtPointer);
    static void vScanArrowCBCallback(Widget, XtPointer, XtPointer);
    static void vHTMLHelpCallback(Widget, XtPointer, XtPointer);
    static void vScanRadioCallback(Widget, XtPointer, XtPointer);
    static void vScanScrollBarCBCallback(Widget, XtPointer, XtPointer);
    static void vScanToggleCBCallback(Widget, XtPointer, XtPointer);
    static void vTextFieldCBCallback(Widget, XtPointer, XtPointer);
    static void vFileNewCBCallback(Widget, XtPointer, XtPointer);
    static void vExitCBCallback(Widget, XtPointer, XtPointer);
    static void vEditHeaderCBCallback(Widget, XtPointer, XtPointer);
    static void vEditClearCBCallback(Widget, XtPointer, XtPointer);
    static void vCollectScanCBCallback(Widget, XtPointer, XtPointer);
    static void vPopDialogCBCallback(Widget, XtPointer, XtPointer);
    static void vMainCBCallback(Widget, XtPointer, XtPointer);
    static void vExposeTypeCBCallback(Widget, XtPointer, XtPointer);
    
    // Begin user code block <private>

    UICallbackStruct  *m_ptClientDataStructs;
    Cardinal    m_nCDC;

    static void vScrollbarCBCallback(Widget, XtPointer, XtPointer);
    static void vPostError(Widget, XtPointer, XtPointer);
    static void vImageFileCBCallback(XtPointer, const Cstring&, const Cstring&,
				    const int, const int, const int);
    virtual void vImageFileCB(XtPointer, const Cstring&, const Cstring&,
			     const int, const int, const int);

//    static  void vEditHeaderCBCallback(XtPointer, const tagEditHeader&);
//    virtual void vEditHeaderCB(XtPointer, const tagEditHeader&);

    static  void vEditDetectorOKCBCallback(XtPointer);

    static  void vHeaderEditCBCallback(XtPointer, Widget, XtPointer, XtPointer);
    virtual void vHeaderEditCB(XtPointer, Widget, XtPointer, XtPointer);

//    Cremote      *m_poRemote;
    void         *m_poRemote;

    Cstring      m_sTitle;
    CXhelp      *m_poXhelp;
    CXcursor    *m_poXcursor;
    CXprop      *m_poXprop;
    Cgoniometer *m_poGoniometer;
    
    Widget       m_hFilePB;
    Widget       m_scrollbar;
    int          m_nNumRows;
    int          m_nCurrentRow;
    int          m_nPrevRow;
    tagTextRow  *m_ptCurrentTextRow;
    tagTextRow **m_pptTextRow;
    char        *m_pcTextValue[14];
    Widget       m_frControl[14];
    Dimension    m_unScanWindowWidth;

    static int   ms_nShutter;
    static int   ms_nRotStart;
    static int   ms_nRotEnd;
    static int   ms_nRotIncr;
    static int   ms_nRotTime;
    static int   ms_nRotAxis;
    static int   ms_nTemplate;
    static int   ms_nSeqStart;
    static int   ms_nSeqIncr;
    static int   ms_nRelStart;
    static int   ms_nWavelength;
    static int   ms_nNumOsc;
    static int   ms_nNumDarkIntvl;
    static int   ms_nNumImgs;

    int          m_nNextScan;
    int          m_nPrevScan;
    int          m_nNumScans;
    Cscan       *m_poScan;
    Crotation   *m_poRotation;
    Cdetector   *m_poDetector;
    Csource     *m_poSource;
    Ccrystal    *m_poCrystal;

    int         m_nDefaultImageSize;
    float       m_fS0[3];      // Source vector

    float       m_fWavelength; // Wavelength
    float       m_fDetDist;    // Crystal to detector distance
    float       m_fDetSwing;   // Detector swing angle
      
    Cstring     m_sScanFile;   // File name for scan table

    Cstring     m_sMainTemplate;  // Main image file template for Expose
    int         m_nMainSeqStart;  // Main sequence start for Expose
    int         m_nMainSeqIncr;   // Main sequence increment for Expose
    int         m_nMainSeqCurr;   // Main current sequence number
    int         m_nMainNumImgs;   // Main number of images for Expose and Scan
    int         m_nMainNumImgsCurr;// Main number of images currently exposed
    int         m_nMainWarnPosition;

    Cimage_header *m_poDefaultHeader; // Default starting header for all new
                                      // images.

    float       m_fCurrPoint[2];
    float       m_fCurrPointX[3];
    float       m_fPrevPoint[3];
    float       m_fPrevPointX[3];

    // Variables for the main window textfields:

    double      m_dExpTime;
    double      m_dExpWidth;
    double      m_dCrysOmega;
    double      m_dCrysChi;
    double      m_dCrysPhi;
    double      m_dDetDist;
    double      m_dDetTheta;
    double      m_dSource;
    double     *m_pdValues[8];
    Widget      m_tfValues[8];

    int         m_nSourceOption;
    int         m_nSourceOptimize;

    double      m_dExpTimeCurr;
    double      m_dExpWidthCurr;
    double      m_dCrysOmegaCurr;
    double      m_dCrysChiCurr;
    double      m_dCrysPhiCurr;
    double      m_dDetDistCurr;
    double      m_dDetThetaCurr;
    double      m_dSourceCurr;
    Cstring     m_sFormat1;

    double      m_dEditHeader[12];
    Cstring     m_sEditHeaderComment;
    Cstring     m_sFormat2;

    static void vWavelengthCBCallback(XtPointer, 
					const float, const int, const int);
    void vWavelengthCB(const float, const int, const int);

    virtual int  nScanFileRW(const int nMode, const Cstring &sFile);
    virtual void vGetRequestedValues(const int nFlag = 0);
    virtual int  nUpdateRequestedValues(Cscan *poScan);
    virtual void vUpdateCurrentScan(const int nFlag=0);
    virtual void vPutMessage(const char *pcMessage, const int nFlag=0);
    inline  void vPutMessage(const Cstring &sMessage, const int nFlag=0)
      {vPutMessage(sMessage.string(), nFlag); }

    int     nUpdateCurrentValues(void);

    XtIntervalId m_hIntervalId;

    // Some hardware devices

    CDevDetector *m_poDevDet;
    CDevShutter  *m_poDevShutter;
    CDevCounter  *m_poDevCounter;
    CDevGoniom   *m_poDevGonCrys;
    CDevGoniom   *m_poDevGonDet;
    CDevSource   *m_poDevSource;
    CDevScan     *m_poDevScan;

    Cstring       m_sDetectorName;

    // Some hardware transition flags

    int        m_nDetWasActive;
    int        m_nShutterWasActive;
    int        m_nCounterWasActive;
    int        m_nCrysGonWasActive;
    int        m_nDetGonWasActive;
    int        m_nSourceWasActive;
    int        m_nScanWasActive;

    char       m_a255cTemp[256];     // A temporary place to sprintf to
    Cstring    m_sStatusMsg;

    // End user code block <private>
};

// Begin user code block <tail>
// End user code block <tail>
#endif
